// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_ROBOT_MOBAGO_FLATBUFFER_H_
#define FLATBUFFERS_GENERATED_ROBOT_MOBAGO_FLATBUFFER_H_

#include "flatbuffers/flatbuffers.h"


namespace MobaGo {
namespace FlatBuffer {

struct RequestRobotConfigAck;

enum Robot_Protocol {
  Robot_Protocol_Msg_RequestRobotConfig = 900,
  Robot_Protocol_Msg_RequestRobotConfigAck = 901
};

inline const char **EnumNamesRobot_Protocol() {
  static const char *names[] = { "Msg_RequestRobotConfig", "Msg_RequestRobotConfigAck", nullptr };
  return names;
}

inline const char *EnumNameRobot_Protocol(Robot_Protocol e) { return EnumNamesRobot_Protocol()[static_cast<int>(e) - static_cast<int>(Robot_Protocol_Msg_RequestRobotConfig)]; }

struct RequestRobotConfigAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *ip_addr() const { return GetPointer<const flatbuffers::String *>(4); }
  int32_t port() const { return GetField<int32_t>(6, 0); }
  int32_t start_id() const { return GetField<int32_t>(8, 0); }
  int32_t run_robot_num() const { return GetField<int32_t>(10, 0); }
  uint8_t net_type() const { return GetField<uint8_t>(12, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* ip_addr */) &&
           verifier.Verify(ip_addr()) &&
           VerifyField<int32_t>(verifier, 6 /* port */) &&
           VerifyField<int32_t>(verifier, 8 /* start_id */) &&
           VerifyField<int32_t>(verifier, 10 /* run_robot_num */) &&
           VerifyField<uint8_t>(verifier, 12 /* net_type */) &&
           verifier.EndTable();
  }
};

struct RequestRobotConfigAckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ip_addr(flatbuffers::Offset<flatbuffers::String> ip_addr) { fbb_.AddOffset(4, ip_addr); }
  void add_port(int32_t port) { fbb_.AddElement<int32_t>(6, port, 0); }
  void add_start_id(int32_t start_id) { fbb_.AddElement<int32_t>(8, start_id, 0); }
  void add_run_robot_num(int32_t run_robot_num) { fbb_.AddElement<int32_t>(10, run_robot_num, 0); }
  void add_net_type(uint8_t net_type) { fbb_.AddElement<uint8_t>(12, net_type, 0); }
  RequestRobotConfigAckBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  RequestRobotConfigAckBuilder &operator=(const RequestRobotConfigAckBuilder &);
  flatbuffers::Offset<RequestRobotConfigAck> Finish() {
    auto o = flatbuffers::Offset<RequestRobotConfigAck>(fbb_.EndTable(start_, 5));
    return o;
  }
};

inline flatbuffers::Offset<RequestRobotConfigAck> CreateRequestRobotConfigAck(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> ip_addr = 0,
   int32_t port = 0,
   int32_t start_id = 0,
   int32_t run_robot_num = 0,
   uint8_t net_type = 0) {
  RequestRobotConfigAckBuilder builder_(_fbb);
  builder_.add_run_robot_num(run_robot_num);
  builder_.add_start_id(start_id);
  builder_.add_port(port);
  builder_.add_ip_addr(ip_addr);
  builder_.add_net_type(net_type);
  return builder_.Finish();
}

}  // namespace FlatBuffer
}  // namespace MobaGo

#endif  // FLATBUFFERS_GENERATED_ROBOT_MOBAGO_FLATBUFFER_H_

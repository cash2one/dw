// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: account.proto

#ifndef PROTOBUF_account_2eproto__INCLUDED
#define PROTOBUF_account_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Entity {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_account_2eproto();
void protobuf_AssignDesc_account_2eproto();
void protobuf_ShutdownFile_account_2eproto();

class account;
class role_server;
class summoner;
class friend_player_info;
class friend_player_relation;

// ===================================================================

class account : public ::google::protobuf::Message {
 public:
  account();
  virtual ~account();

  account(const account& from);

  inline account& operator=(const account& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const account& default_instance();

  void Swap(account* other);

  // implements Message ----------------------------------------------

  account* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const account& from);
  void MergeFrom(const account& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // required string user_name = 2;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 2;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // required uint32 batch_num = 3;
  inline bool has_batch_num() const;
  inline void clear_batch_num();
  static const int kBatchNumFieldNumber = 3;
  inline ::google::protobuf::uint32 batch_num() const;
  inline void set_batch_num(::google::protobuf::uint32 value);

  // required int32 language_type = 4;
  inline bool has_language_type() const;
  inline void clear_language_type();
  static const int kLanguageTypeFieldNumber = 4;
  inline ::google::protobuf::int32 language_type() const;
  inline void set_language_type(::google::protobuf::int32 value);

  // required uint32 login_type = 5;
  inline bool has_login_type() const;
  inline void clear_login_type();
  static const int kLoginTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 login_type() const;
  inline void set_login_type(::google::protobuf::uint32 value);

  // required uint32 channel_type = 6;
  inline bool has_channel_type() const;
  inline void clear_channel_type();
  static const int kChannelTypeFieldNumber = 6;
  inline ::google::protobuf::uint32 channel_type() const;
  inline void set_channel_type(::google::protobuf::uint32 value);

  // required string create_tim = 7;
  inline bool has_create_tim() const;
  inline void clear_create_tim();
  static const int kCreateTimFieldNumber = 7;
  inline const ::std::string& create_tim() const;
  inline void set_create_tim(const ::std::string& value);
  inline void set_create_tim(const char* value);
  inline void set_create_tim(const char* value, size_t size);
  inline ::std::string* mutable_create_tim();
  inline ::std::string* release_create_tim();
  inline void set_allocated_create_tim(::std::string* create_tim);

  // required uint64 sum_id = 8;
  inline bool has_sum_id() const;
  inline void clear_sum_id();
  static const int kSumIdFieldNumber = 8;
  inline ::google::protobuf::uint64 sum_id() const;
  inline void set_sum_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Entity.account)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_batch_num();
  inline void clear_has_batch_num();
  inline void set_has_language_type();
  inline void clear_has_language_type();
  inline void set_has_login_type();
  inline void clear_has_login_type();
  inline void set_has_channel_type();
  inline void clear_has_channel_type();
  inline void set_has_create_tim();
  inline void clear_has_create_tim();
  inline void set_has_sum_id();
  inline void clear_has_sum_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 guid_;
  ::std::string* user_name_;
  ::google::protobuf::uint32 batch_num_;
  ::google::protobuf::int32 language_type_;
  ::google::protobuf::uint32 login_type_;
  ::google::protobuf::uint32 channel_type_;
  ::std::string* create_tim_;
  ::google::protobuf::uint64 sum_id_;
  friend void  protobuf_AddDesc_account_2eproto();
  friend void protobuf_AssignDesc_account_2eproto();
  friend void protobuf_ShutdownFile_account_2eproto();

  void InitAsDefaultInstance();
  static account* default_instance_;
};
// -------------------------------------------------------------------

class role_server : public ::google::protobuf::Message {
 public:
  role_server();
  virtual ~role_server();

  role_server(const role_server& from);

  inline role_server& operator=(const role_server& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_server& default_instance();

  void Swap(role_server* other);

  // implements Message ----------------------------------------------

  role_server* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_server& from);
  void MergeFrom(const role_server& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // required uint32 area_id = 2;
  inline bool has_area_id() const;
  inline void clear_area_id();
  static const int kAreaIdFieldNumber = 2;
  inline ::google::protobuf::uint32 area_id() const;
  inline void set_area_id(::google::protobuf::uint32 value);

  // required uint32 gs_id = 3;
  inline bool has_gs_id() const;
  inline void clear_gs_id();
  static const int kGsIdFieldNumber = 3;
  inline ::google::protobuf::uint32 gs_id() const;
  inline void set_gs_id(::google::protobuf::uint32 value);

  // required uint64 user_id = 4;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 4;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);

  // required string first_enter_time = 5;
  inline bool has_first_enter_time() const;
  inline void clear_first_enter_time();
  static const int kFirstEnterTimeFieldNumber = 5;
  inline const ::std::string& first_enter_time() const;
  inline void set_first_enter_time(const ::std::string& value);
  inline void set_first_enter_time(const char* value);
  inline void set_first_enter_time(const char* value, size_t size);
  inline ::std::string* mutable_first_enter_time();
  inline ::std::string* release_first_enter_time();
  inline void set_allocated_first_enter_time(::std::string* first_enter_time);

  // required string last_enter_time = 6;
  inline bool has_last_enter_time() const;
  inline void clear_last_enter_time();
  static const int kLastEnterTimeFieldNumber = 6;
  inline const ::std::string& last_enter_time() const;
  inline void set_last_enter_time(const ::std::string& value);
  inline void set_last_enter_time(const char* value);
  inline void set_last_enter_time(const char* value, size_t size);
  inline ::std::string* mutable_last_enter_time();
  inline ::std::string* release_last_enter_time();
  inline void set_allocated_last_enter_time(::std::string* last_enter_time);

  // @@protoc_insertion_point(class_scope:Entity.role_server)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_area_id();
  inline void clear_has_area_id();
  inline void set_has_gs_id();
  inline void clear_has_gs_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_first_enter_time();
  inline void clear_has_first_enter_time();
  inline void set_has_last_enter_time();
  inline void clear_has_last_enter_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 guid_;
  ::google::protobuf::uint32 area_id_;
  ::google::protobuf::uint32 gs_id_;
  ::google::protobuf::uint64 user_id_;
  ::std::string* first_enter_time_;
  ::std::string* last_enter_time_;
  friend void  protobuf_AddDesc_account_2eproto();
  friend void protobuf_AssignDesc_account_2eproto();
  friend void protobuf_ShutdownFile_account_2eproto();

  void InitAsDefaultInstance();
  static role_server* default_instance_;
};
// -------------------------------------------------------------------

class summoner : public ::google::protobuf::Message {
 public:
  summoner();
  virtual ~summoner();

  summoner(const summoner& from);

  inline summoner& operator=(const summoner& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const summoner& default_instance();

  void Swap(summoner* other);

  // implements Message ----------------------------------------------

  summoner* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const summoner& from);
  void MergeFrom(const summoner& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // required uint64 account_id = 2;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 2;
  inline ::google::protobuf::uint64 account_id() const;
  inline void set_account_id(::google::protobuf::uint64 value);

  // required string sum_name = 3;
  inline bool has_sum_name() const;
  inline void clear_sum_name();
  static const int kSumNameFieldNumber = 3;
  inline const ::std::string& sum_name() const;
  inline void set_sum_name(const ::std::string& value);
  inline void set_sum_name(const char* value);
  inline void set_sum_name(const char* value, size_t size);
  inline ::std::string* mutable_sum_name();
  inline ::std::string* release_sum_name();
  inline void set_allocated_sum_name(::std::string* sum_name);

  // optional uint64 match_status = 4;
  inline bool has_match_status() const;
  inline void clear_match_status();
  static const int kMatchStatusFieldNumber = 4;
  inline ::google::protobuf::uint64 match_status() const;
  inline void set_match_status(::google::protobuf::uint64 value);

  // optional uint64 gate_guid = 5;
  inline bool has_gate_guid() const;
  inline void clear_gate_guid();
  static const int kGateGuidFieldNumber = 5;
  inline ::google::protobuf::uint64 gate_guid() const;
  inline void set_gate_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Entity.summoner)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_sum_name();
  inline void clear_has_sum_name();
  inline void set_has_match_status();
  inline void clear_has_match_status();
  inline void set_has_gate_guid();
  inline void clear_has_gate_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 guid_;
  ::google::protobuf::uint64 account_id_;
  ::std::string* sum_name_;
  ::google::protobuf::uint64 match_status_;
  ::google::protobuf::uint64 gate_guid_;
  friend void  protobuf_AddDesc_account_2eproto();
  friend void protobuf_AssignDesc_account_2eproto();
  friend void protobuf_ShutdownFile_account_2eproto();

  void InitAsDefaultInstance();
  static summoner* default_instance_;
};
// -------------------------------------------------------------------

class friend_player_info : public ::google::protobuf::Message {
 public:
  friend_player_info();
  virtual ~friend_player_info();

  friend_player_info(const friend_player_info& from);

  inline friend_player_info& operator=(const friend_player_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const friend_player_info& default_instance();

  void Swap(friend_player_info* other);

  // implements Message ----------------------------------------------

  friend_player_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const friend_player_info& from);
  void MergeFrom(const friend_player_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // required string player_name = 2;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  inline void set_allocated_player_name(::std::string* player_name);

  // required uint32 vr_id = 3;
  inline bool has_vr_id() const;
  inline void clear_vr_id();
  static const int kVrIdFieldNumber = 3;
  inline ::google::protobuf::uint32 vr_id() const;
  inline void set_vr_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Entity.friend_player_info)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_vr_id();
  inline void clear_has_vr_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 guid_;
  ::std::string* player_name_;
  ::google::protobuf::uint32 vr_id_;
  friend void  protobuf_AddDesc_account_2eproto();
  friend void protobuf_AssignDesc_account_2eproto();
  friend void protobuf_ShutdownFile_account_2eproto();

  void InitAsDefaultInstance();
  static friend_player_info* default_instance_;
};
// -------------------------------------------------------------------

class friend_player_relation : public ::google::protobuf::Message {
 public:
  friend_player_relation();
  virtual ~friend_player_relation();

  friend_player_relation(const friend_player_relation& from);

  inline friend_player_relation& operator=(const friend_player_relation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const friend_player_relation& default_instance();

  void Swap(friend_player_relation* other);

  // implements Message ----------------------------------------------

  friend_player_relation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const friend_player_relation& from);
  void MergeFrom(const friend_player_relation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // repeated uint64 apply_list = 2;
  inline int apply_list_size() const;
  inline void clear_apply_list();
  static const int kApplyListFieldNumber = 2;
  inline ::google::protobuf::uint64 apply_list(int index) const;
  inline void set_apply_list(int index, ::google::protobuf::uint64 value);
  inline void add_apply_list(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      apply_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_apply_list();

  // repeated uint64 black_list = 3;
  inline int black_list_size() const;
  inline void clear_black_list();
  static const int kBlackListFieldNumber = 3;
  inline ::google::protobuf::uint64 black_list(int index) const;
  inline void set_black_list(int index, ::google::protobuf::uint64 value);
  inline void add_black_list(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      black_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_black_list();

  // repeated uint64 friend_list = 4;
  inline int friend_list_size() const;
  inline void clear_friend_list();
  static const int kFriendListFieldNumber = 4;
  inline ::google::protobuf::uint64 friend_list(int index) const;
  inline void set_friend_list(int index, ::google::protobuf::uint64 value);
  inline void add_friend_list(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      friend_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_friend_list();

  // @@protoc_insertion_point(class_scope:Entity.friend_player_relation)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 guid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > apply_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > black_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > friend_list_;
  friend void  protobuf_AddDesc_account_2eproto();
  friend void protobuf_AssignDesc_account_2eproto();
  friend void protobuf_ShutdownFile_account_2eproto();

  void InitAsDefaultInstance();
  static friend_player_relation* default_instance_;
};
// ===================================================================


// ===================================================================

// account

// required uint64 guid = 1;
inline bool account::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void account::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void account::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void account::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::uint64 account::guid() const {
  // @@protoc_insertion_point(field_get:Entity.account.guid)
  return guid_;
}
inline void account::set_guid(::google::protobuf::uint64 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:Entity.account.guid)
}

// required string user_name = 2;
inline bool account::has_user_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void account::set_has_user_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void account::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void account::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& account::user_name() const {
  // @@protoc_insertion_point(field_get:Entity.account.user_name)
  return *user_name_;
}
inline void account::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
  // @@protoc_insertion_point(field_set:Entity.account.user_name)
}
inline void account::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Entity.account.user_name)
}
inline void account::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Entity.account.user_name)
}
inline ::std::string* account::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Entity.account.user_name)
  return user_name_;
}
inline ::std::string* account::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void account::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Entity.account.user_name)
}

// required uint32 batch_num = 3;
inline bool account::has_batch_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void account::set_has_batch_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void account::clear_has_batch_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void account::clear_batch_num() {
  batch_num_ = 0u;
  clear_has_batch_num();
}
inline ::google::protobuf::uint32 account::batch_num() const {
  // @@protoc_insertion_point(field_get:Entity.account.batch_num)
  return batch_num_;
}
inline void account::set_batch_num(::google::protobuf::uint32 value) {
  set_has_batch_num();
  batch_num_ = value;
  // @@protoc_insertion_point(field_set:Entity.account.batch_num)
}

// required int32 language_type = 4;
inline bool account::has_language_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void account::set_has_language_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void account::clear_has_language_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void account::clear_language_type() {
  language_type_ = 0;
  clear_has_language_type();
}
inline ::google::protobuf::int32 account::language_type() const {
  // @@protoc_insertion_point(field_get:Entity.account.language_type)
  return language_type_;
}
inline void account::set_language_type(::google::protobuf::int32 value) {
  set_has_language_type();
  language_type_ = value;
  // @@protoc_insertion_point(field_set:Entity.account.language_type)
}

// required uint32 login_type = 5;
inline bool account::has_login_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void account::set_has_login_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void account::clear_has_login_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void account::clear_login_type() {
  login_type_ = 0u;
  clear_has_login_type();
}
inline ::google::protobuf::uint32 account::login_type() const {
  // @@protoc_insertion_point(field_get:Entity.account.login_type)
  return login_type_;
}
inline void account::set_login_type(::google::protobuf::uint32 value) {
  set_has_login_type();
  login_type_ = value;
  // @@protoc_insertion_point(field_set:Entity.account.login_type)
}

// required uint32 channel_type = 6;
inline bool account::has_channel_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void account::set_has_channel_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void account::clear_has_channel_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void account::clear_channel_type() {
  channel_type_ = 0u;
  clear_has_channel_type();
}
inline ::google::protobuf::uint32 account::channel_type() const {
  // @@protoc_insertion_point(field_get:Entity.account.channel_type)
  return channel_type_;
}
inline void account::set_channel_type(::google::protobuf::uint32 value) {
  set_has_channel_type();
  channel_type_ = value;
  // @@protoc_insertion_point(field_set:Entity.account.channel_type)
}

// required string create_tim = 7;
inline bool account::has_create_tim() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void account::set_has_create_tim() {
  _has_bits_[0] |= 0x00000040u;
}
inline void account::clear_has_create_tim() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void account::clear_create_tim() {
  if (create_tim_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    create_tim_->clear();
  }
  clear_has_create_tim();
}
inline const ::std::string& account::create_tim() const {
  // @@protoc_insertion_point(field_get:Entity.account.create_tim)
  return *create_tim_;
}
inline void account::set_create_tim(const ::std::string& value) {
  set_has_create_tim();
  if (create_tim_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    create_tim_ = new ::std::string;
  }
  create_tim_->assign(value);
  // @@protoc_insertion_point(field_set:Entity.account.create_tim)
}
inline void account::set_create_tim(const char* value) {
  set_has_create_tim();
  if (create_tim_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    create_tim_ = new ::std::string;
  }
  create_tim_->assign(value);
  // @@protoc_insertion_point(field_set_char:Entity.account.create_tim)
}
inline void account::set_create_tim(const char* value, size_t size) {
  set_has_create_tim();
  if (create_tim_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    create_tim_ = new ::std::string;
  }
  create_tim_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Entity.account.create_tim)
}
inline ::std::string* account::mutable_create_tim() {
  set_has_create_tim();
  if (create_tim_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    create_tim_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Entity.account.create_tim)
  return create_tim_;
}
inline ::std::string* account::release_create_tim() {
  clear_has_create_tim();
  if (create_tim_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = create_tim_;
    create_tim_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void account::set_allocated_create_tim(::std::string* create_tim) {
  if (create_tim_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete create_tim_;
  }
  if (create_tim) {
    set_has_create_tim();
    create_tim_ = create_tim;
  } else {
    clear_has_create_tim();
    create_tim_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Entity.account.create_tim)
}

// required uint64 sum_id = 8;
inline bool account::has_sum_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void account::set_has_sum_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void account::clear_has_sum_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void account::clear_sum_id() {
  sum_id_ = GOOGLE_ULONGLONG(0);
  clear_has_sum_id();
}
inline ::google::protobuf::uint64 account::sum_id() const {
  // @@protoc_insertion_point(field_get:Entity.account.sum_id)
  return sum_id_;
}
inline void account::set_sum_id(::google::protobuf::uint64 value) {
  set_has_sum_id();
  sum_id_ = value;
  // @@protoc_insertion_point(field_set:Entity.account.sum_id)
}

// -------------------------------------------------------------------

// role_server

// required uint64 guid = 1;
inline bool role_server::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_server::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_server::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_server::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::uint64 role_server::guid() const {
  // @@protoc_insertion_point(field_get:Entity.role_server.guid)
  return guid_;
}
inline void role_server::set_guid(::google::protobuf::uint64 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:Entity.role_server.guid)
}

// required uint32 area_id = 2;
inline bool role_server::has_area_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_server::set_has_area_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_server::clear_has_area_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_server::clear_area_id() {
  area_id_ = 0u;
  clear_has_area_id();
}
inline ::google::protobuf::uint32 role_server::area_id() const {
  // @@protoc_insertion_point(field_get:Entity.role_server.area_id)
  return area_id_;
}
inline void role_server::set_area_id(::google::protobuf::uint32 value) {
  set_has_area_id();
  area_id_ = value;
  // @@protoc_insertion_point(field_set:Entity.role_server.area_id)
}

// required uint32 gs_id = 3;
inline bool role_server::has_gs_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_server::set_has_gs_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_server::clear_has_gs_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_server::clear_gs_id() {
  gs_id_ = 0u;
  clear_has_gs_id();
}
inline ::google::protobuf::uint32 role_server::gs_id() const {
  // @@protoc_insertion_point(field_get:Entity.role_server.gs_id)
  return gs_id_;
}
inline void role_server::set_gs_id(::google::protobuf::uint32 value) {
  set_has_gs_id();
  gs_id_ = value;
  // @@protoc_insertion_point(field_set:Entity.role_server.gs_id)
}

// required uint64 user_id = 4;
inline bool role_server::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_server::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_server::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_server::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 role_server::user_id() const {
  // @@protoc_insertion_point(field_get:Entity.role_server.user_id)
  return user_id_;
}
inline void role_server::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:Entity.role_server.user_id)
}

// required string first_enter_time = 5;
inline bool role_server::has_first_enter_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void role_server::set_has_first_enter_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void role_server::clear_has_first_enter_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void role_server::clear_first_enter_time() {
  if (first_enter_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    first_enter_time_->clear();
  }
  clear_has_first_enter_time();
}
inline const ::std::string& role_server::first_enter_time() const {
  // @@protoc_insertion_point(field_get:Entity.role_server.first_enter_time)
  return *first_enter_time_;
}
inline void role_server::set_first_enter_time(const ::std::string& value) {
  set_has_first_enter_time();
  if (first_enter_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    first_enter_time_ = new ::std::string;
  }
  first_enter_time_->assign(value);
  // @@protoc_insertion_point(field_set:Entity.role_server.first_enter_time)
}
inline void role_server::set_first_enter_time(const char* value) {
  set_has_first_enter_time();
  if (first_enter_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    first_enter_time_ = new ::std::string;
  }
  first_enter_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:Entity.role_server.first_enter_time)
}
inline void role_server::set_first_enter_time(const char* value, size_t size) {
  set_has_first_enter_time();
  if (first_enter_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    first_enter_time_ = new ::std::string;
  }
  first_enter_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Entity.role_server.first_enter_time)
}
inline ::std::string* role_server::mutable_first_enter_time() {
  set_has_first_enter_time();
  if (first_enter_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    first_enter_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Entity.role_server.first_enter_time)
  return first_enter_time_;
}
inline ::std::string* role_server::release_first_enter_time() {
  clear_has_first_enter_time();
  if (first_enter_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = first_enter_time_;
    first_enter_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void role_server::set_allocated_first_enter_time(::std::string* first_enter_time) {
  if (first_enter_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete first_enter_time_;
  }
  if (first_enter_time) {
    set_has_first_enter_time();
    first_enter_time_ = first_enter_time;
  } else {
    clear_has_first_enter_time();
    first_enter_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Entity.role_server.first_enter_time)
}

// required string last_enter_time = 6;
inline bool role_server::has_last_enter_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void role_server::set_has_last_enter_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void role_server::clear_has_last_enter_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void role_server::clear_last_enter_time() {
  if (last_enter_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_enter_time_->clear();
  }
  clear_has_last_enter_time();
}
inline const ::std::string& role_server::last_enter_time() const {
  // @@protoc_insertion_point(field_get:Entity.role_server.last_enter_time)
  return *last_enter_time_;
}
inline void role_server::set_last_enter_time(const ::std::string& value) {
  set_has_last_enter_time();
  if (last_enter_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_enter_time_ = new ::std::string;
  }
  last_enter_time_->assign(value);
  // @@protoc_insertion_point(field_set:Entity.role_server.last_enter_time)
}
inline void role_server::set_last_enter_time(const char* value) {
  set_has_last_enter_time();
  if (last_enter_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_enter_time_ = new ::std::string;
  }
  last_enter_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:Entity.role_server.last_enter_time)
}
inline void role_server::set_last_enter_time(const char* value, size_t size) {
  set_has_last_enter_time();
  if (last_enter_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_enter_time_ = new ::std::string;
  }
  last_enter_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Entity.role_server.last_enter_time)
}
inline ::std::string* role_server::mutable_last_enter_time() {
  set_has_last_enter_time();
  if (last_enter_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_enter_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Entity.role_server.last_enter_time)
  return last_enter_time_;
}
inline ::std::string* role_server::release_last_enter_time() {
  clear_has_last_enter_time();
  if (last_enter_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = last_enter_time_;
    last_enter_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void role_server::set_allocated_last_enter_time(::std::string* last_enter_time) {
  if (last_enter_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete last_enter_time_;
  }
  if (last_enter_time) {
    set_has_last_enter_time();
    last_enter_time_ = last_enter_time;
  } else {
    clear_has_last_enter_time();
    last_enter_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Entity.role_server.last_enter_time)
}

// -------------------------------------------------------------------

// summoner

// required uint64 guid = 1;
inline bool summoner::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void summoner::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void summoner::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void summoner::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::uint64 summoner::guid() const {
  // @@protoc_insertion_point(field_get:Entity.summoner.guid)
  return guid_;
}
inline void summoner::set_guid(::google::protobuf::uint64 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:Entity.summoner.guid)
}

// required uint64 account_id = 2;
inline bool summoner::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void summoner::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void summoner::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void summoner::clear_account_id() {
  account_id_ = GOOGLE_ULONGLONG(0);
  clear_has_account_id();
}
inline ::google::protobuf::uint64 summoner::account_id() const {
  // @@protoc_insertion_point(field_get:Entity.summoner.account_id)
  return account_id_;
}
inline void summoner::set_account_id(::google::protobuf::uint64 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:Entity.summoner.account_id)
}

// required string sum_name = 3;
inline bool summoner::has_sum_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void summoner::set_has_sum_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void summoner::clear_has_sum_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void summoner::clear_sum_name() {
  if (sum_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sum_name_->clear();
  }
  clear_has_sum_name();
}
inline const ::std::string& summoner::sum_name() const {
  // @@protoc_insertion_point(field_get:Entity.summoner.sum_name)
  return *sum_name_;
}
inline void summoner::set_sum_name(const ::std::string& value) {
  set_has_sum_name();
  if (sum_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sum_name_ = new ::std::string;
  }
  sum_name_->assign(value);
  // @@protoc_insertion_point(field_set:Entity.summoner.sum_name)
}
inline void summoner::set_sum_name(const char* value) {
  set_has_sum_name();
  if (sum_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sum_name_ = new ::std::string;
  }
  sum_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Entity.summoner.sum_name)
}
inline void summoner::set_sum_name(const char* value, size_t size) {
  set_has_sum_name();
  if (sum_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sum_name_ = new ::std::string;
  }
  sum_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Entity.summoner.sum_name)
}
inline ::std::string* summoner::mutable_sum_name() {
  set_has_sum_name();
  if (sum_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sum_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Entity.summoner.sum_name)
  return sum_name_;
}
inline ::std::string* summoner::release_sum_name() {
  clear_has_sum_name();
  if (sum_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sum_name_;
    sum_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void summoner::set_allocated_sum_name(::std::string* sum_name) {
  if (sum_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sum_name_;
  }
  if (sum_name) {
    set_has_sum_name();
    sum_name_ = sum_name;
  } else {
    clear_has_sum_name();
    sum_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Entity.summoner.sum_name)
}

// optional uint64 match_status = 4;
inline bool summoner::has_match_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void summoner::set_has_match_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void summoner::clear_has_match_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void summoner::clear_match_status() {
  match_status_ = GOOGLE_ULONGLONG(0);
  clear_has_match_status();
}
inline ::google::protobuf::uint64 summoner::match_status() const {
  // @@protoc_insertion_point(field_get:Entity.summoner.match_status)
  return match_status_;
}
inline void summoner::set_match_status(::google::protobuf::uint64 value) {
  set_has_match_status();
  match_status_ = value;
  // @@protoc_insertion_point(field_set:Entity.summoner.match_status)
}

// optional uint64 gate_guid = 5;
inline bool summoner::has_gate_guid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void summoner::set_has_gate_guid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void summoner::clear_has_gate_guid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void summoner::clear_gate_guid() {
  gate_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_gate_guid();
}
inline ::google::protobuf::uint64 summoner::gate_guid() const {
  // @@protoc_insertion_point(field_get:Entity.summoner.gate_guid)
  return gate_guid_;
}
inline void summoner::set_gate_guid(::google::protobuf::uint64 value) {
  set_has_gate_guid();
  gate_guid_ = value;
  // @@protoc_insertion_point(field_set:Entity.summoner.gate_guid)
}

// -------------------------------------------------------------------

// friend_player_info

// required uint64 guid = 1;
inline bool friend_player_info::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void friend_player_info::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void friend_player_info::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void friend_player_info::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::uint64 friend_player_info::guid() const {
  // @@protoc_insertion_point(field_get:Entity.friend_player_info.guid)
  return guid_;
}
inline void friend_player_info::set_guid(::google::protobuf::uint64 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:Entity.friend_player_info.guid)
}

// required string player_name = 2;
inline bool friend_player_info::has_player_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void friend_player_info::set_has_player_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void friend_player_info::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void friend_player_info::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& friend_player_info::player_name() const {
  // @@protoc_insertion_point(field_get:Entity.friend_player_info.player_name)
  return *player_name_;
}
inline void friend_player_info::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
  // @@protoc_insertion_point(field_set:Entity.friend_player_info.player_name)
}
inline void friend_player_info::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Entity.friend_player_info.player_name)
}
inline void friend_player_info::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Entity.friend_player_info.player_name)
}
inline ::std::string* friend_player_info::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Entity.friend_player_info.player_name)
  return player_name_;
}
inline ::std::string* friend_player_info::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void friend_player_info::set_allocated_player_name(::std::string* player_name) {
  if (player_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_name_;
  }
  if (player_name) {
    set_has_player_name();
    player_name_ = player_name;
  } else {
    clear_has_player_name();
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Entity.friend_player_info.player_name)
}

// required uint32 vr_id = 3;
inline bool friend_player_info::has_vr_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void friend_player_info::set_has_vr_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void friend_player_info::clear_has_vr_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void friend_player_info::clear_vr_id() {
  vr_id_ = 0u;
  clear_has_vr_id();
}
inline ::google::protobuf::uint32 friend_player_info::vr_id() const {
  // @@protoc_insertion_point(field_get:Entity.friend_player_info.vr_id)
  return vr_id_;
}
inline void friend_player_info::set_vr_id(::google::protobuf::uint32 value) {
  set_has_vr_id();
  vr_id_ = value;
  // @@protoc_insertion_point(field_set:Entity.friend_player_info.vr_id)
}

// -------------------------------------------------------------------

// friend_player_relation

// required uint64 guid = 1;
inline bool friend_player_relation::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void friend_player_relation::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void friend_player_relation::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void friend_player_relation::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::uint64 friend_player_relation::guid() const {
  // @@protoc_insertion_point(field_get:Entity.friend_player_relation.guid)
  return guid_;
}
inline void friend_player_relation::set_guid(::google::protobuf::uint64 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:Entity.friend_player_relation.guid)
}

// repeated uint64 apply_list = 2;
inline int friend_player_relation::apply_list_size() const {
  return apply_list_.size();
}
inline void friend_player_relation::clear_apply_list() {
  apply_list_.Clear();
}
inline ::google::protobuf::uint64 friend_player_relation::apply_list(int index) const {
  // @@protoc_insertion_point(field_get:Entity.friend_player_relation.apply_list)
  return apply_list_.Get(index);
}
inline void friend_player_relation::set_apply_list(int index, ::google::protobuf::uint64 value) {
  apply_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:Entity.friend_player_relation.apply_list)
}
inline void friend_player_relation::add_apply_list(::google::protobuf::uint64 value) {
  apply_list_.Add(value);
  // @@protoc_insertion_point(field_add:Entity.friend_player_relation.apply_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
friend_player_relation::apply_list() const {
  // @@protoc_insertion_point(field_list:Entity.friend_player_relation.apply_list)
  return apply_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
friend_player_relation::mutable_apply_list() {
  // @@protoc_insertion_point(field_mutable_list:Entity.friend_player_relation.apply_list)
  return &apply_list_;
}

// repeated uint64 black_list = 3;
inline int friend_player_relation::black_list_size() const {
  return black_list_.size();
}
inline void friend_player_relation::clear_black_list() {
  black_list_.Clear();
}
inline ::google::protobuf::uint64 friend_player_relation::black_list(int index) const {
  // @@protoc_insertion_point(field_get:Entity.friend_player_relation.black_list)
  return black_list_.Get(index);
}
inline void friend_player_relation::set_black_list(int index, ::google::protobuf::uint64 value) {
  black_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:Entity.friend_player_relation.black_list)
}
inline void friend_player_relation::add_black_list(::google::protobuf::uint64 value) {
  black_list_.Add(value);
  // @@protoc_insertion_point(field_add:Entity.friend_player_relation.black_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
friend_player_relation::black_list() const {
  // @@protoc_insertion_point(field_list:Entity.friend_player_relation.black_list)
  return black_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
friend_player_relation::mutable_black_list() {
  // @@protoc_insertion_point(field_mutable_list:Entity.friend_player_relation.black_list)
  return &black_list_;
}

// repeated uint64 friend_list = 4;
inline int friend_player_relation::friend_list_size() const {
  return friend_list_.size();
}
inline void friend_player_relation::clear_friend_list() {
  friend_list_.Clear();
}
inline ::google::protobuf::uint64 friend_player_relation::friend_list(int index) const {
  // @@protoc_insertion_point(field_get:Entity.friend_player_relation.friend_list)
  return friend_list_.Get(index);
}
inline void friend_player_relation::set_friend_list(int index, ::google::protobuf::uint64 value) {
  friend_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:Entity.friend_player_relation.friend_list)
}
inline void friend_player_relation::add_friend_list(::google::protobuf::uint64 value) {
  friend_list_.Add(value);
  // @@protoc_insertion_point(field_add:Entity.friend_player_relation.friend_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
friend_player_relation::friend_list() const {
  // @@protoc_insertion_point(field_list:Entity.friend_player_relation.friend_list)
  return friend_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
friend_player_relation::mutable_friend_list() {
  // @@protoc_insertion_point(field_mutable_list:Entity.friend_player_relation.friend_list)
  return &friend_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Entity

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_account_2eproto__INCLUDED

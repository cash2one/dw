// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: account.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "account.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Entity {

namespace {

const ::google::protobuf::Descriptor* account_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  account_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_server_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_server_reflection_ = NULL;
const ::google::protobuf::Descriptor* summoner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  summoner_reflection_ = NULL;
const ::google::protobuf::Descriptor* friend_player_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  friend_player_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* friend_player_relation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  friend_player_relation_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_account_2eproto() {
  protobuf_AddDesc_account_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "account.proto");
  GOOGLE_CHECK(file != NULL);
  account_descriptor_ = file->message_type(0);
  static const int account_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account, batch_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account, language_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account, login_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account, channel_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account, create_tim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account, sum_id_),
  };
  account_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      account_descriptor_,
      account::default_instance_,
      account_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(account));
  role_server_descriptor_ = file->message_type(1);
  static const int role_server_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_server, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_server, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_server, gs_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_server, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_server, first_enter_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_server, last_enter_time_),
  };
  role_server_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_server_descriptor_,
      role_server::default_instance_,
      role_server_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_server, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_server, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_server));
  summoner_descriptor_ = file->message_type(2);
  static const int summoner_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(summoner, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(summoner, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(summoner, sum_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(summoner, match_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(summoner, gate_guid_),
  };
  summoner_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      summoner_descriptor_,
      summoner::default_instance_,
      summoner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(summoner, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(summoner, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(summoner));
  friend_player_info_descriptor_ = file->message_type(3);
  static const int friend_player_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_player_info, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_player_info, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_player_info, vr_id_),
  };
  friend_player_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      friend_player_info_descriptor_,
      friend_player_info::default_instance_,
      friend_player_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_player_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_player_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(friend_player_info));
  friend_player_relation_descriptor_ = file->message_type(4);
  static const int friend_player_relation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_player_relation, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_player_relation, apply_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_player_relation, black_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_player_relation, friend_list_),
  };
  friend_player_relation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      friend_player_relation_descriptor_,
      friend_player_relation::default_instance_,
      friend_player_relation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_player_relation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_player_relation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(friend_player_relation));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_account_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    account_descriptor_, &account::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_server_descriptor_, &role_server::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    summoner_descriptor_, &summoner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    friend_player_info_descriptor_, &friend_player_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    friend_player_relation_descriptor_, &friend_player_relation::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_account_2eproto() {
  delete account::default_instance_;
  delete account_reflection_;
  delete role_server::default_instance_;
  delete role_server_reflection_;
  delete summoner::default_instance_;
  delete summoner_reflection_;
  delete friend_player_info::default_instance_;
  delete friend_player_info_reflection_;
  delete friend_player_relation::default_instance_;
  delete friend_player_relation_reflection_;
}

void protobuf_AddDesc_account_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\raccount.proto\022\006Entity\"\242\001\n\007account\022\014\n\004g"
    "uid\030\001 \002(\004\022\021\n\tuser_name\030\002 \002(\t\022\021\n\tbatch_nu"
    "m\030\003 \002(\r\022\025\n\rlanguage_type\030\004 \002(\005\022\022\n\nlogin_"
    "type\030\005 \002(\r\022\024\n\014channel_type\030\006 \002(\r\022\022\n\ncrea"
    "te_tim\030\007 \002(\t\022\016\n\006sum_id\030\010 \002(\004\"\177\n\013role_ser"
    "ver\022\014\n\004guid\030\001 \002(\004\022\017\n\007area_id\030\002 \002(\r\022\r\n\005gs"
    "_id\030\003 \002(\r\022\017\n\007user_id\030\004 \002(\004\022\030\n\020first_ente"
    "r_time\030\005 \002(\t\022\027\n\017last_enter_time\030\006 \002(\t\"g\n"
    "\010summoner\022\014\n\004guid\030\001 \002(\004\022\022\n\naccount_id\030\002 "
    "\002(\004\022\020\n\010sum_name\030\003 \002(\t\022\024\n\014match_status\030\004 "
    "\001(\004\022\021\n\tgate_guid\030\005 \001(\004\"F\n\022friend_player_"
    "info\022\014\n\004guid\030\001 \002(\004\022\023\n\013player_name\030\002 \002(\t\022"
    "\r\n\005vr_id\030\003 \002(\r\"c\n\026friend_player_relation"
    "\022\014\n\004guid\030\001 \002(\004\022\022\n\napply_list\030\002 \003(\004\022\022\n\nbl"
    "ack_list\030\003 \003(\004\022\023\n\013friend_list\030\004 \003(\004", 595);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "account.proto", &protobuf_RegisterTypes);
  account::default_instance_ = new account();
  role_server::default_instance_ = new role_server();
  summoner::default_instance_ = new summoner();
  friend_player_info::default_instance_ = new friend_player_info();
  friend_player_relation::default_instance_ = new friend_player_relation();
  account::default_instance_->InitAsDefaultInstance();
  role_server::default_instance_->InitAsDefaultInstance();
  summoner::default_instance_->InitAsDefaultInstance();
  friend_player_info::default_instance_->InitAsDefaultInstance();
  friend_player_relation::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_account_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_account_2eproto {
  StaticDescriptorInitializer_account_2eproto() {
    protobuf_AddDesc_account_2eproto();
  }
} static_descriptor_initializer_account_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int account::kGuidFieldNumber;
const int account::kUserNameFieldNumber;
const int account::kBatchNumFieldNumber;
const int account::kLanguageTypeFieldNumber;
const int account::kLoginTypeFieldNumber;
const int account::kChannelTypeFieldNumber;
const int account::kCreateTimFieldNumber;
const int account::kSumIdFieldNumber;
#endif  // !_MSC_VER

account::account()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Entity.account)
}

void account::InitAsDefaultInstance() {
}

account::account(const account& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Entity.account)
}

void account::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  batch_num_ = 0u;
  language_type_ = 0;
  login_type_ = 0u;
  channel_type_ = 0u;
  create_tim_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sum_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

account::~account() {
  // @@protoc_insertion_point(destructor:Entity.account)
  SharedDtor();
}

void account::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_name_;
  }
  if (create_tim_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete create_tim_;
  }
  if (this != default_instance_) {
  }
}

void account::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* account::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return account_descriptor_;
}

const account& account::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2eproto();
  return *default_instance_;
}

account* account::default_instance_ = NULL;

account* account::New() const {
  return new account;
}

void account::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<account*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(batch_num_, channel_type_);
    guid_ = GOOGLE_ULONGLONG(0);
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_name_->clear();
      }
    }
    if (has_create_tim()) {
      if (create_tim_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        create_tim_->clear();
      }
    }
    sum_id_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool account::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Entity.account)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_name;
        break;
      }

      // required string user_name = 2;
      case 2: {
        if (tag == 18) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_batch_num;
        break;
      }

      // required uint32 batch_num = 3;
      case 3: {
        if (tag == 24) {
         parse_batch_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_num_)));
          set_has_batch_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_language_type;
        break;
      }

      // required int32 language_type = 4;
      case 4: {
        if (tag == 32) {
         parse_language_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &language_type_)));
          set_has_language_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_login_type;
        break;
      }

      // required uint32 login_type = 5;
      case 5: {
        if (tag == 40) {
         parse_login_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &login_type_)));
          set_has_login_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_channel_type;
        break;
      }

      // required uint32 channel_type = 6;
      case 6: {
        if (tag == 48) {
         parse_channel_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_type_)));
          set_has_channel_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_create_tim;
        break;
      }

      // required string create_tim = 7;
      case 7: {
        if (tag == 58) {
         parse_create_tim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_create_tim()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->create_tim().data(), this->create_tim().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "create_tim");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_sum_id;
        break;
      }

      // required uint64 sum_id = 8;
      case 8: {
        if (tag == 64) {
         parse_sum_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sum_id_)));
          set_has_sum_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Entity.account)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Entity.account)
  return false;
#undef DO_
}

void account::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Entity.account)
  // required uint64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // required string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_name(), output);
  }

  // required uint32 batch_num = 3;
  if (has_batch_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->batch_num(), output);
  }

  // required int32 language_type = 4;
  if (has_language_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->language_type(), output);
  }

  // required uint32 login_type = 5;
  if (has_login_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->login_type(), output);
  }

  // required uint32 channel_type = 6;
  if (has_channel_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->channel_type(), output);
  }

  // required string create_tim = 7;
  if (has_create_tim()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->create_tim().data(), this->create_tim().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "create_tim");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->create_tim(), output);
  }

  // required uint64 sum_id = 8;
  if (has_sum_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->sum_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Entity.account)
}

::google::protobuf::uint8* account::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Entity.account)
  // required uint64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // required string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_name(), target);
  }

  // required uint32 batch_num = 3;
  if (has_batch_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->batch_num(), target);
  }

  // required int32 language_type = 4;
  if (has_language_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->language_type(), target);
  }

  // required uint32 login_type = 5;
  if (has_login_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->login_type(), target);
  }

  // required uint32 channel_type = 6;
  if (has_channel_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->channel_type(), target);
  }

  // required string create_tim = 7;
  if (has_create_tim()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->create_tim().data(), this->create_tim().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "create_tim");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->create_tim(), target);
  }

  // required uint64 sum_id = 8;
  if (has_sum_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->sum_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Entity.account)
  return target;
}

int account::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // required string user_name = 2;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // required uint32 batch_num = 3;
    if (has_batch_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_num());
    }

    // required int32 language_type = 4;
    if (has_language_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->language_type());
    }

    // required uint32 login_type = 5;
    if (has_login_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->login_type());
    }

    // required uint32 channel_type = 6;
    if (has_channel_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_type());
    }

    // required string create_tim = 7;
    if (has_create_tim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->create_tim());
    }

    // required uint64 sum_id = 8;
    if (has_sum_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sum_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void account::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const account* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const account*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void account::MergeFrom(const account& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_batch_num()) {
      set_batch_num(from.batch_num());
    }
    if (from.has_language_type()) {
      set_language_type(from.language_type());
    }
    if (from.has_login_type()) {
      set_login_type(from.login_type());
    }
    if (from.has_channel_type()) {
      set_channel_type(from.channel_type());
    }
    if (from.has_create_tim()) {
      set_create_tim(from.create_tim());
    }
    if (from.has_sum_id()) {
      set_sum_id(from.sum_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void account::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void account::CopyFrom(const account& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool account::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void account::Swap(account* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(user_name_, other->user_name_);
    std::swap(batch_num_, other->batch_num_);
    std::swap(language_type_, other->language_type_);
    std::swap(login_type_, other->login_type_);
    std::swap(channel_type_, other->channel_type_);
    std::swap(create_tim_, other->create_tim_);
    std::swap(sum_id_, other->sum_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata account::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = account_descriptor_;
  metadata.reflection = account_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_server::kGuidFieldNumber;
const int role_server::kAreaIdFieldNumber;
const int role_server::kGsIdFieldNumber;
const int role_server::kUserIdFieldNumber;
const int role_server::kFirstEnterTimeFieldNumber;
const int role_server::kLastEnterTimeFieldNumber;
#endif  // !_MSC_VER

role_server::role_server()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Entity.role_server)
}

void role_server::InitAsDefaultInstance() {
}

role_server::role_server(const role_server& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Entity.role_server)
}

void role_server::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  area_id_ = 0u;
  gs_id_ = 0u;
  user_id_ = GOOGLE_ULONGLONG(0);
  first_enter_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_enter_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_server::~role_server() {
  // @@protoc_insertion_point(destructor:Entity.role_server)
  SharedDtor();
}

void role_server::SharedDtor() {
  if (first_enter_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete first_enter_time_;
  }
  if (last_enter_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete last_enter_time_;
  }
  if (this != default_instance_) {
  }
}

void role_server::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_server::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_server_descriptor_;
}

const role_server& role_server::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2eproto();
  return *default_instance_;
}

role_server* role_server::default_instance_ = NULL;

role_server* role_server::New() const {
  return new role_server;
}

void role_server::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<role_server*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(guid_, user_id_);
    if (has_first_enter_time()) {
      if (first_enter_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        first_enter_time_->clear();
      }
    }
    if (has_last_enter_time()) {
      if (last_enter_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        last_enter_time_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Entity.role_server)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_area_id;
        break;
      }

      // required uint32 area_id = 2;
      case 2: {
        if (tag == 16) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gs_id;
        break;
      }

      // required uint32 gs_id = 3;
      case 3: {
        if (tag == 24) {
         parse_gs_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gs_id_)));
          set_has_gs_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_user_id;
        break;
      }

      // required uint64 user_id = 4;
      case 4: {
        if (tag == 32) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_first_enter_time;
        break;
      }

      // required string first_enter_time = 5;
      case 5: {
        if (tag == 42) {
         parse_first_enter_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_first_enter_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->first_enter_time().data(), this->first_enter_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "first_enter_time");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_last_enter_time;
        break;
      }

      // required string last_enter_time = 6;
      case 6: {
        if (tag == 50) {
         parse_last_enter_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_enter_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->last_enter_time().data(), this->last_enter_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "last_enter_time");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Entity.role_server)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Entity.role_server)
  return false;
#undef DO_
}

void role_server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Entity.role_server)
  // required uint64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // required uint32 area_id = 2;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->area_id(), output);
  }

  // required uint32 gs_id = 3;
  if (has_gs_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gs_id(), output);
  }

  // required uint64 user_id = 4;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->user_id(), output);
  }

  // required string first_enter_time = 5;
  if (has_first_enter_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->first_enter_time().data(), this->first_enter_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "first_enter_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->first_enter_time(), output);
  }

  // required string last_enter_time = 6;
  if (has_last_enter_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_enter_time().data(), this->last_enter_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "last_enter_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->last_enter_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Entity.role_server)
}

::google::protobuf::uint8* role_server::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Entity.role_server)
  // required uint64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // required uint32 area_id = 2;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->area_id(), target);
  }

  // required uint32 gs_id = 3;
  if (has_gs_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gs_id(), target);
  }

  // required uint64 user_id = 4;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->user_id(), target);
  }

  // required string first_enter_time = 5;
  if (has_first_enter_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->first_enter_time().data(), this->first_enter_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "first_enter_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->first_enter_time(), target);
  }

  // required string last_enter_time = 6;
  if (has_last_enter_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_enter_time().data(), this->last_enter_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "last_enter_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->last_enter_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Entity.role_server)
  return target;
}

int role_server::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // required uint32 area_id = 2;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_id());
    }

    // required uint32 gs_id = 3;
    if (has_gs_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gs_id());
    }

    // required uint64 user_id = 4;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required string first_enter_time = 5;
    if (has_first_enter_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->first_enter_time());
    }

    // required string last_enter_time = 6;
    if (has_last_enter_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_enter_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_server::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_server* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_server*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_server::MergeFrom(const role_server& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
    if (from.has_gs_id()) {
      set_gs_id(from.gs_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_first_enter_time()) {
      set_first_enter_time(from.first_enter_time());
    }
    if (from.has_last_enter_time()) {
      set_last_enter_time(from.last_enter_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_server::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_server::CopyFrom(const role_server& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_server::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void role_server::Swap(role_server* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(area_id_, other->area_id_);
    std::swap(gs_id_, other->gs_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(first_enter_time_, other->first_enter_time_);
    std::swap(last_enter_time_, other->last_enter_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_server::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_server_descriptor_;
  metadata.reflection = role_server_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int summoner::kGuidFieldNumber;
const int summoner::kAccountIdFieldNumber;
const int summoner::kSumNameFieldNumber;
const int summoner::kMatchStatusFieldNumber;
const int summoner::kGateGuidFieldNumber;
#endif  // !_MSC_VER

summoner::summoner()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Entity.summoner)
}

void summoner::InitAsDefaultInstance() {
}

summoner::summoner(const summoner& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Entity.summoner)
}

void summoner::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  account_id_ = GOOGLE_ULONGLONG(0);
  sum_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  match_status_ = GOOGLE_ULONGLONG(0);
  gate_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

summoner::~summoner() {
  // @@protoc_insertion_point(destructor:Entity.summoner)
  SharedDtor();
}

void summoner::SharedDtor() {
  if (sum_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sum_name_;
  }
  if (this != default_instance_) {
  }
}

void summoner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* summoner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return summoner_descriptor_;
}

const summoner& summoner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2eproto();
  return *default_instance_;
}

summoner* summoner::default_instance_ = NULL;

summoner* summoner::New() const {
  return new summoner;
}

void summoner::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<summoner*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(guid_, account_id_);
    ZR_(match_status_, gate_guid_);
    if (has_sum_name()) {
      if (sum_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sum_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool summoner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Entity.summoner)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_account_id;
        break;
      }

      // required uint64 account_id = 2;
      case 2: {
        if (tag == 16) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sum_name;
        break;
      }

      // required string sum_name = 3;
      case 3: {
        if (tag == 26) {
         parse_sum_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sum_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sum_name().data(), this->sum_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sum_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_match_status;
        break;
      }

      // optional uint64 match_status = 4;
      case 4: {
        if (tag == 32) {
         parse_match_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_status_)));
          set_has_match_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gate_guid;
        break;
      }

      // optional uint64 gate_guid = 5;
      case 5: {
        if (tag == 40) {
         parse_gate_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gate_guid_)));
          set_has_gate_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Entity.summoner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Entity.summoner)
  return false;
#undef DO_
}

void summoner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Entity.summoner)
  // required uint64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // required uint64 account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->account_id(), output);
  }

  // required string sum_name = 3;
  if (has_sum_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sum_name().data(), this->sum_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sum_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sum_name(), output);
  }

  // optional uint64 match_status = 4;
  if (has_match_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->match_status(), output);
  }

  // optional uint64 gate_guid = 5;
  if (has_gate_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->gate_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Entity.summoner)
}

::google::protobuf::uint8* summoner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Entity.summoner)
  // required uint64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // required uint64 account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->account_id(), target);
  }

  // required string sum_name = 3;
  if (has_sum_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sum_name().data(), this->sum_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sum_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sum_name(), target);
  }

  // optional uint64 match_status = 4;
  if (has_match_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->match_status(), target);
  }

  // optional uint64 gate_guid = 5;
  if (has_gate_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->gate_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Entity.summoner)
  return target;
}

int summoner::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // required uint64 account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->account_id());
    }

    // required string sum_name = 3;
    if (has_sum_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sum_name());
    }

    // optional uint64 match_status = 4;
    if (has_match_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_status());
    }

    // optional uint64 gate_guid = 5;
    if (has_gate_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gate_guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void summoner::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const summoner* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const summoner*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void summoner::MergeFrom(const summoner& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_sum_name()) {
      set_sum_name(from.sum_name());
    }
    if (from.has_match_status()) {
      set_match_status(from.match_status());
    }
    if (from.has_gate_guid()) {
      set_gate_guid(from.gate_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void summoner::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void summoner::CopyFrom(const summoner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool summoner::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void summoner::Swap(summoner* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(account_id_, other->account_id_);
    std::swap(sum_name_, other->sum_name_);
    std::swap(match_status_, other->match_status_);
    std::swap(gate_guid_, other->gate_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata summoner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = summoner_descriptor_;
  metadata.reflection = summoner_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int friend_player_info::kGuidFieldNumber;
const int friend_player_info::kPlayerNameFieldNumber;
const int friend_player_info::kVrIdFieldNumber;
#endif  // !_MSC_VER

friend_player_info::friend_player_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Entity.friend_player_info)
}

void friend_player_info::InitAsDefaultInstance() {
}

friend_player_info::friend_player_info(const friend_player_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Entity.friend_player_info)
}

void friend_player_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vr_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

friend_player_info::~friend_player_info() {
  // @@protoc_insertion_point(destructor:Entity.friend_player_info)
  SharedDtor();
}

void friend_player_info::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_name_;
  }
  if (this != default_instance_) {
  }
}

void friend_player_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* friend_player_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return friend_player_info_descriptor_;
}

const friend_player_info& friend_player_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2eproto();
  return *default_instance_;
}

friend_player_info* friend_player_info::default_instance_ = NULL;

friend_player_info* friend_player_info::New() const {
  return new friend_player_info;
}

void friend_player_info::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    guid_ = GOOGLE_ULONGLONG(0);
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        player_name_->clear();
      }
    }
    vr_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool friend_player_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Entity.friend_player_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player_name;
        break;
      }

      // required string player_name = 2;
      case 2: {
        if (tag == 18) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "player_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_vr_id;
        break;
      }

      // required uint32 vr_id = 3;
      case 3: {
        if (tag == 24) {
         parse_vr_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vr_id_)));
          set_has_vr_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Entity.friend_player_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Entity.friend_player_info)
  return false;
#undef DO_
}

void friend_player_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Entity.friend_player_info)
  // required uint64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // required string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "player_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->player_name(), output);
  }

  // required uint32 vr_id = 3;
  if (has_vr_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vr_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Entity.friend_player_info)
}

::google::protobuf::uint8* friend_player_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Entity.friend_player_info)
  // required uint64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // required string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "player_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  // required uint32 vr_id = 3;
  if (has_vr_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->vr_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Entity.friend_player_info)
  return target;
}

int friend_player_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // required string player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // required uint32 vr_id = 3;
    if (has_vr_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vr_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void friend_player_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const friend_player_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const friend_player_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void friend_player_info::MergeFrom(const friend_player_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_vr_id()) {
      set_vr_id(from.vr_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void friend_player_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void friend_player_info::CopyFrom(const friend_player_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool friend_player_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void friend_player_info::Swap(friend_player_info* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(player_name_, other->player_name_);
    std::swap(vr_id_, other->vr_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata friend_player_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = friend_player_info_descriptor_;
  metadata.reflection = friend_player_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int friend_player_relation::kGuidFieldNumber;
const int friend_player_relation::kApplyListFieldNumber;
const int friend_player_relation::kBlackListFieldNumber;
const int friend_player_relation::kFriendListFieldNumber;
#endif  // !_MSC_VER

friend_player_relation::friend_player_relation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Entity.friend_player_relation)
}

void friend_player_relation::InitAsDefaultInstance() {
}

friend_player_relation::friend_player_relation(const friend_player_relation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Entity.friend_player_relation)
}

void friend_player_relation::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

friend_player_relation::~friend_player_relation() {
  // @@protoc_insertion_point(destructor:Entity.friend_player_relation)
  SharedDtor();
}

void friend_player_relation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void friend_player_relation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* friend_player_relation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return friend_player_relation_descriptor_;
}

const friend_player_relation& friend_player_relation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2eproto();
  return *default_instance_;
}

friend_player_relation* friend_player_relation::default_instance_ = NULL;

friend_player_relation* friend_player_relation::New() const {
  return new friend_player_relation;
}

void friend_player_relation::Clear() {
  guid_ = GOOGLE_ULONGLONG(0);
  apply_list_.Clear();
  black_list_.Clear();
  friend_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool friend_player_relation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Entity.friend_player_relation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_apply_list;
        break;
      }

      // repeated uint64 apply_list = 2;
      case 2: {
        if (tag == 16) {
         parse_apply_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_apply_list())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_apply_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_apply_list;
        if (input->ExpectTag(24)) goto parse_black_list;
        break;
      }

      // repeated uint64 black_list = 3;
      case 3: {
        if (tag == 24) {
         parse_black_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_black_list())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_black_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_black_list;
        if (input->ExpectTag(32)) goto parse_friend_list;
        break;
      }

      // repeated uint64 friend_list = 4;
      case 4: {
        if (tag == 32) {
         parse_friend_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_friend_list())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_friend_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_friend_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Entity.friend_player_relation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Entity.friend_player_relation)
  return false;
#undef DO_
}

void friend_player_relation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Entity.friend_player_relation)
  // required uint64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // repeated uint64 apply_list = 2;
  for (int i = 0; i < this->apply_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->apply_list(i), output);
  }

  // repeated uint64 black_list = 3;
  for (int i = 0; i < this->black_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->black_list(i), output);
  }

  // repeated uint64 friend_list = 4;
  for (int i = 0; i < this->friend_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->friend_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Entity.friend_player_relation)
}

::google::protobuf::uint8* friend_player_relation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Entity.friend_player_relation)
  // required uint64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // repeated uint64 apply_list = 2;
  for (int i = 0; i < this->apply_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->apply_list(i), target);
  }

  // repeated uint64 black_list = 3;
  for (int i = 0; i < this->black_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->black_list(i), target);
  }

  // repeated uint64 friend_list = 4;
  for (int i = 0; i < this->friend_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->friend_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Entity.friend_player_relation)
  return target;
}

int friend_player_relation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

  }
  // repeated uint64 apply_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->apply_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->apply_list(i));
    }
    total_size += 1 * this->apply_list_size() + data_size;
  }

  // repeated uint64 black_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->black_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->black_list(i));
    }
    total_size += 1 * this->black_list_size() + data_size;
  }

  // repeated uint64 friend_list = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->friend_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->friend_list(i));
    }
    total_size += 1 * this->friend_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void friend_player_relation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const friend_player_relation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const friend_player_relation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void friend_player_relation::MergeFrom(const friend_player_relation& from) {
  GOOGLE_CHECK_NE(&from, this);
  apply_list_.MergeFrom(from.apply_list_);
  black_list_.MergeFrom(from.black_list_);
  friend_list_.MergeFrom(from.friend_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void friend_player_relation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void friend_player_relation::CopyFrom(const friend_player_relation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool friend_player_relation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void friend_player_relation::Swap(friend_player_relation* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    apply_list_.Swap(&other->apply_list_);
    black_list_.Swap(&other->black_list_);
    friend_list_.Swap(&other->friend_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata friend_player_relation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = friend_player_relation_descriptor_;
  metadata.reflection = friend_player_relation_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Entity

// @@protoc_insertion_point(global_scope)

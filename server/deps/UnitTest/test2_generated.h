// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_TEST2_H_
#define FLATBUFFERS_GENERATED_TEST2_H_

#include "flatbuffers/flatbuffers.h"



struct Vec32;
struct Monster2;

enum Color2 {
  Color2_Red = 0,
  Color2_Green = 1,
  Color2_Blue = 2
};

inline const char **EnumNamesColor2() {
  static const char *names[] = { "Red", "Green", "Blue", nullptr };
  return names;
}

inline const char *EnumNameColor2(Color2 e) { return EnumNamesColor2()[static_cast<int>(e)]; }

enum Any2 {
  Any2_NONE = 0,
  Any2_Monster2 = 1
};

inline const char **EnumNamesAny2() {
  static const char *names[] = { "NONE", "Monster2", nullptr };
  return names;
}

inline const char *EnumNameAny2(Any2 e) { return EnumNamesAny2()[static_cast<int>(e)]; }

inline bool VerifyAny2(flatbuffers::Verifier &verifier, const void *union_obj, Any2 type);

struct Vec32 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  float x() const { return GetField<float>(4, 0); }
  float y() const { return GetField<float>(6, 0); }
  float z() const { return GetField<float>(8, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, 4 /* x */) &&
           VerifyField<float>(verifier, 6 /* y */) &&
           VerifyField<float>(verifier, 8 /* z */) &&
           verifier.EndTable();
  }
};

struct Vec32Builder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(float x) { fbb_.AddElement<float>(4, x, 0); }
  void add_y(float y) { fbb_.AddElement<float>(6, y, 0); }
  void add_z(float z) { fbb_.AddElement<float>(8, z, 0); }
  Vec32Builder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  Vec32Builder &operator=(const Vec32Builder &);
  flatbuffers::Offset<Vec32> Finish() {
    auto o = flatbuffers::Offset<Vec32>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<Vec32> CreateVec32(flatbuffers::FlatBufferBuilder &_fbb,
   float x = 0,
   float y = 0,
   float z = 0) {
  Vec32Builder builder_(_fbb);
  builder_.add_z(z);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

struct Monster2 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const Vec32 *pos() const { return GetPointer<const Vec32 *>(4); }
  int16_t mana() const { return GetField<int16_t>(6, 150); }
  int16_t hp() const { return GetField<int16_t>(8, 100); }
  int64_t x1() const { return GetField<int64_t>(10, 0); }
  double x2() const { return GetField<double>(12, 0); }
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(14); }
  const flatbuffers::Vector<uint8_t> *inventory() const { return GetPointer<const flatbuffers::Vector<uint8_t> *>(18); }
  Color2 color() const { return static_cast<Color2>(GetField<int8_t>(20, 2)); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* pos */) &&
           verifier.VerifyTable(pos()) &&
           VerifyField<int16_t>(verifier, 6 /* mana */) &&
           VerifyField<int16_t>(verifier, 8 /* hp */) &&
           VerifyField<int64_t>(verifier, 10 /* x1 */) &&
           VerifyField<double>(verifier, 12 /* x2 */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 14 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 18 /* inventory */) &&
           verifier.Verify(inventory()) &&
           VerifyField<int8_t>(verifier, 20 /* color */) &&
           verifier.EndTable();
  }
};

struct Monster2Builder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pos(flatbuffers::Offset<Vec32> pos) { fbb_.AddOffset(4, pos); }
  void add_mana(int16_t mana) { fbb_.AddElement<int16_t>(6, mana, 150); }
  void add_hp(int16_t hp) { fbb_.AddElement<int16_t>(8, hp, 100); }
  void add_x1(int64_t x1) { fbb_.AddElement<int64_t>(10, x1, 0); }
  void add_x2(double x2) { fbb_.AddElement<double>(12, x2, 0); }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(14, name); }
  void add_inventory(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> inventory) { fbb_.AddOffset(18, inventory); }
  void add_color(Color2 color) { fbb_.AddElement<int8_t>(20, static_cast<int8_t>(color), 2); }
  Monster2Builder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  Monster2Builder &operator=(const Monster2Builder &);
  flatbuffers::Offset<Monster2> Finish() {
    auto o = flatbuffers::Offset<Monster2>(fbb_.EndTable(start_, 9));
    return o;
  }
};

inline flatbuffers::Offset<Monster2> CreateMonster2(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<Vec32> pos = 0,
   int16_t mana = 150,
   int16_t hp = 100,
   int64_t x1 = 0,
   double x2 = 0,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   flatbuffers::Offset<flatbuffers::Vector<uint8_t>> inventory = 0,
   Color2 color = Color2_Blue) {
  Monster2Builder builder_(_fbb);
  builder_.add_x2(x2);
  builder_.add_x1(x1);
  builder_.add_inventory(inventory);
  builder_.add_name(name);
  builder_.add_pos(pos);
  builder_.add_hp(hp);
  builder_.add_mana(mana);
  builder_.add_color(color);
  return builder_.Finish();
}

inline bool VerifyAny2(flatbuffers::Verifier &verifier, const void *union_obj, Any2 type) {
  switch (type) {
    case Any2_NONE: return true;
    case Any2_Monster2: return verifier.VerifyTable(reinterpret_cast<const Monster2 *>(union_obj));
    default: return false;
  }
}

inline const Monster2 *GetMonster2(const void *buf) { return flatbuffers::GetRoot<Monster2>(buf); }

inline bool VerifyMonster2Buffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<Monster2>(); }

inline void FinishMonster2Buffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<Monster2> root) { fbb.Finish(root); }


#endif  // FLATBUFFERS_GENERATED_TEST2_H_

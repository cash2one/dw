// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_LOBBY_MOBAGO_FLATBUFFER_H_
#define FLATBUFFERS_GENERATED_LOBBY_MOBAGO_FLATBUFFER_H_

#include "flatbuffers/flatbuffers.h"


namespace MobaGo {
namespace FlatBuffer {

struct MsgPing;
struct MsgLobbyKeepAliveReq;
struct MsgLobbyJoinGameReq;
struct MsgLobbyJoinGameAck;
struct MsgGamePlayerInfo;
struct MsgLobbyGameStartAck;
struct MsgCombatPlayerReadyReq;
struct MsgCombatPlayerReadyAck;
struct MsgCombatBattleStartAck;
struct MsgLoadingProcessReport;
struct MsgLoadingProcessNotify;

struct MsgPing FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t client_start_time() const { return GetField<uint64_t>(4, 0); }
  uint64_t gate_recv_time() const { return GetField<uint64_t>(6, 0); }
  uint64_t server_recv_time() const { return GetField<uint64_t>(8, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* client_start_time */) &&
           VerifyField<uint64_t>(verifier, 6 /* gate_recv_time */) &&
           VerifyField<uint64_t>(verifier, 8 /* server_recv_time */) &&
           verifier.EndTable();
  }
};

struct MsgPingBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_client_start_time(uint64_t client_start_time) { fbb_.AddElement<uint64_t>(4, client_start_time, 0); }
  void add_gate_recv_time(uint64_t gate_recv_time) { fbb_.AddElement<uint64_t>(6, gate_recv_time, 0); }
  void add_server_recv_time(uint64_t server_recv_time) { fbb_.AddElement<uint64_t>(8, server_recv_time, 0); }
  MsgPingBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgPingBuilder &operator=(const MsgPingBuilder &);
  flatbuffers::Offset<MsgPing> Finish() {
    auto o = flatbuffers::Offset<MsgPing>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<MsgPing> CreateMsgPing(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t client_start_time = 0,
   uint64_t gate_recv_time = 0,
   uint64_t server_recv_time = 0) {
  MsgPingBuilder builder_(_fbb);
  builder_.add_server_recv_time(server_recv_time);
  builder_.add_gate_recv_time(gate_recv_time);
  builder_.add_client_start_time(client_start_time);
  return builder_.Finish();
}

struct MsgLobbyKeepAliveReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint32_t uReserved() const { return GetField<uint32_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, 4 /* uReserved */) &&
           verifier.EndTable();
  }
};

struct MsgLobbyKeepAliveReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uReserved(uint32_t uReserved) { fbb_.AddElement<uint32_t>(4, uReserved, 0); }
  MsgLobbyKeepAliveReqBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgLobbyKeepAliveReqBuilder &operator=(const MsgLobbyKeepAliveReqBuilder &);
  flatbuffers::Offset<MsgLobbyKeepAliveReq> Finish() {
    auto o = flatbuffers::Offset<MsgLobbyKeepAliveReq>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgLobbyKeepAliveReq> CreateMsgLobbyKeepAliveReq(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t uReserved = 0) {
  MsgLobbyKeepAliveReqBuilder builder_(_fbb);
  builder_.add_uReserved(uReserved);
  return builder_.Finish();
}

struct MsgLobbyJoinGameReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *sUserName() const { return GetPointer<const flatbuffers::String *>(4); }
  uint32_t uHeroSkinId() const { return GetField<uint32_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* sUserName */) &&
           verifier.Verify(sUserName()) &&
           VerifyField<uint32_t>(verifier, 6 /* uHeroSkinId */) &&
           verifier.EndTable();
  }
};

struct MsgLobbyJoinGameReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sUserName(flatbuffers::Offset<flatbuffers::String> sUserName) { fbb_.AddOffset(4, sUserName); }
  void add_uHeroSkinId(uint32_t uHeroSkinId) { fbb_.AddElement<uint32_t>(6, uHeroSkinId, 0); }
  MsgLobbyJoinGameReqBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgLobbyJoinGameReqBuilder &operator=(const MsgLobbyJoinGameReqBuilder &);
  flatbuffers::Offset<MsgLobbyJoinGameReq> Finish() {
    auto o = flatbuffers::Offset<MsgLobbyJoinGameReq>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<MsgLobbyJoinGameReq> CreateMsgLobbyJoinGameReq(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> sUserName = 0,
   uint32_t uHeroSkinId = 0) {
  MsgLobbyJoinGameReqBuilder builder_(_fbb);
  builder_.add_uHeroSkinId(uHeroSkinId);
  builder_.add_sUserName(sUserName);
  return builder_.Finish();
}

struct MsgLobbyJoinGameAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint8_t bytIsSuccess() const { return GetField<uint8_t>(4, 0); }
  uint64_t uPlayerUid() const { return GetField<uint64_t>(6, 0); }
  uint8_t bytCamp() const { return GetField<uint8_t>(8, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* bytIsSuccess */) &&
           VerifyField<uint64_t>(verifier, 6 /* uPlayerUid */) &&
           VerifyField<uint8_t>(verifier, 8 /* bytCamp */) &&
           verifier.EndTable();
  }
};

struct MsgLobbyJoinGameAckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_bytIsSuccess(uint8_t bytIsSuccess) { fbb_.AddElement<uint8_t>(4, bytIsSuccess, 0); }
  void add_uPlayerUid(uint64_t uPlayerUid) { fbb_.AddElement<uint64_t>(6, uPlayerUid, 0); }
  void add_bytCamp(uint8_t bytCamp) { fbb_.AddElement<uint8_t>(8, bytCamp, 0); }
  MsgLobbyJoinGameAckBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgLobbyJoinGameAckBuilder &operator=(const MsgLobbyJoinGameAckBuilder &);
  flatbuffers::Offset<MsgLobbyJoinGameAck> Finish() {
    auto o = flatbuffers::Offset<MsgLobbyJoinGameAck>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<MsgLobbyJoinGameAck> CreateMsgLobbyJoinGameAck(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t bytIsSuccess = 0,
   uint64_t uPlayerUid = 0,
   uint8_t bytCamp = 0) {
  MsgLobbyJoinGameAckBuilder builder_(_fbb);
  builder_.add_uPlayerUid(uPlayerUid);
  builder_.add_bytCamp(bytCamp);
  builder_.add_bytIsSuccess(bytIsSuccess);
  return builder_.Finish();
}

struct MsgGamePlayerInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t uPlayerUid() const { return GetField<uint64_t>(4, 0); }
  uint32_t uHeroSkinId() const { return GetField<uint32_t>(6, 0); }
  uint8_t bytCamp() const { return GetField<uint8_t>(8, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* uPlayerUid */) &&
           VerifyField<uint32_t>(verifier, 6 /* uHeroSkinId */) &&
           VerifyField<uint8_t>(verifier, 8 /* bytCamp */) &&
           verifier.EndTable();
  }
};

struct MsgGamePlayerInfoBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uPlayerUid(uint64_t uPlayerUid) { fbb_.AddElement<uint64_t>(4, uPlayerUid, 0); }
  void add_uHeroSkinId(uint32_t uHeroSkinId) { fbb_.AddElement<uint32_t>(6, uHeroSkinId, 0); }
  void add_bytCamp(uint8_t bytCamp) { fbb_.AddElement<uint8_t>(8, bytCamp, 0); }
  MsgGamePlayerInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgGamePlayerInfoBuilder &operator=(const MsgGamePlayerInfoBuilder &);
  flatbuffers::Offset<MsgGamePlayerInfo> Finish() {
    auto o = flatbuffers::Offset<MsgGamePlayerInfo>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<MsgGamePlayerInfo> CreateMsgGamePlayerInfo(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t uPlayerUid = 0,
   uint32_t uHeroSkinId = 0,
   uint8_t bytCamp = 0) {
  MsgGamePlayerInfoBuilder builder_(_fbb);
  builder_.add_uPlayerUid(uPlayerUid);
  builder_.add_uHeroSkinId(uHeroSkinId);
  builder_.add_bytCamp(bytCamp);
  return builder_.Finish();
}

struct MsgLobbyGameStartAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint16_t usCountdown() const { return GetField<uint16_t>(4, 0); }
  const flatbuffers::Vector<flatbuffers::Offset<MsgGamePlayerInfo>> *oPlayerList() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<MsgGamePlayerInfo>> *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, 4 /* usCountdown */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* oPlayerList */) &&
           verifier.Verify(oPlayerList()) &&
           verifier.VerifyVectorOfTables(oPlayerList()) &&
           verifier.EndTable();
  }
};

struct MsgLobbyGameStartAckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_usCountdown(uint16_t usCountdown) { fbb_.AddElement<uint16_t>(4, usCountdown, 0); }
  void add_oPlayerList(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MsgGamePlayerInfo>>> oPlayerList) { fbb_.AddOffset(6, oPlayerList); }
  MsgLobbyGameStartAckBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgLobbyGameStartAckBuilder &operator=(const MsgLobbyGameStartAckBuilder &);
  flatbuffers::Offset<MsgLobbyGameStartAck> Finish() {
    auto o = flatbuffers::Offset<MsgLobbyGameStartAck>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<MsgLobbyGameStartAck> CreateMsgLobbyGameStartAck(flatbuffers::FlatBufferBuilder &_fbb,
   uint16_t usCountdown = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MsgGamePlayerInfo>>> oPlayerList = 0) {
  MsgLobbyGameStartAckBuilder builder_(_fbb);
  builder_.add_oPlayerList(oPlayerList);
  builder_.add_usCountdown(usCountdown);
  return builder_.Finish();
}

struct MsgCombatPlayerReadyReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t uPlayerUid() const { return GetField<uint64_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* uPlayerUid */) &&
           verifier.EndTable();
  }
};

struct MsgCombatPlayerReadyReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uPlayerUid(uint64_t uPlayerUid) { fbb_.AddElement<uint64_t>(4, uPlayerUid, 0); }
  MsgCombatPlayerReadyReqBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgCombatPlayerReadyReqBuilder &operator=(const MsgCombatPlayerReadyReqBuilder &);
  flatbuffers::Offset<MsgCombatPlayerReadyReq> Finish() {
    auto o = flatbuffers::Offset<MsgCombatPlayerReadyReq>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgCombatPlayerReadyReq> CreateMsgCombatPlayerReadyReq(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t uPlayerUid = 0) {
  MsgCombatPlayerReadyReqBuilder builder_(_fbb);
  builder_.add_uPlayerUid(uPlayerUid);
  return builder_.Finish();
}

struct MsgCombatPlayerReadyAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint8_t bytIsAlreadyRunning() const { return GetField<uint8_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* bytIsAlreadyRunning */) &&
           verifier.EndTable();
  }
};

struct MsgCombatPlayerReadyAckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_bytIsAlreadyRunning(uint8_t bytIsAlreadyRunning) { fbb_.AddElement<uint8_t>(4, bytIsAlreadyRunning, 0); }
  MsgCombatPlayerReadyAckBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgCombatPlayerReadyAckBuilder &operator=(const MsgCombatPlayerReadyAckBuilder &);
  flatbuffers::Offset<MsgCombatPlayerReadyAck> Finish() {
    auto o = flatbuffers::Offset<MsgCombatPlayerReadyAck>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgCombatPlayerReadyAck> CreateMsgCombatPlayerReadyAck(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t bytIsAlreadyRunning = 0) {
  MsgCombatPlayerReadyAckBuilder builder_(_fbb);
  builder_.add_bytIsAlreadyRunning(bytIsAlreadyRunning);
  return builder_.Finish();
}

struct MsgCombatBattleStartAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint32_t uReserved() const { return GetField<uint32_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, 4 /* uReserved */) &&
           verifier.EndTable();
  }
};

struct MsgCombatBattleStartAckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uReserved(uint32_t uReserved) { fbb_.AddElement<uint32_t>(4, uReserved, 0); }
  MsgCombatBattleStartAckBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgCombatBattleStartAckBuilder &operator=(const MsgCombatBattleStartAckBuilder &);
  flatbuffers::Offset<MsgCombatBattleStartAck> Finish() {
    auto o = flatbuffers::Offset<MsgCombatBattleStartAck>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgCombatBattleStartAck> CreateMsgCombatBattleStartAck(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t uReserved = 0) {
  MsgCombatBattleStartAckBuilder builder_(_fbb);
  builder_.add_uReserved(uReserved);
  return builder_.Finish();
}

struct MsgLoadingProcessReport FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint32_t loading_process() const { return GetField<uint32_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, 4 /* loading_process */) &&
           verifier.EndTable();
  }
};

struct MsgLoadingProcessReportBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_loading_process(uint32_t loading_process) { fbb_.AddElement<uint32_t>(4, loading_process, 0); }
  MsgLoadingProcessReportBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgLoadingProcessReportBuilder &operator=(const MsgLoadingProcessReportBuilder &);
  flatbuffers::Offset<MsgLoadingProcessReport> Finish() {
    auto o = flatbuffers::Offset<MsgLoadingProcessReport>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgLoadingProcessReport> CreateMsgLoadingProcessReport(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t loading_process = 0) {
  MsgLoadingProcessReportBuilder builder_(_fbb);
  builder_.add_loading_process(loading_process);
  return builder_.Finish();
}

struct MsgLoadingProcessNotify FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t account_id() const { return GetField<uint64_t>(4, 0); }
  uint32_t loading_process() const { return GetField<uint32_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* account_id */) &&
           VerifyField<uint32_t>(verifier, 6 /* loading_process */) &&
           verifier.EndTable();
  }
};

struct MsgLoadingProcessNotifyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_account_id(uint64_t account_id) { fbb_.AddElement<uint64_t>(4, account_id, 0); }
  void add_loading_process(uint32_t loading_process) { fbb_.AddElement<uint32_t>(6, loading_process, 0); }
  MsgLoadingProcessNotifyBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgLoadingProcessNotifyBuilder &operator=(const MsgLoadingProcessNotifyBuilder &);
  flatbuffers::Offset<MsgLoadingProcessNotify> Finish() {
    auto o = flatbuffers::Offset<MsgLoadingProcessNotify>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<MsgLoadingProcessNotify> CreateMsgLoadingProcessNotify(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t account_id = 0,
   uint32_t loading_process = 0) {
  MsgLoadingProcessNotifyBuilder builder_(_fbb);
  builder_.add_account_id(account_id);
  builder_.add_loading_process(loading_process);
  return builder_.Finish();
}

}  // namespace FlatBuffer
}  // namespace MobaGo

#endif  // FLATBUFFERS_GENERATED_LOBBY_MOBAGO_FLATBUFFER_H_

// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_MATCH_MOBAGO_FLATBUFFER_H_
#define FLATBUFFERS_GENERATED_MATCH_MOBAGO_FLATBUFFER_H_

#include "flatbuffers/flatbuffers.h"


namespace MobaGo {
namespace FlatBuffer {

struct MsgMatchReq;
struct MsgMatchAck;
struct MsgCancelMatchAck;
struct MsgMatchEnterBattle;
struct MsgReconnectBattle;

enum TeamType {
  TeamType_TT_Single = 1,
  TeamType_TT_Double = 2,
  TeamType_TT_Three = 3,
  TeamType_TT_Four = 4,
  TeamType_TT_Five = 5
};

inline const char **EnumNamesTeamType() {
  static const char *names[] = { "TT_Single", "TT_Double", "TT_Three", "TT_Four", "TT_Five", nullptr };
  return names;
}

inline const char *EnumNameTeamType(TeamType e) { return EnumNamesTeamType()[static_cast<int>(e) - static_cast<int>(TeamType_TT_Single)]; }

enum MatchType {
  MatchType_MT_Match = 1,
  MatchType_MT_OnlyRobot = 2,
  MatchType_MT_Room = 3
};

inline const char **EnumNamesMatchType() {
  static const char *names[] = { "MT_Match", "MT_OnlyRobot", "MT_Room", nullptr };
  return names;
}

inline const char *EnumNameMatchType(MatchType e) { return EnumNamesMatchType()[static_cast<int>(e) - static_cast<int>(MatchType_MT_Match)]; }

enum MatchResult {
  MatchResult_MR_Success = 1,
  MatchResult_MR_Failed = 2
};

inline const char **EnumNamesMatchResult() {
  static const char *names[] = { "MR_Success", "MR_Failed", nullptr };
  return names;
}

inline const char *EnumNameMatchResult(MatchResult e) { return EnumNamesMatchResult()[static_cast<int>(e) - static_cast<int>(MatchResult_MR_Success)]; }

enum CancelMatchResult {
  CancelMatchResult_CMR_Success = 1,
  CancelMatchResult_CMR_Failed = 2
};

inline const char **EnumNamesCancelMatchResult() {
  static const char *names[] = { "CMR_Success", "CMR_Failed", nullptr };
  return names;
}

inline const char *EnumNameCancelMatchResult(CancelMatchResult e) { return EnumNamesCancelMatchResult()[static_cast<int>(e) - static_cast<int>(CancelMatchResult_CMR_Success)]; }

struct MsgMatchReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint8_t team_type() const { return GetField<uint8_t>(4, 0); }
  uint8_t match_type() const { return GetField<uint8_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* team_type */) &&
           VerifyField<uint8_t>(verifier, 6 /* match_type */) &&
           verifier.EndTable();
  }
};

struct MsgMatchReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_team_type(uint8_t team_type) { fbb_.AddElement<uint8_t>(4, team_type, 0); }
  void add_match_type(uint8_t match_type) { fbb_.AddElement<uint8_t>(6, match_type, 0); }
  MsgMatchReqBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgMatchReqBuilder &operator=(const MsgMatchReqBuilder &);
  flatbuffers::Offset<MsgMatchReq> Finish() {
    auto o = flatbuffers::Offset<MsgMatchReq>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<MsgMatchReq> CreateMsgMatchReq(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t team_type = 0,
   uint8_t match_type = 0) {
  MsgMatchReqBuilder builder_(_fbb);
  builder_.add_match_type(match_type);
  builder_.add_team_type(team_type);
  return builder_.Finish();
}

struct MsgMatchAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint8_t match_result() const { return GetField<uint8_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* match_result */) &&
           verifier.EndTable();
  }
};

struct MsgMatchAckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_match_result(uint8_t match_result) { fbb_.AddElement<uint8_t>(4, match_result, 0); }
  MsgMatchAckBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgMatchAckBuilder &operator=(const MsgMatchAckBuilder &);
  flatbuffers::Offset<MsgMatchAck> Finish() {
    auto o = flatbuffers::Offset<MsgMatchAck>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgMatchAck> CreateMsgMatchAck(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t match_result = 0) {
  MsgMatchAckBuilder builder_(_fbb);
  builder_.add_match_result(match_result);
  return builder_.Finish();
}

struct MsgCancelMatchAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint8_t result() const { return GetField<uint8_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* result */) &&
           verifier.EndTable();
  }
};

struct MsgCancelMatchAckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_result(uint8_t result) { fbb_.AddElement<uint8_t>(4, result, 0); }
  MsgCancelMatchAckBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgCancelMatchAckBuilder &operator=(const MsgCancelMatchAckBuilder &);
  flatbuffers::Offset<MsgCancelMatchAck> Finish() {
    auto o = flatbuffers::Offset<MsgCancelMatchAck>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgCancelMatchAck> CreateMsgCancelMatchAck(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t result = 0) {
  MsgCancelMatchAckBuilder builder_(_fbb);
  builder_.add_result(result);
  return builder_.Finish();
}

struct MsgMatchEnterBattle FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *server_ip() const { return GetPointer<const flatbuffers::String *>(4); }
  int32_t server_port() const { return GetField<int32_t>(6, 0); }
  const flatbuffers::String *session_key() const { return GetPointer<const flatbuffers::String *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* server_ip */) &&
           verifier.Verify(server_ip()) &&
           VerifyField<int32_t>(verifier, 6 /* server_port */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* session_key */) &&
           verifier.Verify(session_key()) &&
           verifier.EndTable();
  }
};

struct MsgMatchEnterBattleBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_server_ip(flatbuffers::Offset<flatbuffers::String> server_ip) { fbb_.AddOffset(4, server_ip); }
  void add_server_port(int32_t server_port) { fbb_.AddElement<int32_t>(6, server_port, 0); }
  void add_session_key(flatbuffers::Offset<flatbuffers::String> session_key) { fbb_.AddOffset(8, session_key); }
  MsgMatchEnterBattleBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgMatchEnterBattleBuilder &operator=(const MsgMatchEnterBattleBuilder &);
  flatbuffers::Offset<MsgMatchEnterBattle> Finish() {
    auto o = flatbuffers::Offset<MsgMatchEnterBattle>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<MsgMatchEnterBattle> CreateMsgMatchEnterBattle(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> server_ip = 0,
   int32_t server_port = 0,
   flatbuffers::Offset<flatbuffers::String> session_key = 0) {
  MsgMatchEnterBattleBuilder builder_(_fbb);
  builder_.add_session_key(session_key);
  builder_.add_server_port(server_port);
  builder_.add_server_ip(server_ip);
  return builder_.Finish();
}

struct MsgReconnectBattle FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *server_ip() const { return GetPointer<const flatbuffers::String *>(4); }
  int32_t server_port() const { return GetField<int32_t>(6, 0); }
  const flatbuffers::String *session_key() const { return GetPointer<const flatbuffers::String *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* server_ip */) &&
           verifier.Verify(server_ip()) &&
           VerifyField<int32_t>(verifier, 6 /* server_port */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* session_key */) &&
           verifier.Verify(session_key()) &&
           verifier.EndTable();
  }
};

struct MsgReconnectBattleBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_server_ip(flatbuffers::Offset<flatbuffers::String> server_ip) { fbb_.AddOffset(4, server_ip); }
  void add_server_port(int32_t server_port) { fbb_.AddElement<int32_t>(6, server_port, 0); }
  void add_session_key(flatbuffers::Offset<flatbuffers::String> session_key) { fbb_.AddOffset(8, session_key); }
  MsgReconnectBattleBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgReconnectBattleBuilder &operator=(const MsgReconnectBattleBuilder &);
  flatbuffers::Offset<MsgReconnectBattle> Finish() {
    auto o = flatbuffers::Offset<MsgReconnectBattle>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<MsgReconnectBattle> CreateMsgReconnectBattle(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> server_ip = 0,
   int32_t server_port = 0,
   flatbuffers::Offset<flatbuffers::String> session_key = 0) {
  MsgReconnectBattleBuilder builder_(_fbb);
  builder_.add_session_key(session_key);
  builder_.add_server_port(server_port);
  builder_.add_server_ip(server_ip);
  return builder_.Finish();
}

}  // namespace FlatBuffer
}  // namespace MobaGo

#endif  // FLATBUFFERS_GENERATED_MATCH_MOBAGO_FLATBUFFER_H_

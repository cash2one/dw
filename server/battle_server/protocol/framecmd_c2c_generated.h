// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FRAMECMDC2C_MOBAGO_FLATBUFFER_H_
#define FLATBUFFERS_GENERATED_FRAMECMDC2C_MOBAGO_FLATBUFFER_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"

namespace MobaGo {
namespace FlatBuffer {
struct MsgBody;
struct IntVec3;
}  // namespace FlatBuffer
}  // namespace MobaGo

namespace MobaGo {
namespace FlatBuffer {

struct MsgCommandChangeTargetingMode;
struct MsgCommandPlayerMove;
struct MsgCommandPlayerMoveDirection;
struct MsgCommandStopMove;
struct MsgCommandAttackPosition;
struct MsgCommandAttackActor;
struct MsgCommandLearnSkill;
struct MsgCommandUseCurveTrackSkill;
struct MsgCommandUseCommonAttack;
struct MsgCommandSwitchAI;
struct MsgCommandSwitchCaptain;
struct MsgCommandSwitchSuperKiller;
struct MsgCommandSwitchGodMode;
struct MsgCommandLearnTalent;
struct MsgCommandTestCmdDelay;
struct MsgCommandPlayerRunAway;
struct MsgCommandPlayerDisconnect;
struct MsgCommandPlayerReconnect;
struct MsgCommandPlayerAttackTargetMode;
struct MsgCommandSvrNTFCheckFrameLater;
struct MsgCommandAssistStateChange;
struct MsgCommandChangeAutoAI;
struct MsgCommandPlayerBuyEquip;
struct MsgCommandPlayerSellEquip;
struct MsgCommandPlayerAddGoldCoinInBattle;
struct MsgCommandSetSkillLevel;
struct MsgCommandPlayerCommonAttackMode;
struct MsgCommandLockAttackTarget;
struct MsgCommandSignalButtonPosition;
struct MsgCommandSignalMiniMapPosition;
struct MsgCommandSignalMiniMapTarget;
struct MsgFrameCommandC2C;

struct MsgCommandChangeTargetingMode FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint8_t mode() const { return GetField<uint8_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* mode */) &&
           verifier.EndTable();
  }
};

struct MsgCommandChangeTargetingModeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_mode(uint8_t mode) { fbb_.AddElement<uint8_t>(4, mode, 0); }
  MsgCommandChangeTargetingModeBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgCommandChangeTargetingModeBuilder &operator=(const MsgCommandChangeTargetingModeBuilder &);
  flatbuffers::Offset<MsgCommandChangeTargetingMode> Finish() {
    auto o = flatbuffers::Offset<MsgCommandChangeTargetingMode>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgCommandChangeTargetingMode> CreateMsgCommandChangeTargetingMode(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t mode = 0) {
  MsgCommandChangeTargetingModeBuilder builder_(_fbb);
  builder_.add_mode(mode);
  return builder_.Finish();
}

struct MsgCommandPlayerMove FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const MobaGo::FlatBuffer::IntVec3 *vecWorldPos() const { return GetStruct<const MobaGo::FlatBuffer::IntVec3 *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<MobaGo::FlatBuffer::IntVec3>(verifier, 4 /* vecWorldPos */) &&
           verifier.EndTable();
  }
};

struct MsgCommandPlayerMoveBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_vecWorldPos(const MobaGo::FlatBuffer::IntVec3 *vecWorldPos) { fbb_.AddStruct(4, vecWorldPos); }
  MsgCommandPlayerMoveBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgCommandPlayerMoveBuilder &operator=(const MsgCommandPlayerMoveBuilder &);
  flatbuffers::Offset<MsgCommandPlayerMove> Finish() {
    auto o = flatbuffers::Offset<MsgCommandPlayerMove>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgCommandPlayerMove> CreateMsgCommandPlayerMove(flatbuffers::FlatBufferBuilder &_fbb,
   const MobaGo::FlatBuffer::IntVec3 *vecWorldPos = 0) {
  MsgCommandPlayerMoveBuilder builder_(_fbb);
  builder_.add_vecWorldPos(vecWorldPos);
  return builder_.Finish();
}

struct MsgCommandPlayerMoveDirection FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int16_t sDegree() const { return GetField<int16_t>(4, 0); }
  uint8_t bytMoveSeq() const { return GetField<uint8_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, 4 /* sDegree */) &&
           VerifyField<uint8_t>(verifier, 6 /* bytMoveSeq */) &&
           verifier.EndTable();
  }
};

struct MsgCommandPlayerMoveDirectionBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sDegree(int16_t sDegree) { fbb_.AddElement<int16_t>(4, sDegree, 0); }
  void add_bytMoveSeq(uint8_t bytMoveSeq) { fbb_.AddElement<uint8_t>(6, bytMoveSeq, 0); }
  MsgCommandPlayerMoveDirectionBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgCommandPlayerMoveDirectionBuilder &operator=(const MsgCommandPlayerMoveDirectionBuilder &);
  flatbuffers::Offset<MsgCommandPlayerMoveDirection> Finish() {
    auto o = flatbuffers::Offset<MsgCommandPlayerMoveDirection>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<MsgCommandPlayerMoveDirection> CreateMsgCommandPlayerMoveDirection(flatbuffers::FlatBufferBuilder &_fbb,
   int16_t sDegree = 0,
   uint8_t bytMoveSeq = 0) {
  MsgCommandPlayerMoveDirectionBuilder builder_(_fbb);
  builder_.add_sDegree(sDegree);
  builder_.add_bytMoveSeq(bytMoveSeq);
  return builder_.Finish();
}

struct MsgCommandStopMove FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int8_t chReserve() const { return GetField<int8_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, 4 /* chReserve */) &&
           verifier.EndTable();
  }
};

struct MsgCommandStopMoveBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_chReserve(int8_t chReserve) { fbb_.AddElement<int8_t>(4, chReserve, 0); }
  MsgCommandStopMoveBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgCommandStopMoveBuilder &operator=(const MsgCommandStopMoveBuilder &);
  flatbuffers::Offset<MsgCommandStopMove> Finish() {
    auto o = flatbuffers::Offset<MsgCommandStopMove>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgCommandStopMove> CreateMsgCommandStopMove(flatbuffers::FlatBufferBuilder &_fbb,
   int8_t chReserve = 0) {
  MsgCommandStopMoveBuilder builder_(_fbb);
  builder_.add_chReserve(chReserve);
  return builder_.Finish();
}

struct MsgCommandAttackPosition FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const MobaGo::FlatBuffer::IntVec3 *vecWorldPos() const { return GetStruct<const MobaGo::FlatBuffer::IntVec3 *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<MobaGo::FlatBuffer::IntVec3>(verifier, 4 /* vecWorldPos */) &&
           verifier.EndTable();
  }
};

struct MsgCommandAttackPositionBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_vecWorldPos(const MobaGo::FlatBuffer::IntVec3 *vecWorldPos) { fbb_.AddStruct(4, vecWorldPos); }
  MsgCommandAttackPositionBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgCommandAttackPositionBuilder &operator=(const MsgCommandAttackPositionBuilder &);
  flatbuffers::Offset<MsgCommandAttackPosition> Finish() {
    auto o = flatbuffers::Offset<MsgCommandAttackPosition>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgCommandAttackPosition> CreateMsgCommandAttackPosition(flatbuffers::FlatBufferBuilder &_fbb,
   const MobaGo::FlatBuffer::IntVec3 *vecWorldPos = 0) {
  MsgCommandAttackPositionBuilder builder_(_fbb);
  builder_.add_vecWorldPos(vecWorldPos);
  return builder_.Finish();
}

struct MsgCommandAttackActor FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint32_t uObjectId() const { return GetField<uint32_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, 4 /* uObjectId */) &&
           verifier.EndTable();
  }
};

struct MsgCommandAttackActorBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uObjectId(uint32_t uObjectId) { fbb_.AddElement<uint32_t>(4, uObjectId, 0); }
  MsgCommandAttackActorBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgCommandAttackActorBuilder &operator=(const MsgCommandAttackActorBuilder &);
  flatbuffers::Offset<MsgCommandAttackActor> Finish() {
    auto o = flatbuffers::Offset<MsgCommandAttackActor>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgCommandAttackActor> CreateMsgCommandAttackActor(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t uObjectId = 0) {
  MsgCommandAttackActorBuilder builder_(_fbb);
  builder_.add_uObjectId(uObjectId);
  return builder_.Finish();
}

struct MsgCommandLearnSkill FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint32_t uHeroId() const { return GetField<uint32_t>(4, 0); }
  uint8_t bytSlotType() const { return GetField<uint8_t>(6, 0); }
  uint8_t bytSkillLevel() const { return GetField<uint8_t>(8, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, 4 /* uHeroId */) &&
           VerifyField<uint8_t>(verifier, 6 /* bytSlotType */) &&
           VerifyField<uint8_t>(verifier, 8 /* bytSkillLevel */) &&
           verifier.EndTable();
  }
};

struct MsgCommandLearnSkillBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uHeroId(uint32_t uHeroId) { fbb_.AddElement<uint32_t>(4, uHeroId, 0); }
  void add_bytSlotType(uint8_t bytSlotType) { fbb_.AddElement<uint8_t>(6, bytSlotType, 0); }
  void add_bytSkillLevel(uint8_t bytSkillLevel) { fbb_.AddElement<uint8_t>(8, bytSkillLevel, 0); }
  MsgCommandLearnSkillBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgCommandLearnSkillBuilder &operator=(const MsgCommandLearnSkillBuilder &);
  flatbuffers::Offset<MsgCommandLearnSkill> Finish() {
    auto o = flatbuffers::Offset<MsgCommandLearnSkill>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<MsgCommandLearnSkill> CreateMsgCommandLearnSkill(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t uHeroId = 0,
   uint8_t bytSlotType = 0,
   uint8_t bytSkillLevel = 0) {
  MsgCommandLearnSkillBuilder builder_(_fbb);
  builder_.add_uHeroId(uHeroId);
  builder_.add_bytSkillLevel(bytSkillLevel);
  builder_.add_bytSlotType(bytSlotType);
  return builder_.Finish();
}

struct MsgCommandUseCurveTrackSkill FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int16_t sNoUse() const { return GetField<int16_t>(4, 0); }
  int8_t chSlotType() const { return GetField<int8_t>(6, 0); }
  uint32_t uSkillId() const { return GetField<uint32_t>(8, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, 4 /* sNoUse */) &&
           VerifyField<int8_t>(verifier, 6 /* chSlotType */) &&
           VerifyField<uint32_t>(verifier, 8 /* uSkillId */) &&
           verifier.EndTable();
  }
};

struct MsgCommandUseCurveTrackSkillBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sNoUse(int16_t sNoUse) { fbb_.AddElement<int16_t>(4, sNoUse, 0); }
  void add_chSlotType(int8_t chSlotType) { fbb_.AddElement<int8_t>(6, chSlotType, 0); }
  void add_uSkillId(uint32_t uSkillId) { fbb_.AddElement<uint32_t>(8, uSkillId, 0); }
  MsgCommandUseCurveTrackSkillBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgCommandUseCurveTrackSkillBuilder &operator=(const MsgCommandUseCurveTrackSkillBuilder &);
  flatbuffers::Offset<MsgCommandUseCurveTrackSkill> Finish() {
    auto o = flatbuffers::Offset<MsgCommandUseCurveTrackSkill>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<MsgCommandUseCurveTrackSkill> CreateMsgCommandUseCurveTrackSkill(flatbuffers::FlatBufferBuilder &_fbb,
   int16_t sNoUse = 0,
   int8_t chSlotType = 0,
   uint32_t uSkillId = 0) {
  MsgCommandUseCurveTrackSkillBuilder builder_(_fbb);
  builder_.add_uSkillId(uSkillId);
  builder_.add_sNoUse(sNoUse);
  builder_.add_chSlotType(chSlotType);
  return builder_.Finish();
}

struct MsgCommandUseCommonAttack FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int8_t chStart() const { return GetField<int8_t>(4, 0); }
  uint32_t uObjectId() const { return GetField<uint32_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, 4 /* chStart */) &&
           VerifyField<uint32_t>(verifier, 6 /* uObjectId */) &&
           verifier.EndTable();
  }
};

struct MsgCommandUseCommonAttackBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_chStart(int8_t chStart) { fbb_.AddElement<int8_t>(4, chStart, 0); }
  void add_uObjectId(uint32_t uObjectId) { fbb_.AddElement<uint32_t>(6, uObjectId, 0); }
  MsgCommandUseCommonAttackBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgCommandUseCommonAttackBuilder &operator=(const MsgCommandUseCommonAttackBuilder &);
  flatbuffers::Offset<MsgCommandUseCommonAttack> Finish() {
    auto o = flatbuffers::Offset<MsgCommandUseCommonAttack>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<MsgCommandUseCommonAttack> CreateMsgCommandUseCommonAttack(flatbuffers::FlatBufferBuilder &_fbb,
   int8_t chStart = 0,
   uint32_t uObjectId = 0) {
  MsgCommandUseCommonAttackBuilder builder_(_fbb);
  builder_.add_uObjectId(uObjectId);
  builder_.add_chStart(chStart);
  return builder_.Finish();
}

struct MsgCommandSwitchAI FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int8_t chIsAutoAI() const { return GetField<int8_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, 4 /* chIsAutoAI */) &&
           verifier.EndTable();
  }
};

struct MsgCommandSwitchAIBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_chIsAutoAI(int8_t chIsAutoAI) { fbb_.AddElement<int8_t>(4, chIsAutoAI, 0); }
  MsgCommandSwitchAIBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgCommandSwitchAIBuilder &operator=(const MsgCommandSwitchAIBuilder &);
  flatbuffers::Offset<MsgCommandSwitchAI> Finish() {
    auto o = flatbuffers::Offset<MsgCommandSwitchAI>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgCommandSwitchAI> CreateMsgCommandSwitchAI(flatbuffers::FlatBufferBuilder &_fbb,
   int8_t chIsAutoAI = 0) {
  MsgCommandSwitchAIBuilder builder_(_fbb);
  builder_.add_chIsAutoAI(chIsAutoAI);
  return builder_.Finish();
}

struct MsgCommandSwitchCaptain FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint32_t uObjectId() const { return GetField<uint32_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, 4 /* uObjectId */) &&
           verifier.EndTable();
  }
};

struct MsgCommandSwitchCaptainBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uObjectId(uint32_t uObjectId) { fbb_.AddElement<uint32_t>(4, uObjectId, 0); }
  MsgCommandSwitchCaptainBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgCommandSwitchCaptainBuilder &operator=(const MsgCommandSwitchCaptainBuilder &);
  flatbuffers::Offset<MsgCommandSwitchCaptain> Finish() {
    auto o = flatbuffers::Offset<MsgCommandSwitchCaptain>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgCommandSwitchCaptain> CreateMsgCommandSwitchCaptain(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t uObjectId = 0) {
  MsgCommandSwitchCaptainBuilder builder_(_fbb);
  builder_.add_uObjectId(uObjectId);
  return builder_.Finish();
}

struct MsgCommandSwitchSuperKiller FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int8_t chIsSuperKiller() const { return GetField<int8_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, 4 /* chIsSuperKiller */) &&
           verifier.EndTable();
  }
};

struct MsgCommandSwitchSuperKillerBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_chIsSuperKiller(int8_t chIsSuperKiller) { fbb_.AddElement<int8_t>(4, chIsSuperKiller, 0); }
  MsgCommandSwitchSuperKillerBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgCommandSwitchSuperKillerBuilder &operator=(const MsgCommandSwitchSuperKillerBuilder &);
  flatbuffers::Offset<MsgCommandSwitchSuperKiller> Finish() {
    auto o = flatbuffers::Offset<MsgCommandSwitchSuperKiller>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgCommandSwitchSuperKiller> CreateMsgCommandSwitchSuperKiller(flatbuffers::FlatBufferBuilder &_fbb,
   int8_t chIsSuperKiller = 0) {
  MsgCommandSwitchSuperKillerBuilder builder_(_fbb);
  builder_.add_chIsSuperKiller(chIsSuperKiller);
  return builder_.Finish();
}

struct MsgCommandSwitchGodMode FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int8_t chIsGodMode() const { return GetField<int8_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, 4 /* chIsGodMode */) &&
           verifier.EndTable();
  }
};

struct MsgCommandSwitchGodModeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_chIsGodMode(int8_t chIsGodMode) { fbb_.AddElement<int8_t>(4, chIsGodMode, 0); }
  MsgCommandSwitchGodModeBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgCommandSwitchGodModeBuilder &operator=(const MsgCommandSwitchGodModeBuilder &);
  flatbuffers::Offset<MsgCommandSwitchGodMode> Finish() {
    auto o = flatbuffers::Offset<MsgCommandSwitchGodMode>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgCommandSwitchGodMode> CreateMsgCommandSwitchGodMode(flatbuffers::FlatBufferBuilder &_fbb,
   int8_t chIsGodMode = 0) {
  MsgCommandSwitchGodModeBuilder builder_(_fbb);
  builder_.add_chIsGodMode(chIsGodMode);
  return builder_.Finish();
}

struct MsgCommandLearnTalent FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint32_t uHeroId() const { return GetField<uint32_t>(4, 0); }
  int8_t chTalentLevel() const { return GetField<int8_t>(6, 0); }
  uint32_t uTalentId() const { return GetField<uint32_t>(8, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, 4 /* uHeroId */) &&
           VerifyField<int8_t>(verifier, 6 /* chTalentLevel */) &&
           VerifyField<uint32_t>(verifier, 8 /* uTalentId */) &&
           verifier.EndTable();
  }
};

struct MsgCommandLearnTalentBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uHeroId(uint32_t uHeroId) { fbb_.AddElement<uint32_t>(4, uHeroId, 0); }
  void add_chTalentLevel(int8_t chTalentLevel) { fbb_.AddElement<int8_t>(6, chTalentLevel, 0); }
  void add_uTalentId(uint32_t uTalentId) { fbb_.AddElement<uint32_t>(8, uTalentId, 0); }
  MsgCommandLearnTalentBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgCommandLearnTalentBuilder &operator=(const MsgCommandLearnTalentBuilder &);
  flatbuffers::Offset<MsgCommandLearnTalent> Finish() {
    auto o = flatbuffers::Offset<MsgCommandLearnTalent>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<MsgCommandLearnTalent> CreateMsgCommandLearnTalent(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t uHeroId = 0,
   int8_t chTalentLevel = 0,
   uint32_t uTalentId = 0) {
  MsgCommandLearnTalentBuilder builder_(_fbb);
  builder_.add_uTalentId(uTalentId);
  builder_.add_uHeroId(uHeroId);
  builder_.add_chTalentLevel(chTalentLevel);
  return builder_.Finish();
}

struct MsgCommandTestCmdDelay FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint32_t uDelayMs() const { return GetField<uint32_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, 4 /* uDelayMs */) &&
           verifier.EndTable();
  }
};

struct MsgCommandTestCmdDelayBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uDelayMs(uint32_t uDelayMs) { fbb_.AddElement<uint32_t>(4, uDelayMs, 0); }
  MsgCommandTestCmdDelayBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgCommandTestCmdDelayBuilder &operator=(const MsgCommandTestCmdDelayBuilder &);
  flatbuffers::Offset<MsgCommandTestCmdDelay> Finish() {
    auto o = flatbuffers::Offset<MsgCommandTestCmdDelay>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgCommandTestCmdDelay> CreateMsgCommandTestCmdDelay(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t uDelayMs = 0) {
  MsgCommandTestCmdDelayBuilder builder_(_fbb);
  builder_.add_uDelayMs(uDelayMs);
  return builder_.Finish();
}

struct MsgCommandPlayerRunAway FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int8_t chReserve() const { return GetField<int8_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, 4 /* chReserve */) &&
           verifier.EndTable();
  }
};

struct MsgCommandPlayerRunAwayBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_chReserve(int8_t chReserve) { fbb_.AddElement<int8_t>(4, chReserve, 0); }
  MsgCommandPlayerRunAwayBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgCommandPlayerRunAwayBuilder &operator=(const MsgCommandPlayerRunAwayBuilder &);
  flatbuffers::Offset<MsgCommandPlayerRunAway> Finish() {
    auto o = flatbuffers::Offset<MsgCommandPlayerRunAway>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgCommandPlayerRunAway> CreateMsgCommandPlayerRunAway(flatbuffers::FlatBufferBuilder &_fbb,
   int8_t chReserve = 0) {
  MsgCommandPlayerRunAwayBuilder builder_(_fbb);
  builder_.add_chReserve(chReserve);
  return builder_.Finish();
}

struct MsgCommandPlayerDisconnect FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int8_t chReserve() const { return GetField<int8_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, 4 /* chReserve */) &&
           verifier.EndTable();
  }
};

struct MsgCommandPlayerDisconnectBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_chReserve(int8_t chReserve) { fbb_.AddElement<int8_t>(4, chReserve, 0); }
  MsgCommandPlayerDisconnectBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgCommandPlayerDisconnectBuilder &operator=(const MsgCommandPlayerDisconnectBuilder &);
  flatbuffers::Offset<MsgCommandPlayerDisconnect> Finish() {
    auto o = flatbuffers::Offset<MsgCommandPlayerDisconnect>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgCommandPlayerDisconnect> CreateMsgCommandPlayerDisconnect(flatbuffers::FlatBufferBuilder &_fbb,
   int8_t chReserve = 0) {
  MsgCommandPlayerDisconnectBuilder builder_(_fbb);
  builder_.add_chReserve(chReserve);
  return builder_.Finish();
}

struct MsgCommandPlayerReconnect FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int8_t chReserve() const { return GetField<int8_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, 4 /* chReserve */) &&
           verifier.EndTable();
  }
};

struct MsgCommandPlayerReconnectBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_chReserve(int8_t chReserve) { fbb_.AddElement<int8_t>(4, chReserve, 0); }
  MsgCommandPlayerReconnectBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgCommandPlayerReconnectBuilder &operator=(const MsgCommandPlayerReconnectBuilder &);
  flatbuffers::Offset<MsgCommandPlayerReconnect> Finish() {
    auto o = flatbuffers::Offset<MsgCommandPlayerReconnect>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgCommandPlayerReconnect> CreateMsgCommandPlayerReconnect(flatbuffers::FlatBufferBuilder &_fbb,
   int8_t chReserve = 0) {
  MsgCommandPlayerReconnectBuilder builder_(_fbb);
  builder_.add_chReserve(chReserve);
  return builder_.Finish();
}

struct MsgCommandPlayerAttackTargetMode FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int8_t chAttackTargetMode() const { return GetField<int8_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, 4 /* chAttackTargetMode */) &&
           verifier.EndTable();
  }
};

struct MsgCommandPlayerAttackTargetModeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_chAttackTargetMode(int8_t chAttackTargetMode) { fbb_.AddElement<int8_t>(4, chAttackTargetMode, 0); }
  MsgCommandPlayerAttackTargetModeBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgCommandPlayerAttackTargetModeBuilder &operator=(const MsgCommandPlayerAttackTargetModeBuilder &);
  flatbuffers::Offset<MsgCommandPlayerAttackTargetMode> Finish() {
    auto o = flatbuffers::Offset<MsgCommandPlayerAttackTargetMode>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgCommandPlayerAttackTargetMode> CreateMsgCommandPlayerAttackTargetMode(flatbuffers::FlatBufferBuilder &_fbb,
   int8_t chAttackTargetMode = 0) {
  MsgCommandPlayerAttackTargetModeBuilder builder_(_fbb);
  builder_.add_chAttackTargetMode(chAttackTargetMode);
  return builder_.Finish();
}

struct MsgCommandSvrNTFCheckFrameLater FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint8_t bytFrameLaterNum() const { return GetField<uint8_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* bytFrameLaterNum */) &&
           verifier.EndTable();
  }
};

struct MsgCommandSvrNTFCheckFrameLaterBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_bytFrameLaterNum(uint8_t bytFrameLaterNum) { fbb_.AddElement<uint8_t>(4, bytFrameLaterNum, 0); }
  MsgCommandSvrNTFCheckFrameLaterBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgCommandSvrNTFCheckFrameLaterBuilder &operator=(const MsgCommandSvrNTFCheckFrameLaterBuilder &);
  flatbuffers::Offset<MsgCommandSvrNTFCheckFrameLater> Finish() {
    auto o = flatbuffers::Offset<MsgCommandSvrNTFCheckFrameLater>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgCommandSvrNTFCheckFrameLater> CreateMsgCommandSvrNTFCheckFrameLater(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t bytFrameLaterNum = 0) {
  MsgCommandSvrNTFCheckFrameLaterBuilder builder_(_fbb);
  builder_.add_bytFrameLaterNum(bytFrameLaterNum);
  return builder_.Finish();
}

struct MsgCommandAssistStateChange FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int8_t bytChgType() const { return GetField<int8_t>(4, 0); }
  uint32_t uAiPlayerObjID() const { return GetField<uint32_t>(6, 0); }
  uint32_t uMasterObjectID() const { return GetField<uint32_t>(8, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, 4 /* bytChgType */) &&
           VerifyField<uint32_t>(verifier, 6 /* uAiPlayerObjID */) &&
           VerifyField<uint32_t>(verifier, 8 /* uMasterObjectID */) &&
           verifier.EndTable();
  }
};

struct MsgCommandAssistStateChangeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_bytChgType(int8_t bytChgType) { fbb_.AddElement<int8_t>(4, bytChgType, 0); }
  void add_uAiPlayerObjID(uint32_t uAiPlayerObjID) { fbb_.AddElement<uint32_t>(6, uAiPlayerObjID, 0); }
  void add_uMasterObjectID(uint32_t uMasterObjectID) { fbb_.AddElement<uint32_t>(8, uMasterObjectID, 0); }
  MsgCommandAssistStateChangeBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgCommandAssistStateChangeBuilder &operator=(const MsgCommandAssistStateChangeBuilder &);
  flatbuffers::Offset<MsgCommandAssistStateChange> Finish() {
    auto o = flatbuffers::Offset<MsgCommandAssistStateChange>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<MsgCommandAssistStateChange> CreateMsgCommandAssistStateChange(flatbuffers::FlatBufferBuilder &_fbb,
   int8_t bytChgType = 0,
   uint32_t uAiPlayerObjID = 0,
   uint32_t uMasterObjectID = 0) {
  MsgCommandAssistStateChangeBuilder builder_(_fbb);
  builder_.add_uMasterObjectID(uMasterObjectID);
  builder_.add_uAiPlayerObjID(uAiPlayerObjID);
  builder_.add_bytChgType(bytChgType);
  return builder_.Finish();
}

struct MsgCommandChangeAutoAI FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint8_t bytAutoAIType() const { return GetField<uint8_t>(4, 0); }
  uint32_t uPlayerObjectId() const { return GetField<uint32_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* bytAutoAIType */) &&
           VerifyField<uint32_t>(verifier, 6 /* uPlayerObjectId */) &&
           verifier.EndTable();
  }
};

struct MsgCommandChangeAutoAIBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_bytAutoAIType(uint8_t bytAutoAIType) { fbb_.AddElement<uint8_t>(4, bytAutoAIType, 0); }
  void add_uPlayerObjectId(uint32_t uPlayerObjectId) { fbb_.AddElement<uint32_t>(6, uPlayerObjectId, 0); }
  MsgCommandChangeAutoAIBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgCommandChangeAutoAIBuilder &operator=(const MsgCommandChangeAutoAIBuilder &);
  flatbuffers::Offset<MsgCommandChangeAutoAI> Finish() {
    auto o = flatbuffers::Offset<MsgCommandChangeAutoAI>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<MsgCommandChangeAutoAI> CreateMsgCommandChangeAutoAI(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t bytAutoAIType = 0,
   uint32_t uPlayerObjectId = 0) {
  MsgCommandChangeAutoAIBuilder builder_(_fbb);
  builder_.add_uPlayerObjectId(uPlayerObjectId);
  builder_.add_bytAutoAIType(bytAutoAIType);
  return builder_.Finish();
}

struct MsgCommandPlayerBuyEquip FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint16_t usEquipId() const { return GetField<uint16_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, 4 /* usEquipId */) &&
           verifier.EndTable();
  }
};

struct MsgCommandPlayerBuyEquipBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_usEquipId(uint16_t usEquipId) { fbb_.AddElement<uint16_t>(4, usEquipId, 0); }
  MsgCommandPlayerBuyEquipBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgCommandPlayerBuyEquipBuilder &operator=(const MsgCommandPlayerBuyEquipBuilder &);
  flatbuffers::Offset<MsgCommandPlayerBuyEquip> Finish() {
    auto o = flatbuffers::Offset<MsgCommandPlayerBuyEquip>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgCommandPlayerBuyEquip> CreateMsgCommandPlayerBuyEquip(flatbuffers::FlatBufferBuilder &_fbb,
   uint16_t usEquipId = 0) {
  MsgCommandPlayerBuyEquipBuilder builder_(_fbb);
  builder_.add_usEquipId(usEquipId);
  return builder_.Finish();
}

struct MsgCommandPlayerSellEquip FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint8_t bytEquipIndex() const { return GetField<uint8_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* bytEquipIndex */) &&
           verifier.EndTable();
  }
};

struct MsgCommandPlayerSellEquipBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_bytEquipIndex(uint8_t bytEquipIndex) { fbb_.AddElement<uint8_t>(4, bytEquipIndex, 0); }
  MsgCommandPlayerSellEquipBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgCommandPlayerSellEquipBuilder &operator=(const MsgCommandPlayerSellEquipBuilder &);
  flatbuffers::Offset<MsgCommandPlayerSellEquip> Finish() {
    auto o = flatbuffers::Offset<MsgCommandPlayerSellEquip>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgCommandPlayerSellEquip> CreateMsgCommandPlayerSellEquip(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t bytEquipIndex = 0) {
  MsgCommandPlayerSellEquipBuilder builder_(_fbb);
  builder_.add_bytEquipIndex(bytEquipIndex);
  return builder_.Finish();
}

struct MsgCommandPlayerAddGoldCoinInBattle FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint32_t uAddedValue() const { return GetField<uint32_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, 4 /* uAddedValue */) &&
           verifier.EndTable();
  }
};

struct MsgCommandPlayerAddGoldCoinInBattleBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uAddedValue(uint32_t uAddedValue) { fbb_.AddElement<uint32_t>(4, uAddedValue, 0); }
  MsgCommandPlayerAddGoldCoinInBattleBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgCommandPlayerAddGoldCoinInBattleBuilder &operator=(const MsgCommandPlayerAddGoldCoinInBattleBuilder &);
  flatbuffers::Offset<MsgCommandPlayerAddGoldCoinInBattle> Finish() {
    auto o = flatbuffers::Offset<MsgCommandPlayerAddGoldCoinInBattle>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgCommandPlayerAddGoldCoinInBattle> CreateMsgCommandPlayerAddGoldCoinInBattle(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t uAddedValue = 0) {
  MsgCommandPlayerAddGoldCoinInBattleBuilder builder_(_fbb);
  builder_.add_uAddedValue(uAddedValue);
  return builder_.Finish();
}

struct MsgCommandSetSkillLevel FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint8_t bytSkillSlot() const { return GetField<uint8_t>(4, 0); }
  uint8_t bytSkillLevel() const { return GetField<uint8_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* bytSkillSlot */) &&
           VerifyField<uint8_t>(verifier, 6 /* bytSkillLevel */) &&
           verifier.EndTable();
  }
};

struct MsgCommandSetSkillLevelBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_bytSkillSlot(uint8_t bytSkillSlot) { fbb_.AddElement<uint8_t>(4, bytSkillSlot, 0); }
  void add_bytSkillLevel(uint8_t bytSkillLevel) { fbb_.AddElement<uint8_t>(6, bytSkillLevel, 0); }
  MsgCommandSetSkillLevelBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgCommandSetSkillLevelBuilder &operator=(const MsgCommandSetSkillLevelBuilder &);
  flatbuffers::Offset<MsgCommandSetSkillLevel> Finish() {
    auto o = flatbuffers::Offset<MsgCommandSetSkillLevel>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<MsgCommandSetSkillLevel> CreateMsgCommandSetSkillLevel(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t bytSkillSlot = 0,
   uint8_t bytSkillLevel = 0) {
  MsgCommandSetSkillLevelBuilder builder_(_fbb);
  builder_.add_bytSkillLevel(bytSkillLevel);
  builder_.add_bytSkillSlot(bytSkillSlot);
  return builder_.Finish();
}

struct MsgCommandPlayerCommonAttackMode FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint8_t bytCommonAttackMode() const { return GetField<uint8_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* bytCommonAttackMode */) &&
           verifier.EndTable();
  }
};

struct MsgCommandPlayerCommonAttackModeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_bytCommonAttackMode(uint8_t bytCommonAttackMode) { fbb_.AddElement<uint8_t>(4, bytCommonAttackMode, 0); }
  MsgCommandPlayerCommonAttackModeBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgCommandPlayerCommonAttackModeBuilder &operator=(const MsgCommandPlayerCommonAttackModeBuilder &);
  flatbuffers::Offset<MsgCommandPlayerCommonAttackMode> Finish() {
    auto o = flatbuffers::Offset<MsgCommandPlayerCommonAttackMode>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgCommandPlayerCommonAttackMode> CreateMsgCommandPlayerCommonAttackMode(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t bytCommonAttackMode = 0) {
  MsgCommandPlayerCommonAttackModeBuilder builder_(_fbb);
  builder_.add_bytCommonAttackMode(bytCommonAttackMode);
  return builder_.Finish();
}

struct MsgCommandLockAttackTarget FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint32_t uLockedTargetId() const { return GetField<uint32_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, 4 /* uLockedTargetId */) &&
           verifier.EndTable();
  }
};

struct MsgCommandLockAttackTargetBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uLockedTargetId(uint32_t uLockedTargetId) { fbb_.AddElement<uint32_t>(4, uLockedTargetId, 0); }
  MsgCommandLockAttackTargetBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgCommandLockAttackTargetBuilder &operator=(const MsgCommandLockAttackTargetBuilder &);
  flatbuffers::Offset<MsgCommandLockAttackTarget> Finish() {
    auto o = flatbuffers::Offset<MsgCommandLockAttackTarget>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgCommandLockAttackTarget> CreateMsgCommandLockAttackTarget(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t uLockedTargetId = 0) {
  MsgCommandLockAttackTargetBuilder builder_(_fbb);
  builder_.add_uLockedTargetId(uLockedTargetId);
  return builder_.Finish();
}

struct MsgCommandSignalButtonPosition FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint8_t bytSignalId() const { return GetField<uint8_t>(4, 0); }
  const MobaGo::FlatBuffer::IntVec3 *vecWorldPos() const { return GetStruct<const MobaGo::FlatBuffer::IntVec3 *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* bytSignalId */) &&
           VerifyField<MobaGo::FlatBuffer::IntVec3>(verifier, 6 /* vecWorldPos */) &&
           verifier.EndTable();
  }
};

struct MsgCommandSignalButtonPositionBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_bytSignalId(uint8_t bytSignalId) { fbb_.AddElement<uint8_t>(4, bytSignalId, 0); }
  void add_vecWorldPos(const MobaGo::FlatBuffer::IntVec3 *vecWorldPos) { fbb_.AddStruct(6, vecWorldPos); }
  MsgCommandSignalButtonPositionBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgCommandSignalButtonPositionBuilder &operator=(const MsgCommandSignalButtonPositionBuilder &);
  flatbuffers::Offset<MsgCommandSignalButtonPosition> Finish() {
    auto o = flatbuffers::Offset<MsgCommandSignalButtonPosition>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<MsgCommandSignalButtonPosition> CreateMsgCommandSignalButtonPosition(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t bytSignalId = 0,
   const MobaGo::FlatBuffer::IntVec3 *vecWorldPos = 0) {
  MsgCommandSignalButtonPositionBuilder builder_(_fbb);
  builder_.add_vecWorldPos(vecWorldPos);
  builder_.add_bytSignalId(bytSignalId);
  return builder_.Finish();
}

struct MsgCommandSignalMiniMapPosition FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint8_t bytSignalId() const { return GetField<uint8_t>(4, 0); }
  const MobaGo::FlatBuffer::IntVec3 *vecWorldPos() const { return GetStruct<const MobaGo::FlatBuffer::IntVec3 *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* bytSignalId */) &&
           VerifyField<MobaGo::FlatBuffer::IntVec3>(verifier, 6 /* vecWorldPos */) &&
           verifier.EndTable();
  }
};

struct MsgCommandSignalMiniMapPositionBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_bytSignalId(uint8_t bytSignalId) { fbb_.AddElement<uint8_t>(4, bytSignalId, 0); }
  void add_vecWorldPos(const MobaGo::FlatBuffer::IntVec3 *vecWorldPos) { fbb_.AddStruct(6, vecWorldPos); }
  MsgCommandSignalMiniMapPositionBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgCommandSignalMiniMapPositionBuilder &operator=(const MsgCommandSignalMiniMapPositionBuilder &);
  flatbuffers::Offset<MsgCommandSignalMiniMapPosition> Finish() {
    auto o = flatbuffers::Offset<MsgCommandSignalMiniMapPosition>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<MsgCommandSignalMiniMapPosition> CreateMsgCommandSignalMiniMapPosition(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t bytSignalId = 0,
   const MobaGo::FlatBuffer::IntVec3 *vecWorldPos = 0) {
  MsgCommandSignalMiniMapPositionBuilder builder_(_fbb);
  builder_.add_vecWorldPos(vecWorldPos);
  builder_.add_bytSignalId(bytSignalId);
  return builder_.Finish();
}

struct MsgCommandSignalMiniMapTarget FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint8_t bytSignalId() const { return GetField<uint8_t>(4, 0); }
  uint8_t bytType() const { return GetField<uint8_t>(6, 0); }
  uint32_t uTargetObjectId() const { return GetField<uint32_t>(8, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* bytSignalId */) &&
           VerifyField<uint8_t>(verifier, 6 /* bytType */) &&
           VerifyField<uint32_t>(verifier, 8 /* uTargetObjectId */) &&
           verifier.EndTable();
  }
};

struct MsgCommandSignalMiniMapTargetBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_bytSignalId(uint8_t bytSignalId) { fbb_.AddElement<uint8_t>(4, bytSignalId, 0); }
  void add_bytType(uint8_t bytType) { fbb_.AddElement<uint8_t>(6, bytType, 0); }
  void add_uTargetObjectId(uint32_t uTargetObjectId) { fbb_.AddElement<uint32_t>(8, uTargetObjectId, 0); }
  MsgCommandSignalMiniMapTargetBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgCommandSignalMiniMapTargetBuilder &operator=(const MsgCommandSignalMiniMapTargetBuilder &);
  flatbuffers::Offset<MsgCommandSignalMiniMapTarget> Finish() {
    auto o = flatbuffers::Offset<MsgCommandSignalMiniMapTarget>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<MsgCommandSignalMiniMapTarget> CreateMsgCommandSignalMiniMapTarget(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t bytSignalId = 0,
   uint8_t bytType = 0,
   uint32_t uTargetObjectId = 0) {
  MsgCommandSignalMiniMapTargetBuilder builder_(_fbb);
  builder_.add_uTargetObjectId(uTargetObjectId);
  builder_.add_bytType(bytType);
  builder_.add_bytSignalId(bytSignalId);
  return builder_.Finish();
}

struct MsgFrameCommandC2C FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t uObjectId() const { return GetField<uint64_t>(4, 0); }
  uint8_t bytCmdType() const { return GetField<uint8_t>(6, 0); }
  const flatbuffers::Vector<uint8_t> *aData() const { return GetPointer<const flatbuffers::Vector<uint8_t> *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* uObjectId */) &&
           VerifyField<uint8_t>(verifier, 6 /* bytCmdType */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* aData */) &&
           verifier.Verify(aData()) &&
           verifier.EndTable();
  }
};

struct MsgFrameCommandC2CBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uObjectId(uint64_t uObjectId) { fbb_.AddElement<uint64_t>(4, uObjectId, 0); }
  void add_bytCmdType(uint8_t bytCmdType) { fbb_.AddElement<uint8_t>(6, bytCmdType, 0); }
  void add_aData(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> aData) { fbb_.AddOffset(8, aData); }
  MsgFrameCommandC2CBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgFrameCommandC2CBuilder &operator=(const MsgFrameCommandC2CBuilder &);
  flatbuffers::Offset<MsgFrameCommandC2C> Finish() {
    auto o = flatbuffers::Offset<MsgFrameCommandC2C>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<MsgFrameCommandC2C> CreateMsgFrameCommandC2C(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t uObjectId = 0,
   uint8_t bytCmdType = 0,
   flatbuffers::Offset<flatbuffers::Vector<uint8_t>> aData = 0) {
  MsgFrameCommandC2CBuilder builder_(_fbb);
  builder_.add_uObjectId(uObjectId);
  builder_.add_aData(aData);
  builder_.add_bytCmdType(bytCmdType);
  return builder_.Finish();
}

}  // namespace FlatBuffer
}  // namespace MobaGo

#endif  // FLATBUFFERS_GENERATED_FRAMECMDC2C_MOBAGO_FLATBUFFER_H_

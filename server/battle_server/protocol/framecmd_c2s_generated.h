// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FRAMECMDC2S_MOBAGO_FLATBUFFER_H_
#define FLATBUFFERS_GENERATED_FRAMECMDC2S_MOBAGO_FLATBUFFER_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"

namespace MobaGo {
namespace FlatBuffer {
struct MsgBody;
struct IntVec3;
}  // namespace FlatBuffer
}  // namespace MobaGo

namespace MobaGo {
namespace FlatBuffer {

struct MsgCommandUseObjectiveSkill;
struct MsgCommandUseDirectionalSkill;
struct MsgCommandUsePositionSkill;
struct MsgFrameCommandC2S;

struct MsgCommandUseObjectiveSkill FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint32_t uObjectId() const { return GetField<uint32_t>(4, 0); }
  int8_t chSlotType() const { return GetField<int8_t>(6, 0); }
  uint32_t uSkillId() const { return GetField<uint32_t>(8, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, 4 /* uObjectId */) &&
           VerifyField<int8_t>(verifier, 6 /* chSlotType */) &&
           VerifyField<uint32_t>(verifier, 8 /* uSkillId */) &&
           verifier.EndTable();
  }
};

struct MsgCommandUseObjectiveSkillBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uObjectId(uint32_t uObjectId) { fbb_.AddElement<uint32_t>(4, uObjectId, 0); }
  void add_chSlotType(int8_t chSlotType) { fbb_.AddElement<int8_t>(6, chSlotType, 0); }
  void add_uSkillId(uint32_t uSkillId) { fbb_.AddElement<uint32_t>(8, uSkillId, 0); }
  MsgCommandUseObjectiveSkillBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgCommandUseObjectiveSkillBuilder &operator=(const MsgCommandUseObjectiveSkillBuilder &);
  flatbuffers::Offset<MsgCommandUseObjectiveSkill> Finish() {
    auto o = flatbuffers::Offset<MsgCommandUseObjectiveSkill>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<MsgCommandUseObjectiveSkill> CreateMsgCommandUseObjectiveSkill(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t uObjectId = 0,
   int8_t chSlotType = 0,
   uint32_t uSkillId = 0) {
  MsgCommandUseObjectiveSkillBuilder builder_(_fbb);
  builder_.add_uSkillId(uSkillId);
  builder_.add_uObjectId(uObjectId);
  builder_.add_chSlotType(chSlotType);
  return builder_.Finish();
}

struct MsgCommandUseDirectionalSkill FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const MobaGo::FlatBuffer::IntVec3 *vecDir() const { return GetStruct<const MobaGo::FlatBuffer::IntVec3 *>(4); }
  int8_t chSlotType() const { return GetField<int8_t>(6, 0); }
  uint32_t uSkillId() const { return GetField<uint32_t>(8, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<MobaGo::FlatBuffer::IntVec3>(verifier, 4 /* vecDir */) &&
           VerifyField<int8_t>(verifier, 6 /* chSlotType */) &&
           VerifyField<uint32_t>(verifier, 8 /* uSkillId */) &&
           verifier.EndTable();
  }
};

struct MsgCommandUseDirectionalSkillBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_vecDir(const MobaGo::FlatBuffer::IntVec3 *vecDir) { fbb_.AddStruct(4, vecDir); }
  void add_chSlotType(int8_t chSlotType) { fbb_.AddElement<int8_t>(6, chSlotType, 0); }
  void add_uSkillId(uint32_t uSkillId) { fbb_.AddElement<uint32_t>(8, uSkillId, 0); }
  MsgCommandUseDirectionalSkillBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgCommandUseDirectionalSkillBuilder &operator=(const MsgCommandUseDirectionalSkillBuilder &);
  flatbuffers::Offset<MsgCommandUseDirectionalSkill> Finish() {
    auto o = flatbuffers::Offset<MsgCommandUseDirectionalSkill>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<MsgCommandUseDirectionalSkill> CreateMsgCommandUseDirectionalSkill(flatbuffers::FlatBufferBuilder &_fbb,
   const MobaGo::FlatBuffer::IntVec3 *vecDir = 0,
   int8_t chSlotType = 0,
   uint32_t uSkillId = 0) {
  MsgCommandUseDirectionalSkillBuilder builder_(_fbb);
  builder_.add_uSkillId(uSkillId);
  builder_.add_vecDir(vecDir);
  builder_.add_chSlotType(chSlotType);
  return builder_.Finish();
}

struct MsgCommandUsePositionSkill FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const MobaGo::FlatBuffer::IntVec3 *vecPos() const { return GetStruct<const MobaGo::FlatBuffer::IntVec3 *>(4); }
  int8_t chSlotType() const { return GetField<int8_t>(6, 0); }
  uint32_t uSkillId() const { return GetField<uint32_t>(8, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<MobaGo::FlatBuffer::IntVec3>(verifier, 4 /* vecPos */) &&
           VerifyField<int8_t>(verifier, 6 /* chSlotType */) &&
           VerifyField<uint32_t>(verifier, 8 /* uSkillId */) &&
           verifier.EndTable();
  }
};

struct MsgCommandUsePositionSkillBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_vecPos(const MobaGo::FlatBuffer::IntVec3 *vecPos) { fbb_.AddStruct(4, vecPos); }
  void add_chSlotType(int8_t chSlotType) { fbb_.AddElement<int8_t>(6, chSlotType, 0); }
  void add_uSkillId(uint32_t uSkillId) { fbb_.AddElement<uint32_t>(8, uSkillId, 0); }
  MsgCommandUsePositionSkillBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgCommandUsePositionSkillBuilder &operator=(const MsgCommandUsePositionSkillBuilder &);
  flatbuffers::Offset<MsgCommandUsePositionSkill> Finish() {
    auto o = flatbuffers::Offset<MsgCommandUsePositionSkill>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<MsgCommandUsePositionSkill> CreateMsgCommandUsePositionSkill(flatbuffers::FlatBufferBuilder &_fbb,
   const MobaGo::FlatBuffer::IntVec3 *vecPos = 0,
   int8_t chSlotType = 0,
   uint32_t uSkillId = 0) {
  MsgCommandUsePositionSkillBuilder builder_(_fbb);
  builder_.add_uSkillId(uSkillId);
  builder_.add_vecPos(vecPos);
  builder_.add_chSlotType(chSlotType);
  return builder_.Finish();
}

struct MsgFrameCommandC2S FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t uObjectId() const { return GetField<uint64_t>(4, 0); }
  uint8_t bytSyncType() const { return GetField<uint8_t>(6, 0); }
  const flatbuffers::Vector<uint8_t> *aData() const { return GetPointer<const flatbuffers::Vector<uint8_t> *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* uObjectId */) &&
           VerifyField<uint8_t>(verifier, 6 /* bytSyncType */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* aData */) &&
           verifier.Verify(aData()) &&
           verifier.EndTable();
  }
};

struct MsgFrameCommandC2SBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uObjectId(uint64_t uObjectId) { fbb_.AddElement<uint64_t>(4, uObjectId, 0); }
  void add_bytSyncType(uint8_t bytSyncType) { fbb_.AddElement<uint8_t>(6, bytSyncType, 0); }
  void add_aData(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> aData) { fbb_.AddOffset(8, aData); }
  MsgFrameCommandC2SBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgFrameCommandC2SBuilder &operator=(const MsgFrameCommandC2SBuilder &);
  flatbuffers::Offset<MsgFrameCommandC2S> Finish() {
    auto o = flatbuffers::Offset<MsgFrameCommandC2S>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<MsgFrameCommandC2S> CreateMsgFrameCommandC2S(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t uObjectId = 0,
   uint8_t bytSyncType = 0,
   flatbuffers::Offset<flatbuffers::Vector<uint8_t>> aData = 0) {
  MsgFrameCommandC2SBuilder builder_(_fbb);
  builder_.add_uObjectId(uObjectId);
  builder_.add_aData(aData);
  builder_.add_bytSyncType(bytSyncType);
  return builder_.Finish();
}

}  // namespace FlatBuffer
}  // namespace MobaGo

#endif  // FLATBUFFERS_GENERATED_FRAMECMDC2S_MOBAGO_FLATBUFFER_H_

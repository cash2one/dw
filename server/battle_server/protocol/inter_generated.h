// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_INTER_MOBAGO_FLATBUFFER_H_
#define FLATBUFFERS_GENERATED_INTER_MOBAGO_FLATBUFFER_H_

#include "flatbuffers/flatbuffers.h"


namespace MobaGo {
namespace FlatBuffer {

struct SMsgGateRegister;
struct SMsgVrRegisterVrpublic;
struct SMsgVrpublicNotifyVrLoginInfo;
struct SMsgVrpublicNotifyVrLoginInfoAck;
struct SMsgVRNotifyCreateSummonerToVRF;
struct SMsgVrRegisterTr;
struct SMsgVrRegisterVRFriend;
struct SMsgBattleRegisterTr;
struct SMsgMatchReq;
struct PPlayerInfo;
struct SMsgNotifyBattleMatchResult;
struct SMsgNotifyBattleMatchResultAck;
struct PPlayerBattleResult;
struct SMsgBattleEndNotifyVr;
struct SMsgVRAddFriendReq;
struct SMsgVRDelFriendReq;
struct SMsgVRConfirmAddFriendReq;
struct SMsgVRAddCancelFriendReq;
struct SMsgVRNotifyAddFriendReq;
struct SMsgVRNotifyDelFriendReq;
struct SMsgVRNotifyConfirmAddFriendReq;
struct SMsgVRNotifyAddCancelFriendReq;
struct SMsgVRFNotifyFriendOperateReq;
struct SMsgVRFNotifyFriendOperateAck;
struct SMsgVRNotifySearchFriend;
struct SMsgNotifySearchFriendAck;
struct FriendDetail;
struct SMsgFriendListReq;
struct SMsgFriendListAck;
struct SMsgApplyForFriendListReq;
struct SMsgApplyForFriendListAck;
struct SMsgVRFriendDetailInfoReq;
struct SMsgFriendDetailInfoReq;
struct SMsgFriendDetailInfoAck;
struct SMsgFriendStatusReq;
struct SMsgNotifySummonerStatusToFriend;
struct SMsgFriendStatus;
struct SMsgFriendStatusAck;

enum friend_oper_type {
  friend_oper_type_add_friend = 0,
  friend_oper_type_del_friend = 1,
  friend_oper_type_add_confirm = 2,
  friend_oper_type_add_cancel = 3
};

inline const char **EnumNamesfriend_oper_type() {
  static const char *names[] = { "add_friend", "del_friend", "add_confirm", "add_cancel", nullptr };
  return names;
}

inline const char *EnumNamefriend_oper_type(friend_oper_type e) { return EnumNamesfriend_oper_type()[static_cast<int>(e)]; }

struct SMsgGateRegister FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *ip_addr() const { return GetPointer<const flatbuffers::String *>(4); }
  int32_t port() const { return GetField<int32_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* ip_addr */) &&
           verifier.Verify(ip_addr()) &&
           VerifyField<int32_t>(verifier, 6 /* port */) &&
           verifier.EndTable();
  }
};

struct SMsgGateRegisterBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ip_addr(flatbuffers::Offset<flatbuffers::String> ip_addr) { fbb_.AddOffset(4, ip_addr); }
  void add_port(int32_t port) { fbb_.AddElement<int32_t>(6, port, 0); }
  SMsgGateRegisterBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SMsgGateRegisterBuilder &operator=(const SMsgGateRegisterBuilder &);
  flatbuffers::Offset<SMsgGateRegister> Finish() {
    auto o = flatbuffers::Offset<SMsgGateRegister>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<SMsgGateRegister> CreateSMsgGateRegister(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> ip_addr = 0,
   int32_t port = 0) {
  SMsgGateRegisterBuilder builder_(_fbb);
  builder_.add_port(port);
  builder_.add_ip_addr(ip_addr);
  return builder_.Finish();
}

struct SMsgVrRegisterVrpublic FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t area_id() const { return GetField<int32_t>(4, 0); }
  int32_t server_id() const { return GetField<int32_t>(6, 0); }
  const flatbuffers::String *gate_ip_addr() const { return GetPointer<const flatbuffers::String *>(8); }
  int32_t gate_port() const { return GetField<int32_t>(10, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* area_id */) &&
           VerifyField<int32_t>(verifier, 6 /* server_id */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* gate_ip_addr */) &&
           verifier.Verify(gate_ip_addr()) &&
           VerifyField<int32_t>(verifier, 10 /* gate_port */) &&
           verifier.EndTable();
  }
};

struct SMsgVrRegisterVrpublicBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_area_id(int32_t area_id) { fbb_.AddElement<int32_t>(4, area_id, 0); }
  void add_server_id(int32_t server_id) { fbb_.AddElement<int32_t>(6, server_id, 0); }
  void add_gate_ip_addr(flatbuffers::Offset<flatbuffers::String> gate_ip_addr) { fbb_.AddOffset(8, gate_ip_addr); }
  void add_gate_port(int32_t gate_port) { fbb_.AddElement<int32_t>(10, gate_port, 0); }
  SMsgVrRegisterVrpublicBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SMsgVrRegisterVrpublicBuilder &operator=(const SMsgVrRegisterVrpublicBuilder &);
  flatbuffers::Offset<SMsgVrRegisterVrpublic> Finish() {
    auto o = flatbuffers::Offset<SMsgVrRegisterVrpublic>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<SMsgVrRegisterVrpublic> CreateSMsgVrRegisterVrpublic(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t area_id = 0,
   int32_t server_id = 0,
   flatbuffers::Offset<flatbuffers::String> gate_ip_addr = 0,
   int32_t gate_port = 0) {
  SMsgVrRegisterVrpublicBuilder builder_(_fbb);
  builder_.add_gate_port(gate_port);
  builder_.add_gate_ip_addr(gate_ip_addr);
  builder_.add_server_id(server_id);
  builder_.add_area_id(area_id);
  return builder_.Finish();
}

struct SMsgVrpublicNotifyVrLoginInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *user_name() const { return GetPointer<const flatbuffers::String *>(4); }
  uint64_t user_guid() const { return GetField<uint64_t>(6, 0); }
  const flatbuffers::String *login_key() const { return GetPointer<const flatbuffers::String *>(8); }
  uint32_t channel_type() const { return GetField<uint32_t>(10, 0); }
  const flatbuffers::String *client_version() const { return GetPointer<const flatbuffers::String *>(12); }
  uint8_t is_play() const { return GetField<uint8_t>(14, 0); }
  uint32_t language() const { return GetField<uint32_t>(16, 0); }
  const flatbuffers::String *account_name() const { return GetPointer<const flatbuffers::String *>(18); }
  const flatbuffers::String *device_name() const { return GetPointer<const flatbuffers::String *>(20); }
  const flatbuffers::String *password() const { return GetPointer<const flatbuffers::String *>(22); }
  uint32_t platform_id() const { return GetField<uint32_t>(24, 0); }
  uint32_t gs_id() const { return GetField<uint32_t>(26, 0); }
  const flatbuffers::String *gate_ip() const { return GetPointer<const flatbuffers::String *>(28); }
  uint32_t gate_port() const { return GetField<uint32_t>(30, 0); }
  const flatbuffers::String *announcement() const { return GetPointer<const flatbuffers::String *>(32); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* user_name */) &&
           verifier.Verify(user_name()) &&
           VerifyField<uint64_t>(verifier, 6 /* user_guid */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* login_key */) &&
           verifier.Verify(login_key()) &&
           VerifyField<uint32_t>(verifier, 10 /* channel_type */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* client_version */) &&
           verifier.Verify(client_version()) &&
           VerifyField<uint8_t>(verifier, 14 /* is_play */) &&
           VerifyField<uint32_t>(verifier, 16 /* language */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 18 /* account_name */) &&
           verifier.Verify(account_name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 20 /* device_name */) &&
           verifier.Verify(device_name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 22 /* password */) &&
           verifier.Verify(password()) &&
           VerifyField<uint32_t>(verifier, 24 /* platform_id */) &&
           VerifyField<uint32_t>(verifier, 26 /* gs_id */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 28 /* gate_ip */) &&
           verifier.Verify(gate_ip()) &&
           VerifyField<uint32_t>(verifier, 30 /* gate_port */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 32 /* announcement */) &&
           verifier.Verify(announcement()) &&
           verifier.EndTable();
  }
};

struct SMsgVrpublicNotifyVrLoginInfoBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_user_name(flatbuffers::Offset<flatbuffers::String> user_name) { fbb_.AddOffset(4, user_name); }
  void add_user_guid(uint64_t user_guid) { fbb_.AddElement<uint64_t>(6, user_guid, 0); }
  void add_login_key(flatbuffers::Offset<flatbuffers::String> login_key) { fbb_.AddOffset(8, login_key); }
  void add_channel_type(uint32_t channel_type) { fbb_.AddElement<uint32_t>(10, channel_type, 0); }
  void add_client_version(flatbuffers::Offset<flatbuffers::String> client_version) { fbb_.AddOffset(12, client_version); }
  void add_is_play(uint8_t is_play) { fbb_.AddElement<uint8_t>(14, is_play, 0); }
  void add_language(uint32_t language) { fbb_.AddElement<uint32_t>(16, language, 0); }
  void add_account_name(flatbuffers::Offset<flatbuffers::String> account_name) { fbb_.AddOffset(18, account_name); }
  void add_device_name(flatbuffers::Offset<flatbuffers::String> device_name) { fbb_.AddOffset(20, device_name); }
  void add_password(flatbuffers::Offset<flatbuffers::String> password) { fbb_.AddOffset(22, password); }
  void add_platform_id(uint32_t platform_id) { fbb_.AddElement<uint32_t>(24, platform_id, 0); }
  void add_gs_id(uint32_t gs_id) { fbb_.AddElement<uint32_t>(26, gs_id, 0); }
  void add_gate_ip(flatbuffers::Offset<flatbuffers::String> gate_ip) { fbb_.AddOffset(28, gate_ip); }
  void add_gate_port(uint32_t gate_port) { fbb_.AddElement<uint32_t>(30, gate_port, 0); }
  void add_announcement(flatbuffers::Offset<flatbuffers::String> announcement) { fbb_.AddOffset(32, announcement); }
  SMsgVrpublicNotifyVrLoginInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SMsgVrpublicNotifyVrLoginInfoBuilder &operator=(const SMsgVrpublicNotifyVrLoginInfoBuilder &);
  flatbuffers::Offset<SMsgVrpublicNotifyVrLoginInfo> Finish() {
    auto o = flatbuffers::Offset<SMsgVrpublicNotifyVrLoginInfo>(fbb_.EndTable(start_, 15));
    return o;
  }
};

inline flatbuffers::Offset<SMsgVrpublicNotifyVrLoginInfo> CreateSMsgVrpublicNotifyVrLoginInfo(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> user_name = 0,
   uint64_t user_guid = 0,
   flatbuffers::Offset<flatbuffers::String> login_key = 0,
   uint32_t channel_type = 0,
   flatbuffers::Offset<flatbuffers::String> client_version = 0,
   uint8_t is_play = 0,
   uint32_t language = 0,
   flatbuffers::Offset<flatbuffers::String> account_name = 0,
   flatbuffers::Offset<flatbuffers::String> device_name = 0,
   flatbuffers::Offset<flatbuffers::String> password = 0,
   uint32_t platform_id = 0,
   uint32_t gs_id = 0,
   flatbuffers::Offset<flatbuffers::String> gate_ip = 0,
   uint32_t gate_port = 0,
   flatbuffers::Offset<flatbuffers::String> announcement = 0) {
  SMsgVrpublicNotifyVrLoginInfoBuilder builder_(_fbb);
  builder_.add_user_guid(user_guid);
  builder_.add_announcement(announcement);
  builder_.add_gate_port(gate_port);
  builder_.add_gate_ip(gate_ip);
  builder_.add_gs_id(gs_id);
  builder_.add_platform_id(platform_id);
  builder_.add_password(password);
  builder_.add_device_name(device_name);
  builder_.add_account_name(account_name);
  builder_.add_language(language);
  builder_.add_client_version(client_version);
  builder_.add_channel_type(channel_type);
  builder_.add_login_key(login_key);
  builder_.add_user_name(user_name);
  builder_.add_is_play(is_play);
  return builder_.Finish();
}

struct SMsgVrpublicNotifyVrLoginInfoAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint32_t gs_id() const { return GetField<uint32_t>(4, 0); }
  const flatbuffers::String *gate_ip() const { return GetPointer<const flatbuffers::String *>(6); }
  uint32_t gate_port() const { return GetField<uint32_t>(8, 0); }
  const flatbuffers::String *session_code() const { return GetPointer<const flatbuffers::String *>(10); }
  const flatbuffers::String *announcement() const { return GetPointer<const flatbuffers::String *>(12); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, 4 /* gs_id */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* gate_ip */) &&
           verifier.Verify(gate_ip()) &&
           VerifyField<uint32_t>(verifier, 8 /* gate_port */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* session_code */) &&
           verifier.Verify(session_code()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* announcement */) &&
           verifier.Verify(announcement()) &&
           verifier.EndTable();
  }
};

struct SMsgVrpublicNotifyVrLoginInfoAckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_gs_id(uint32_t gs_id) { fbb_.AddElement<uint32_t>(4, gs_id, 0); }
  void add_gate_ip(flatbuffers::Offset<flatbuffers::String> gate_ip) { fbb_.AddOffset(6, gate_ip); }
  void add_gate_port(uint32_t gate_port) { fbb_.AddElement<uint32_t>(8, gate_port, 0); }
  void add_session_code(flatbuffers::Offset<flatbuffers::String> session_code) { fbb_.AddOffset(10, session_code); }
  void add_announcement(flatbuffers::Offset<flatbuffers::String> announcement) { fbb_.AddOffset(12, announcement); }
  SMsgVrpublicNotifyVrLoginInfoAckBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SMsgVrpublicNotifyVrLoginInfoAckBuilder &operator=(const SMsgVrpublicNotifyVrLoginInfoAckBuilder &);
  flatbuffers::Offset<SMsgVrpublicNotifyVrLoginInfoAck> Finish() {
    auto o = flatbuffers::Offset<SMsgVrpublicNotifyVrLoginInfoAck>(fbb_.EndTable(start_, 5));
    return o;
  }
};

inline flatbuffers::Offset<SMsgVrpublicNotifyVrLoginInfoAck> CreateSMsgVrpublicNotifyVrLoginInfoAck(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t gs_id = 0,
   flatbuffers::Offset<flatbuffers::String> gate_ip = 0,
   uint32_t gate_port = 0,
   flatbuffers::Offset<flatbuffers::String> session_code = 0,
   flatbuffers::Offset<flatbuffers::String> announcement = 0) {
  SMsgVrpublicNotifyVrLoginInfoAckBuilder builder_(_fbb);
  builder_.add_announcement(announcement);
  builder_.add_session_code(session_code);
  builder_.add_gate_port(gate_port);
  builder_.add_gate_ip(gate_ip);
  builder_.add_gs_id(gs_id);
  return builder_.Finish();
}

struct SMsgVRNotifyCreateSummonerToVRF FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t sum_id() const { return GetField<uint64_t>(4, 0); }
  const flatbuffers::String *sum_name() const { return GetPointer<const flatbuffers::String *>(6); }
  uint32_t server_id() const { return GetField<uint32_t>(8, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* sum_id */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* sum_name */) &&
           verifier.Verify(sum_name()) &&
           VerifyField<uint32_t>(verifier, 8 /* server_id */) &&
           verifier.EndTable();
  }
};

struct SMsgVRNotifyCreateSummonerToVRFBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sum_id(uint64_t sum_id) { fbb_.AddElement<uint64_t>(4, sum_id, 0); }
  void add_sum_name(flatbuffers::Offset<flatbuffers::String> sum_name) { fbb_.AddOffset(6, sum_name); }
  void add_server_id(uint32_t server_id) { fbb_.AddElement<uint32_t>(8, server_id, 0); }
  SMsgVRNotifyCreateSummonerToVRFBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SMsgVRNotifyCreateSummonerToVRFBuilder &operator=(const SMsgVRNotifyCreateSummonerToVRFBuilder &);
  flatbuffers::Offset<SMsgVRNotifyCreateSummonerToVRF> Finish() {
    auto o = flatbuffers::Offset<SMsgVRNotifyCreateSummonerToVRF>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<SMsgVRNotifyCreateSummonerToVRF> CreateSMsgVRNotifyCreateSummonerToVRF(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t sum_id = 0,
   flatbuffers::Offset<flatbuffers::String> sum_name = 0,
   uint32_t server_id = 0) {
  SMsgVRNotifyCreateSummonerToVRFBuilder builder_(_fbb);
  builder_.add_sum_id(sum_id);
  builder_.add_server_id(server_id);
  builder_.add_sum_name(sum_name);
  return builder_.Finish();
}

struct SMsgVrRegisterTr FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t area_id() const { return GetField<int32_t>(4, 0); }
  int32_t server_id() const { return GetField<int32_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* area_id */) &&
           VerifyField<int32_t>(verifier, 6 /* server_id */) &&
           verifier.EndTable();
  }
};

struct SMsgVrRegisterTrBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_area_id(int32_t area_id) { fbb_.AddElement<int32_t>(4, area_id, 0); }
  void add_server_id(int32_t server_id) { fbb_.AddElement<int32_t>(6, server_id, 0); }
  SMsgVrRegisterTrBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SMsgVrRegisterTrBuilder &operator=(const SMsgVrRegisterTrBuilder &);
  flatbuffers::Offset<SMsgVrRegisterTr> Finish() {
    auto o = flatbuffers::Offset<SMsgVrRegisterTr>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<SMsgVrRegisterTr> CreateSMsgVrRegisterTr(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t area_id = 0,
   int32_t server_id = 0) {
  SMsgVrRegisterTrBuilder builder_(_fbb);
  builder_.add_server_id(server_id);
  builder_.add_area_id(area_id);
  return builder_.Finish();
}

struct SMsgVrRegisterVRFriend FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint32_t area_id() const { return GetField<uint32_t>(4, 0); }
  uint32_t server_id() const { return GetField<uint32_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, 4 /* area_id */) &&
           VerifyField<uint32_t>(verifier, 6 /* server_id */) &&
           verifier.EndTable();
  }
};

struct SMsgVrRegisterVRFriendBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_area_id(uint32_t area_id) { fbb_.AddElement<uint32_t>(4, area_id, 0); }
  void add_server_id(uint32_t server_id) { fbb_.AddElement<uint32_t>(6, server_id, 0); }
  SMsgVrRegisterVRFriendBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SMsgVrRegisterVRFriendBuilder &operator=(const SMsgVrRegisterVRFriendBuilder &);
  flatbuffers::Offset<SMsgVrRegisterVRFriend> Finish() {
    auto o = flatbuffers::Offset<SMsgVrRegisterVRFriend>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<SMsgVrRegisterVRFriend> CreateSMsgVrRegisterVRFriend(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t area_id = 0,
   uint32_t server_id = 0) {
  SMsgVrRegisterVRFriendBuilder builder_(_fbb);
  builder_.add_server_id(server_id);
  builder_.add_area_id(area_id);
  return builder_.Finish();
}

struct SMsgBattleRegisterTr FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t battle_server_id() const { return GetField<int32_t>(4, 0); }
  const flatbuffers::String *battle_gate_ip() const { return GetPointer<const flatbuffers::String *>(6); }
  int32_t battle_gate_port() const { return GetField<int32_t>(8, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* battle_server_id */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* battle_gate_ip */) &&
           verifier.Verify(battle_gate_ip()) &&
           VerifyField<int32_t>(verifier, 8 /* battle_gate_port */) &&
           verifier.EndTable();
  }
};

struct SMsgBattleRegisterTrBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_battle_server_id(int32_t battle_server_id) { fbb_.AddElement<int32_t>(4, battle_server_id, 0); }
  void add_battle_gate_ip(flatbuffers::Offset<flatbuffers::String> battle_gate_ip) { fbb_.AddOffset(6, battle_gate_ip); }
  void add_battle_gate_port(int32_t battle_gate_port) { fbb_.AddElement<int32_t>(8, battle_gate_port, 0); }
  SMsgBattleRegisterTrBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SMsgBattleRegisterTrBuilder &operator=(const SMsgBattleRegisterTrBuilder &);
  flatbuffers::Offset<SMsgBattleRegisterTr> Finish() {
    auto o = flatbuffers::Offset<SMsgBattleRegisterTr>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<SMsgBattleRegisterTr> CreateSMsgBattleRegisterTr(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t battle_server_id = 0,
   flatbuffers::Offset<flatbuffers::String> battle_gate_ip = 0,
   int32_t battle_gate_port = 0) {
  SMsgBattleRegisterTrBuilder builder_(_fbb);
  builder_.add_battle_gate_port(battle_gate_port);
  builder_.add_battle_gate_ip(battle_gate_ip);
  builder_.add_battle_server_id(battle_server_id);
  return builder_.Finish();
}

struct SMsgMatchReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint8_t team_type() const { return GetField<uint8_t>(4, 0); }
  uint8_t match_type() const { return GetField<uint8_t>(6, 0); }
  const flatbuffers::Vector<uint64_t> *user_list() const { return GetPointer<const flatbuffers::Vector<uint64_t> *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* team_type */) &&
           VerifyField<uint8_t>(verifier, 6 /* match_type */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* user_list */) &&
           verifier.Verify(user_list()) &&
           verifier.EndTable();
  }
};

struct SMsgMatchReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_team_type(uint8_t team_type) { fbb_.AddElement<uint8_t>(4, team_type, 0); }
  void add_match_type(uint8_t match_type) { fbb_.AddElement<uint8_t>(6, match_type, 0); }
  void add_user_list(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> user_list) { fbb_.AddOffset(8, user_list); }
  SMsgMatchReqBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SMsgMatchReqBuilder &operator=(const SMsgMatchReqBuilder &);
  flatbuffers::Offset<SMsgMatchReq> Finish() {
    auto o = flatbuffers::Offset<SMsgMatchReq>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<SMsgMatchReq> CreateSMsgMatchReq(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t team_type = 0,
   uint8_t match_type = 0,
   flatbuffers::Offset<flatbuffers::Vector<uint64_t>> user_list = 0) {
  SMsgMatchReqBuilder builder_(_fbb);
  builder_.add_user_list(user_list);
  builder_.add_match_type(match_type);
  builder_.add_team_type(team_type);
  return builder_.Finish();
}

struct PPlayerInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t user_id() const { return GetField<uint64_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* user_id */) &&
           verifier.EndTable();
  }
};

struct PPlayerInfoBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_user_id(uint64_t user_id) { fbb_.AddElement<uint64_t>(4, user_id, 0); }
  PPlayerInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PPlayerInfoBuilder &operator=(const PPlayerInfoBuilder &);
  flatbuffers::Offset<PPlayerInfo> Finish() {
    auto o = flatbuffers::Offset<PPlayerInfo>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<PPlayerInfo> CreatePPlayerInfo(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t user_id = 0) {
  PPlayerInfoBuilder builder_(_fbb);
  builder_.add_user_id(user_id);
  return builder_.Finish();
}

struct SMsgNotifyBattleMatchResult FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t match_id() const { return GetField<uint64_t>(4, 0); }
  uint8_t team_type() const { return GetField<uint8_t>(6, 0); }
  uint8_t match_type() const { return GetField<uint8_t>(8, 0); }
  const flatbuffers::Vector<flatbuffers::Offset<PPlayerInfo>> *player_list() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<PPlayerInfo>> *>(10); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* match_id */) &&
           VerifyField<uint8_t>(verifier, 6 /* team_type */) &&
           VerifyField<uint8_t>(verifier, 8 /* match_type */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* player_list */) &&
           verifier.Verify(player_list()) &&
           verifier.VerifyVectorOfTables(player_list()) &&
           verifier.EndTable();
  }
};

struct SMsgNotifyBattleMatchResultBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_match_id(uint64_t match_id) { fbb_.AddElement<uint64_t>(4, match_id, 0); }
  void add_team_type(uint8_t team_type) { fbb_.AddElement<uint8_t>(6, team_type, 0); }
  void add_match_type(uint8_t match_type) { fbb_.AddElement<uint8_t>(8, match_type, 0); }
  void add_player_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<PPlayerInfo>>> player_list) { fbb_.AddOffset(10, player_list); }
  SMsgNotifyBattleMatchResultBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SMsgNotifyBattleMatchResultBuilder &operator=(const SMsgNotifyBattleMatchResultBuilder &);
  flatbuffers::Offset<SMsgNotifyBattleMatchResult> Finish() {
    auto o = flatbuffers::Offset<SMsgNotifyBattleMatchResult>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<SMsgNotifyBattleMatchResult> CreateSMsgNotifyBattleMatchResult(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t match_id = 0,
   uint8_t team_type = 0,
   uint8_t match_type = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<PPlayerInfo>>> player_list = 0) {
  SMsgNotifyBattleMatchResultBuilder builder_(_fbb);
  builder_.add_match_id(match_id);
  builder_.add_player_list(player_list);
  builder_.add_match_type(match_type);
  builder_.add_team_type(team_type);
  return builder_.Finish();
}

struct SMsgNotifyBattleMatchResultAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t match_id() const { return GetField<uint64_t>(4, 0); }
  uint32_t result() const { return GetField<uint32_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* match_id */) &&
           VerifyField<uint32_t>(verifier, 6 /* result */) &&
           verifier.EndTable();
  }
};

struct SMsgNotifyBattleMatchResultAckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_match_id(uint64_t match_id) { fbb_.AddElement<uint64_t>(4, match_id, 0); }
  void add_result(uint32_t result) { fbb_.AddElement<uint32_t>(6, result, 0); }
  SMsgNotifyBattleMatchResultAckBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SMsgNotifyBattleMatchResultAckBuilder &operator=(const SMsgNotifyBattleMatchResultAckBuilder &);
  flatbuffers::Offset<SMsgNotifyBattleMatchResultAck> Finish() {
    auto o = flatbuffers::Offset<SMsgNotifyBattleMatchResultAck>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<SMsgNotifyBattleMatchResultAck> CreateSMsgNotifyBattleMatchResultAck(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t match_id = 0,
   uint32_t result = 0) {
  SMsgNotifyBattleMatchResultAckBuilder builder_(_fbb);
  builder_.add_match_id(match_id);
  builder_.add_result(result);
  return builder_.Finish();
}

struct PPlayerBattleResult FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t account_id() const { return GetField<uint64_t>(4, 0); }
  int32_t team_id() const { return GetField<int32_t>(6, 0); }
  int32_t kill_value() const { return GetField<int32_t>(8, 0); }
  int32_t death_value() const { return GetField<int32_t>(10, 0); }
  int32_t assist_value() const { return GetField<int32_t>(12, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* account_id */) &&
           VerifyField<int32_t>(verifier, 6 /* team_id */) &&
           VerifyField<int32_t>(verifier, 8 /* kill_value */) &&
           VerifyField<int32_t>(verifier, 10 /* death_value */) &&
           VerifyField<int32_t>(verifier, 12 /* assist_value */) &&
           verifier.EndTable();
  }
};

struct PPlayerBattleResultBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_account_id(uint64_t account_id) { fbb_.AddElement<uint64_t>(4, account_id, 0); }
  void add_team_id(int32_t team_id) { fbb_.AddElement<int32_t>(6, team_id, 0); }
  void add_kill_value(int32_t kill_value) { fbb_.AddElement<int32_t>(8, kill_value, 0); }
  void add_death_value(int32_t death_value) { fbb_.AddElement<int32_t>(10, death_value, 0); }
  void add_assist_value(int32_t assist_value) { fbb_.AddElement<int32_t>(12, assist_value, 0); }
  PPlayerBattleResultBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PPlayerBattleResultBuilder &operator=(const PPlayerBattleResultBuilder &);
  flatbuffers::Offset<PPlayerBattleResult> Finish() {
    auto o = flatbuffers::Offset<PPlayerBattleResult>(fbb_.EndTable(start_, 5));
    return o;
  }
};

inline flatbuffers::Offset<PPlayerBattleResult> CreatePPlayerBattleResult(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t account_id = 0,
   int32_t team_id = 0,
   int32_t kill_value = 0,
   int32_t death_value = 0,
   int32_t assist_value = 0) {
  PPlayerBattleResultBuilder builder_(_fbb);
  builder_.add_account_id(account_id);
  builder_.add_assist_value(assist_value);
  builder_.add_death_value(death_value);
  builder_.add_kill_value(kill_value);
  builder_.add_team_id(team_id);
  return builder_.Finish();
}

struct SMsgBattleEndNotifyVr FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t win_team_id() const { return GetField<int32_t>(4, 0); }
  const flatbuffers::Vector<flatbuffers::Offset<PPlayerBattleResult>> *player_battle_result_list() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<PPlayerBattleResult>> *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* win_team_id */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* player_battle_result_list */) &&
           verifier.Verify(player_battle_result_list()) &&
           verifier.VerifyVectorOfTables(player_battle_result_list()) &&
           verifier.EndTable();
  }
};

struct SMsgBattleEndNotifyVrBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_win_team_id(int32_t win_team_id) { fbb_.AddElement<int32_t>(4, win_team_id, 0); }
  void add_player_battle_result_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<PPlayerBattleResult>>> player_battle_result_list) { fbb_.AddOffset(6, player_battle_result_list); }
  SMsgBattleEndNotifyVrBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SMsgBattleEndNotifyVrBuilder &operator=(const SMsgBattleEndNotifyVrBuilder &);
  flatbuffers::Offset<SMsgBattleEndNotifyVr> Finish() {
    auto o = flatbuffers::Offset<SMsgBattleEndNotifyVr>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<SMsgBattleEndNotifyVr> CreateSMsgBattleEndNotifyVr(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t win_team_id = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<PPlayerBattleResult>>> player_battle_result_list = 0) {
  SMsgBattleEndNotifyVrBuilder builder_(_fbb);
  builder_.add_player_battle_result_list(player_battle_result_list);
  builder_.add_win_team_id(win_team_id);
  return builder_.Finish();
}

struct SMsgVRAddFriendReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t summoner_id() const { return GetField<uint64_t>(4, 0); }
  uint64_t friend_id() const { return GetField<uint64_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* summoner_id */) &&
           VerifyField<uint64_t>(verifier, 6 /* friend_id */) &&
           verifier.EndTable();
  }
};

struct SMsgVRAddFriendReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_summoner_id(uint64_t summoner_id) { fbb_.AddElement<uint64_t>(4, summoner_id, 0); }
  void add_friend_id(uint64_t friend_id) { fbb_.AddElement<uint64_t>(6, friend_id, 0); }
  SMsgVRAddFriendReqBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SMsgVRAddFriendReqBuilder &operator=(const SMsgVRAddFriendReqBuilder &);
  flatbuffers::Offset<SMsgVRAddFriendReq> Finish() {
    auto o = flatbuffers::Offset<SMsgVRAddFriendReq>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<SMsgVRAddFriendReq> CreateSMsgVRAddFriendReq(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t summoner_id = 0,
   uint64_t friend_id = 0) {
  SMsgVRAddFriendReqBuilder builder_(_fbb);
  builder_.add_friend_id(friend_id);
  builder_.add_summoner_id(summoner_id);
  return builder_.Finish();
}

struct SMsgVRDelFriendReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t summoner_id() const { return GetField<uint64_t>(4, 0); }
  uint64_t friend_id() const { return GetField<uint64_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* summoner_id */) &&
           VerifyField<uint64_t>(verifier, 6 /* friend_id */) &&
           verifier.EndTable();
  }
};

struct SMsgVRDelFriendReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_summoner_id(uint64_t summoner_id) { fbb_.AddElement<uint64_t>(4, summoner_id, 0); }
  void add_friend_id(uint64_t friend_id) { fbb_.AddElement<uint64_t>(6, friend_id, 0); }
  SMsgVRDelFriendReqBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SMsgVRDelFriendReqBuilder &operator=(const SMsgVRDelFriendReqBuilder &);
  flatbuffers::Offset<SMsgVRDelFriendReq> Finish() {
    auto o = flatbuffers::Offset<SMsgVRDelFriendReq>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<SMsgVRDelFriendReq> CreateSMsgVRDelFriendReq(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t summoner_id = 0,
   uint64_t friend_id = 0) {
  SMsgVRDelFriendReqBuilder builder_(_fbb);
  builder_.add_friend_id(friend_id);
  builder_.add_summoner_id(summoner_id);
  return builder_.Finish();
}

struct SMsgVRConfirmAddFriendReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t summoner_id() const { return GetField<uint64_t>(4, 0); }
  uint64_t friend_id() const { return GetField<uint64_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* summoner_id */) &&
           VerifyField<uint64_t>(verifier, 6 /* friend_id */) &&
           verifier.EndTable();
  }
};

struct SMsgVRConfirmAddFriendReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_summoner_id(uint64_t summoner_id) { fbb_.AddElement<uint64_t>(4, summoner_id, 0); }
  void add_friend_id(uint64_t friend_id) { fbb_.AddElement<uint64_t>(6, friend_id, 0); }
  SMsgVRConfirmAddFriendReqBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SMsgVRConfirmAddFriendReqBuilder &operator=(const SMsgVRConfirmAddFriendReqBuilder &);
  flatbuffers::Offset<SMsgVRConfirmAddFriendReq> Finish() {
    auto o = flatbuffers::Offset<SMsgVRConfirmAddFriendReq>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<SMsgVRConfirmAddFriendReq> CreateSMsgVRConfirmAddFriendReq(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t summoner_id = 0,
   uint64_t friend_id = 0) {
  SMsgVRConfirmAddFriendReqBuilder builder_(_fbb);
  builder_.add_friend_id(friend_id);
  builder_.add_summoner_id(summoner_id);
  return builder_.Finish();
}

struct SMsgVRAddCancelFriendReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t summoner_id() const { return GetField<uint64_t>(4, 0); }
  uint64_t friend_id() const { return GetField<uint64_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* summoner_id */) &&
           VerifyField<uint64_t>(verifier, 6 /* friend_id */) &&
           verifier.EndTable();
  }
};

struct SMsgVRAddCancelFriendReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_summoner_id(uint64_t summoner_id) { fbb_.AddElement<uint64_t>(4, summoner_id, 0); }
  void add_friend_id(uint64_t friend_id) { fbb_.AddElement<uint64_t>(6, friend_id, 0); }
  SMsgVRAddCancelFriendReqBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SMsgVRAddCancelFriendReqBuilder &operator=(const SMsgVRAddCancelFriendReqBuilder &);
  flatbuffers::Offset<SMsgVRAddCancelFriendReq> Finish() {
    auto o = flatbuffers::Offset<SMsgVRAddCancelFriendReq>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<SMsgVRAddCancelFriendReq> CreateSMsgVRAddCancelFriendReq(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t summoner_id = 0,
   uint64_t friend_id = 0) {
  SMsgVRAddCancelFriendReqBuilder builder_(_fbb);
  builder_.add_friend_id(friend_id);
  builder_.add_summoner_id(summoner_id);
  return builder_.Finish();
}

struct SMsgVRNotifyAddFriendReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t summoner_id() const { return GetField<uint64_t>(4, 0); }
  uint64_t friend_id() const { return GetField<uint64_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* summoner_id */) &&
           VerifyField<uint64_t>(verifier, 6 /* friend_id */) &&
           verifier.EndTable();
  }
};

struct SMsgVRNotifyAddFriendReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_summoner_id(uint64_t summoner_id) { fbb_.AddElement<uint64_t>(4, summoner_id, 0); }
  void add_friend_id(uint64_t friend_id) { fbb_.AddElement<uint64_t>(6, friend_id, 0); }
  SMsgVRNotifyAddFriendReqBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SMsgVRNotifyAddFriendReqBuilder &operator=(const SMsgVRNotifyAddFriendReqBuilder &);
  flatbuffers::Offset<SMsgVRNotifyAddFriendReq> Finish() {
    auto o = flatbuffers::Offset<SMsgVRNotifyAddFriendReq>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<SMsgVRNotifyAddFriendReq> CreateSMsgVRNotifyAddFriendReq(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t summoner_id = 0,
   uint64_t friend_id = 0) {
  SMsgVRNotifyAddFriendReqBuilder builder_(_fbb);
  builder_.add_friend_id(friend_id);
  builder_.add_summoner_id(summoner_id);
  return builder_.Finish();
}

struct SMsgVRNotifyDelFriendReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t summoner_id() const { return GetField<uint64_t>(4, 0); }
  uint64_t friend_id() const { return GetField<uint64_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* summoner_id */) &&
           VerifyField<uint64_t>(verifier, 6 /* friend_id */) &&
           verifier.EndTable();
  }
};

struct SMsgVRNotifyDelFriendReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_summoner_id(uint64_t summoner_id) { fbb_.AddElement<uint64_t>(4, summoner_id, 0); }
  void add_friend_id(uint64_t friend_id) { fbb_.AddElement<uint64_t>(6, friend_id, 0); }
  SMsgVRNotifyDelFriendReqBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SMsgVRNotifyDelFriendReqBuilder &operator=(const SMsgVRNotifyDelFriendReqBuilder &);
  flatbuffers::Offset<SMsgVRNotifyDelFriendReq> Finish() {
    auto o = flatbuffers::Offset<SMsgVRNotifyDelFriendReq>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<SMsgVRNotifyDelFriendReq> CreateSMsgVRNotifyDelFriendReq(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t summoner_id = 0,
   uint64_t friend_id = 0) {
  SMsgVRNotifyDelFriendReqBuilder builder_(_fbb);
  builder_.add_friend_id(friend_id);
  builder_.add_summoner_id(summoner_id);
  return builder_.Finish();
}

struct SMsgVRNotifyConfirmAddFriendReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t summoner_id() const { return GetField<uint64_t>(4, 0); }
  uint64_t friend_id() const { return GetField<uint64_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* summoner_id */) &&
           VerifyField<uint64_t>(verifier, 6 /* friend_id */) &&
           verifier.EndTable();
  }
};

struct SMsgVRNotifyConfirmAddFriendReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_summoner_id(uint64_t summoner_id) { fbb_.AddElement<uint64_t>(4, summoner_id, 0); }
  void add_friend_id(uint64_t friend_id) { fbb_.AddElement<uint64_t>(6, friend_id, 0); }
  SMsgVRNotifyConfirmAddFriendReqBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SMsgVRNotifyConfirmAddFriendReqBuilder &operator=(const SMsgVRNotifyConfirmAddFriendReqBuilder &);
  flatbuffers::Offset<SMsgVRNotifyConfirmAddFriendReq> Finish() {
    auto o = flatbuffers::Offset<SMsgVRNotifyConfirmAddFriendReq>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<SMsgVRNotifyConfirmAddFriendReq> CreateSMsgVRNotifyConfirmAddFriendReq(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t summoner_id = 0,
   uint64_t friend_id = 0) {
  SMsgVRNotifyConfirmAddFriendReqBuilder builder_(_fbb);
  builder_.add_friend_id(friend_id);
  builder_.add_summoner_id(summoner_id);
  return builder_.Finish();
}

struct SMsgVRNotifyAddCancelFriendReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t summoner_id() const { return GetField<uint64_t>(4, 0); }
  uint64_t friend_id() const { return GetField<uint64_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* summoner_id */) &&
           VerifyField<uint64_t>(verifier, 6 /* friend_id */) &&
           verifier.EndTable();
  }
};

struct SMsgVRNotifyAddCancelFriendReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_summoner_id(uint64_t summoner_id) { fbb_.AddElement<uint64_t>(4, summoner_id, 0); }
  void add_friend_id(uint64_t friend_id) { fbb_.AddElement<uint64_t>(6, friend_id, 0); }
  SMsgVRNotifyAddCancelFriendReqBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SMsgVRNotifyAddCancelFriendReqBuilder &operator=(const SMsgVRNotifyAddCancelFriendReqBuilder &);
  flatbuffers::Offset<SMsgVRNotifyAddCancelFriendReq> Finish() {
    auto o = flatbuffers::Offset<SMsgVRNotifyAddCancelFriendReq>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<SMsgVRNotifyAddCancelFriendReq> CreateSMsgVRNotifyAddCancelFriendReq(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t summoner_id = 0,
   uint64_t friend_id = 0) {
  SMsgVRNotifyAddCancelFriendReqBuilder builder_(_fbb);
  builder_.add_friend_id(friend_id);
  builder_.add_summoner_id(summoner_id);
  return builder_.Finish();
}

struct SMsgVRFNotifyFriendOperateReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t friend_id() const { return GetField<uint64_t>(4, 0); }
  friend_oper_type operate_type() const { return static_cast<friend_oper_type>(GetField<uint8_t>(6, 0)); }
  uint64_t summoner_id() const { return GetField<uint64_t>(8, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* friend_id */) &&
           VerifyField<uint8_t>(verifier, 6 /* operate_type */) &&
           VerifyField<uint64_t>(verifier, 8 /* summoner_id */) &&
           verifier.EndTable();
  }
};

struct SMsgVRFNotifyFriendOperateReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_friend_id(uint64_t friend_id) { fbb_.AddElement<uint64_t>(4, friend_id, 0); }
  void add_operate_type(friend_oper_type operate_type) { fbb_.AddElement<uint8_t>(6, static_cast<uint8_t>(operate_type), 0); }
  void add_summoner_id(uint64_t summoner_id) { fbb_.AddElement<uint64_t>(8, summoner_id, 0); }
  SMsgVRFNotifyFriendOperateReqBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SMsgVRFNotifyFriendOperateReqBuilder &operator=(const SMsgVRFNotifyFriendOperateReqBuilder &);
  flatbuffers::Offset<SMsgVRFNotifyFriendOperateReq> Finish() {
    auto o = flatbuffers::Offset<SMsgVRFNotifyFriendOperateReq>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<SMsgVRFNotifyFriendOperateReq> CreateSMsgVRFNotifyFriendOperateReq(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t friend_id = 0,
   friend_oper_type operate_type = friend_oper_type_add_friend,
   uint64_t summoner_id = 0) {
  SMsgVRFNotifyFriendOperateReqBuilder builder_(_fbb);
  builder_.add_summoner_id(summoner_id);
  builder_.add_friend_id(friend_id);
  builder_.add_operate_type(operate_type);
  return builder_.Finish();
}

struct SMsgVRFNotifyFriendOperateAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t friend_id() const { return GetField<uint64_t>(4, 0); }
  friend_oper_type operate_type() const { return static_cast<friend_oper_type>(GetField<uint8_t>(6, 0)); }
  uint64_t summoner_id() const { return GetField<uint64_t>(8, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* friend_id */) &&
           VerifyField<uint8_t>(verifier, 6 /* operate_type */) &&
           VerifyField<uint64_t>(verifier, 8 /* summoner_id */) &&
           verifier.EndTable();
  }
};

struct SMsgVRFNotifyFriendOperateAckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_friend_id(uint64_t friend_id) { fbb_.AddElement<uint64_t>(4, friend_id, 0); }
  void add_operate_type(friend_oper_type operate_type) { fbb_.AddElement<uint8_t>(6, static_cast<uint8_t>(operate_type), 0); }
  void add_summoner_id(uint64_t summoner_id) { fbb_.AddElement<uint64_t>(8, summoner_id, 0); }
  SMsgVRFNotifyFriendOperateAckBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SMsgVRFNotifyFriendOperateAckBuilder &operator=(const SMsgVRFNotifyFriendOperateAckBuilder &);
  flatbuffers::Offset<SMsgVRFNotifyFriendOperateAck> Finish() {
    auto o = flatbuffers::Offset<SMsgVRFNotifyFriendOperateAck>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<SMsgVRFNotifyFriendOperateAck> CreateSMsgVRFNotifyFriendOperateAck(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t friend_id = 0,
   friend_oper_type operate_type = friend_oper_type_add_friend,
   uint64_t summoner_id = 0) {
  SMsgVRFNotifyFriendOperateAckBuilder builder_(_fbb);
  builder_.add_summoner_id(summoner_id);
  builder_.add_friend_id(friend_id);
  builder_.add_operate_type(operate_type);
  return builder_.Finish();
}

struct SMsgVRNotifySearchFriend FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t summoner_id() const { return GetField<uint64_t>(4, 0); }
  const flatbuffers::String *friend_name() const { return GetPointer<const flatbuffers::String *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* summoner_id */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* friend_name */) &&
           verifier.Verify(friend_name()) &&
           verifier.EndTable();
  }
};

struct SMsgVRNotifySearchFriendBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_summoner_id(uint64_t summoner_id) { fbb_.AddElement<uint64_t>(4, summoner_id, 0); }
  void add_friend_name(flatbuffers::Offset<flatbuffers::String> friend_name) { fbb_.AddOffset(6, friend_name); }
  SMsgVRNotifySearchFriendBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SMsgVRNotifySearchFriendBuilder &operator=(const SMsgVRNotifySearchFriendBuilder &);
  flatbuffers::Offset<SMsgVRNotifySearchFriend> Finish() {
    auto o = flatbuffers::Offset<SMsgVRNotifySearchFriend>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<SMsgVRNotifySearchFriend> CreateSMsgVRNotifySearchFriend(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t summoner_id = 0,
   flatbuffers::Offset<flatbuffers::String> friend_name = 0) {
  SMsgVRNotifySearchFriendBuilder builder_(_fbb);
  builder_.add_summoner_id(summoner_id);
  builder_.add_friend_name(friend_name);
  return builder_.Finish();
}

struct SMsgNotifySearchFriendAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t friend_id() const { return GetField<uint64_t>(4, 0); }
  uint32_t friend_head_id() const { return GetField<uint32_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* friend_id */) &&
           VerifyField<uint32_t>(verifier, 6 /* friend_head_id */) &&
           verifier.EndTable();
  }
};

struct SMsgNotifySearchFriendAckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_friend_id(uint64_t friend_id) { fbb_.AddElement<uint64_t>(4, friend_id, 0); }
  void add_friend_head_id(uint32_t friend_head_id) { fbb_.AddElement<uint32_t>(6, friend_head_id, 0); }
  SMsgNotifySearchFriendAckBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SMsgNotifySearchFriendAckBuilder &operator=(const SMsgNotifySearchFriendAckBuilder &);
  flatbuffers::Offset<SMsgNotifySearchFriendAck> Finish() {
    auto o = flatbuffers::Offset<SMsgNotifySearchFriendAck>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<SMsgNotifySearchFriendAck> CreateSMsgNotifySearchFriendAck(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t friend_id = 0,
   uint32_t friend_head_id = 0) {
  SMsgNotifySearchFriendAckBuilder builder_(_fbb);
  builder_.add_friend_id(friend_id);
  builder_.add_friend_head_id(friend_head_id);
  return builder_.Finish();
}

struct FriendDetail FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t friend_id() const { return GetField<uint64_t>(4, 0); }
  uint32_t head_id() const { return GetField<uint32_t>(6, 0); }
  uint8_t status() const { return GetField<uint8_t>(8, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* friend_id */) &&
           VerifyField<uint32_t>(verifier, 6 /* head_id */) &&
           VerifyField<uint8_t>(verifier, 8 /* status */) &&
           verifier.EndTable();
  }
};

struct FriendDetailBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_friend_id(uint64_t friend_id) { fbb_.AddElement<uint64_t>(4, friend_id, 0); }
  void add_head_id(uint32_t head_id) { fbb_.AddElement<uint32_t>(6, head_id, 0); }
  void add_status(uint8_t status) { fbb_.AddElement<uint8_t>(8, status, 0); }
  FriendDetailBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FriendDetailBuilder &operator=(const FriendDetailBuilder &);
  flatbuffers::Offset<FriendDetail> Finish() {
    auto o = flatbuffers::Offset<FriendDetail>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<FriendDetail> CreateFriendDetail(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t friend_id = 0,
   uint32_t head_id = 0,
   uint8_t status = 0) {
  FriendDetailBuilder builder_(_fbb);
  builder_.add_friend_id(friend_id);
  builder_.add_head_id(head_id);
  builder_.add_status(status);
  return builder_.Finish();
}

struct SMsgFriendListReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t summoner_id() const { return GetField<uint64_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* summoner_id */) &&
           verifier.EndTable();
  }
};

struct SMsgFriendListReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_summoner_id(uint64_t summoner_id) { fbb_.AddElement<uint64_t>(4, summoner_id, 0); }
  SMsgFriendListReqBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SMsgFriendListReqBuilder &operator=(const SMsgFriendListReqBuilder &);
  flatbuffers::Offset<SMsgFriendListReq> Finish() {
    auto o = flatbuffers::Offset<SMsgFriendListReq>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<SMsgFriendListReq> CreateSMsgFriendListReq(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t summoner_id = 0) {
  SMsgFriendListReqBuilder builder_(_fbb);
  builder_.add_summoner_id(summoner_id);
  return builder_.Finish();
}

struct SMsgFriendListAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t summoner_id() const { return GetField<uint64_t>(4, 0); }
  const flatbuffers::Vector<flatbuffers::Offset<FriendDetail>> *friend_info() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FriendDetail>> *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* summoner_id */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* friend_info */) &&
           verifier.Verify(friend_info()) &&
           verifier.VerifyVectorOfTables(friend_info()) &&
           verifier.EndTable();
  }
};

struct SMsgFriendListAckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_summoner_id(uint64_t summoner_id) { fbb_.AddElement<uint64_t>(4, summoner_id, 0); }
  void add_friend_info(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FriendDetail>>> friend_info) { fbb_.AddOffset(6, friend_info); }
  SMsgFriendListAckBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SMsgFriendListAckBuilder &operator=(const SMsgFriendListAckBuilder &);
  flatbuffers::Offset<SMsgFriendListAck> Finish() {
    auto o = flatbuffers::Offset<SMsgFriendListAck>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<SMsgFriendListAck> CreateSMsgFriendListAck(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t summoner_id = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FriendDetail>>> friend_info = 0) {
  SMsgFriendListAckBuilder builder_(_fbb);
  builder_.add_summoner_id(summoner_id);
  builder_.add_friend_info(friend_info);
  return builder_.Finish();
}

struct SMsgApplyForFriendListReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t summoner_id() const { return GetField<uint64_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* summoner_id */) &&
           verifier.EndTable();
  }
};

struct SMsgApplyForFriendListReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_summoner_id(uint64_t summoner_id) { fbb_.AddElement<uint64_t>(4, summoner_id, 0); }
  SMsgApplyForFriendListReqBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SMsgApplyForFriendListReqBuilder &operator=(const SMsgApplyForFriendListReqBuilder &);
  flatbuffers::Offset<SMsgApplyForFriendListReq> Finish() {
    auto o = flatbuffers::Offset<SMsgApplyForFriendListReq>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<SMsgApplyForFriendListReq> CreateSMsgApplyForFriendListReq(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t summoner_id = 0) {
  SMsgApplyForFriendListReqBuilder builder_(_fbb);
  builder_.add_summoner_id(summoner_id);
  return builder_.Finish();
}

struct SMsgApplyForFriendListAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t summoner_id() const { return GetField<uint64_t>(4, 0); }
  const flatbuffers::Vector<flatbuffers::Offset<FriendDetail>> *friend_info() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FriendDetail>> *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* summoner_id */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* friend_info */) &&
           verifier.Verify(friend_info()) &&
           verifier.VerifyVectorOfTables(friend_info()) &&
           verifier.EndTable();
  }
};

struct SMsgApplyForFriendListAckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_summoner_id(uint64_t summoner_id) { fbb_.AddElement<uint64_t>(4, summoner_id, 0); }
  void add_friend_info(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FriendDetail>>> friend_info) { fbb_.AddOffset(6, friend_info); }
  SMsgApplyForFriendListAckBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SMsgApplyForFriendListAckBuilder &operator=(const SMsgApplyForFriendListAckBuilder &);
  flatbuffers::Offset<SMsgApplyForFriendListAck> Finish() {
    auto o = flatbuffers::Offset<SMsgApplyForFriendListAck>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<SMsgApplyForFriendListAck> CreateSMsgApplyForFriendListAck(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t summoner_id = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FriendDetail>>> friend_info = 0) {
  SMsgApplyForFriendListAckBuilder builder_(_fbb);
  builder_.add_summoner_id(summoner_id);
  builder_.add_friend_info(friend_info);
  return builder_.Finish();
}

struct SMsgVRFriendDetailInfoReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t summoner_id() const { return GetField<uint64_t>(4, 0); }
  uint64_t friend_id() const { return GetField<uint64_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* summoner_id */) &&
           VerifyField<uint64_t>(verifier, 6 /* friend_id */) &&
           verifier.EndTable();
  }
};

struct SMsgVRFriendDetailInfoReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_summoner_id(uint64_t summoner_id) { fbb_.AddElement<uint64_t>(4, summoner_id, 0); }
  void add_friend_id(uint64_t friend_id) { fbb_.AddElement<uint64_t>(6, friend_id, 0); }
  SMsgVRFriendDetailInfoReqBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SMsgVRFriendDetailInfoReqBuilder &operator=(const SMsgVRFriendDetailInfoReqBuilder &);
  flatbuffers::Offset<SMsgVRFriendDetailInfoReq> Finish() {
    auto o = flatbuffers::Offset<SMsgVRFriendDetailInfoReq>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<SMsgVRFriendDetailInfoReq> CreateSMsgVRFriendDetailInfoReq(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t summoner_id = 0,
   uint64_t friend_id = 0) {
  SMsgVRFriendDetailInfoReqBuilder builder_(_fbb);
  builder_.add_friend_id(friend_id);
  builder_.add_summoner_id(summoner_id);
  return builder_.Finish();
}

struct SMsgFriendDetailInfoReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t summoner_id() const { return GetField<uint64_t>(4, 0); }
  uint64_t friend_id() const { return GetField<uint64_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* summoner_id */) &&
           VerifyField<uint64_t>(verifier, 6 /* friend_id */) &&
           verifier.EndTable();
  }
};

struct SMsgFriendDetailInfoReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_summoner_id(uint64_t summoner_id) { fbb_.AddElement<uint64_t>(4, summoner_id, 0); }
  void add_friend_id(uint64_t friend_id) { fbb_.AddElement<uint64_t>(6, friend_id, 0); }
  SMsgFriendDetailInfoReqBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SMsgFriendDetailInfoReqBuilder &operator=(const SMsgFriendDetailInfoReqBuilder &);
  flatbuffers::Offset<SMsgFriendDetailInfoReq> Finish() {
    auto o = flatbuffers::Offset<SMsgFriendDetailInfoReq>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<SMsgFriendDetailInfoReq> CreateSMsgFriendDetailInfoReq(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t summoner_id = 0,
   uint64_t friend_id = 0) {
  SMsgFriendDetailInfoReqBuilder builder_(_fbb);
  builder_.add_friend_id(friend_id);
  builder_.add_summoner_id(summoner_id);
  return builder_.Finish();
}

struct SMsgFriendDetailInfoAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t summoner_id() const { return GetField<uint64_t>(4, 0); }
  uint64_t friend_id() const { return GetField<uint64_t>(6, 0); }
  uint32_t friend_head_id() const { return GetField<uint32_t>(8, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* summoner_id */) &&
           VerifyField<uint64_t>(verifier, 6 /* friend_id */) &&
           VerifyField<uint32_t>(verifier, 8 /* friend_head_id */) &&
           verifier.EndTable();
  }
};

struct SMsgFriendDetailInfoAckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_summoner_id(uint64_t summoner_id) { fbb_.AddElement<uint64_t>(4, summoner_id, 0); }
  void add_friend_id(uint64_t friend_id) { fbb_.AddElement<uint64_t>(6, friend_id, 0); }
  void add_friend_head_id(uint32_t friend_head_id) { fbb_.AddElement<uint32_t>(8, friend_head_id, 0); }
  SMsgFriendDetailInfoAckBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SMsgFriendDetailInfoAckBuilder &operator=(const SMsgFriendDetailInfoAckBuilder &);
  flatbuffers::Offset<SMsgFriendDetailInfoAck> Finish() {
    auto o = flatbuffers::Offset<SMsgFriendDetailInfoAck>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<SMsgFriendDetailInfoAck> CreateSMsgFriendDetailInfoAck(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t summoner_id = 0,
   uint64_t friend_id = 0,
   uint32_t friend_head_id = 0) {
  SMsgFriendDetailInfoAckBuilder builder_(_fbb);
  builder_.add_friend_id(friend_id);
  builder_.add_summoner_id(summoner_id);
  builder_.add_friend_head_id(friend_head_id);
  return builder_.Finish();
}

struct SMsgFriendStatusReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t summoner_id() const { return GetField<uint64_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* summoner_id */) &&
           verifier.EndTable();
  }
};

struct SMsgFriendStatusReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_summoner_id(uint64_t summoner_id) { fbb_.AddElement<uint64_t>(4, summoner_id, 0); }
  SMsgFriendStatusReqBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SMsgFriendStatusReqBuilder &operator=(const SMsgFriendStatusReqBuilder &);
  flatbuffers::Offset<SMsgFriendStatusReq> Finish() {
    auto o = flatbuffers::Offset<SMsgFriendStatusReq>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<SMsgFriendStatusReq> CreateSMsgFriendStatusReq(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t summoner_id = 0) {
  SMsgFriendStatusReqBuilder builder_(_fbb);
  builder_.add_summoner_id(summoner_id);
  return builder_.Finish();
}

struct SMsgNotifySummonerStatusToFriend FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t summoner_id() const { return GetField<uint64_t>(4, 0); }
  uint64_t friend_id() const { return GetField<uint64_t>(6, 0); }
  uint8_t summoner_status() const { return GetField<uint8_t>(8, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* summoner_id */) &&
           VerifyField<uint64_t>(verifier, 6 /* friend_id */) &&
           VerifyField<uint8_t>(verifier, 8 /* summoner_status */) &&
           verifier.EndTable();
  }
};

struct SMsgNotifySummonerStatusToFriendBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_summoner_id(uint64_t summoner_id) { fbb_.AddElement<uint64_t>(4, summoner_id, 0); }
  void add_friend_id(uint64_t friend_id) { fbb_.AddElement<uint64_t>(6, friend_id, 0); }
  void add_summoner_status(uint8_t summoner_status) { fbb_.AddElement<uint8_t>(8, summoner_status, 0); }
  SMsgNotifySummonerStatusToFriendBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SMsgNotifySummonerStatusToFriendBuilder &operator=(const SMsgNotifySummonerStatusToFriendBuilder &);
  flatbuffers::Offset<SMsgNotifySummonerStatusToFriend> Finish() {
    auto o = flatbuffers::Offset<SMsgNotifySummonerStatusToFriend>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<SMsgNotifySummonerStatusToFriend> CreateSMsgNotifySummonerStatusToFriend(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t summoner_id = 0,
   uint64_t friend_id = 0,
   uint8_t summoner_status = 0) {
  SMsgNotifySummonerStatusToFriendBuilder builder_(_fbb);
  builder_.add_friend_id(friend_id);
  builder_.add_summoner_id(summoner_id);
  builder_.add_summoner_status(summoner_status);
  return builder_.Finish();
}

struct SMsgFriendStatus FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t friend_id() const { return GetField<uint64_t>(4, 0); }
  int8_t friend_status() const { return GetField<int8_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* friend_id */) &&
           VerifyField<int8_t>(verifier, 6 /* friend_status */) &&
           verifier.EndTable();
  }
};

struct SMsgFriendStatusBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_friend_id(uint64_t friend_id) { fbb_.AddElement<uint64_t>(4, friend_id, 0); }
  void add_friend_status(int8_t friend_status) { fbb_.AddElement<int8_t>(6, friend_status, 0); }
  SMsgFriendStatusBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SMsgFriendStatusBuilder &operator=(const SMsgFriendStatusBuilder &);
  flatbuffers::Offset<SMsgFriendStatus> Finish() {
    auto o = flatbuffers::Offset<SMsgFriendStatus>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<SMsgFriendStatus> CreateSMsgFriendStatus(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t friend_id = 0,
   int8_t friend_status = 0) {
  SMsgFriendStatusBuilder builder_(_fbb);
  builder_.add_friend_id(friend_id);
  builder_.add_friend_status(friend_status);
  return builder_.Finish();
}

struct SMsgFriendStatusAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t summoner_id() const { return GetField<uint64_t>(4, 0); }
  const flatbuffers::Vector<flatbuffers::Offset<SMsgFriendStatus>> *friend_status() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<SMsgFriendStatus>> *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* summoner_id */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* friend_status */) &&
           verifier.Verify(friend_status()) &&
           verifier.VerifyVectorOfTables(friend_status()) &&
           verifier.EndTable();
  }
};

struct SMsgFriendStatusAckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_summoner_id(uint64_t summoner_id) { fbb_.AddElement<uint64_t>(4, summoner_id, 0); }
  void add_friend_status(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SMsgFriendStatus>>> friend_status) { fbb_.AddOffset(6, friend_status); }
  SMsgFriendStatusAckBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SMsgFriendStatusAckBuilder &operator=(const SMsgFriendStatusAckBuilder &);
  flatbuffers::Offset<SMsgFriendStatusAck> Finish() {
    auto o = flatbuffers::Offset<SMsgFriendStatusAck>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<SMsgFriendStatusAck> CreateSMsgFriendStatusAck(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t summoner_id = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SMsgFriendStatus>>> friend_status = 0) {
  SMsgFriendStatusAckBuilder builder_(_fbb);
  builder_.add_summoner_id(summoner_id);
  builder_.add_friend_status(friend_status);
  return builder_.Finish();
}

}  // namespace FlatBuffer
}  // namespace MobaGo

#endif  // FLATBUFFERS_GENERATED_INTER_MOBAGO_FLATBUFFER_H_

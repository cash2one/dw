// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inter_proto.proto

#ifndef PROTOBUF_inter_5fproto_2eproto__INCLUDED
#define PROTOBUF_inter_5fproto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_inter_5fproto_2eproto();
void protobuf_AssignDesc_inter_5fproto_2eproto();
void protobuf_ShutdownFile_inter_5fproto_2eproto();

class Player;

// ===================================================================

class Player : public ::google::protobuf::Message {
 public:
  Player();
  virtual ~Player();

  Player(const Player& from);

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Player& default_instance();

  void Swap(Player* other);

  // implements Message ----------------------------------------------

  Player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint64 account_id() const;
  inline void set_account_id(::google::protobuf::uint64 value);

  // required string summoner_name = 2;
  inline bool has_summoner_name() const;
  inline void clear_summoner_name();
  static const int kSummonerNameFieldNumber = 2;
  inline const ::std::string& summoner_name() const;
  inline void set_summoner_name(const ::std::string& value);
  inline void set_summoner_name(const char* value);
  inline void set_summoner_name(const char* value, size_t size);
  inline ::std::string* mutable_summoner_name();
  inline ::std::string* release_summoner_name();
  inline void set_allocated_summoner_name(::std::string* summoner_name);

  // optional uint32 head_id = 3;
  inline bool has_head_id() const;
  inline void clear_head_id();
  static const int kHeadIdFieldNumber = 3;
  inline ::google::protobuf::uint32 head_id() const;
  inline void set_head_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Proto.Player)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_summoner_name();
  inline void clear_has_summoner_name();
  inline void set_has_head_id();
  inline void clear_has_head_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 account_id_;
  ::std::string* summoner_name_;
  ::google::protobuf::uint32 head_id_;
  friend void  protobuf_AddDesc_inter_5fproto_2eproto();
  friend void protobuf_AssignDesc_inter_5fproto_2eproto();
  friend void protobuf_ShutdownFile_inter_5fproto_2eproto();

  void InitAsDefaultInstance();
  static Player* default_instance_;
};
// ===================================================================


// ===================================================================

// Player

// required uint64 account_id = 1;
inline bool Player::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Player::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Player::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Player::clear_account_id() {
  account_id_ = GOOGLE_ULONGLONG(0);
  clear_has_account_id();
}
inline ::google::protobuf::uint64 Player::account_id() const {
  // @@protoc_insertion_point(field_get:Proto.Player.account_id)
  return account_id_;
}
inline void Player::set_account_id(::google::protobuf::uint64 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.Player.account_id)
}

// required string summoner_name = 2;
inline bool Player::has_summoner_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Player::set_has_summoner_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Player::clear_has_summoner_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Player::clear_summoner_name() {
  if (summoner_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summoner_name_->clear();
  }
  clear_has_summoner_name();
}
inline const ::std::string& Player::summoner_name() const {
  // @@protoc_insertion_point(field_get:Proto.Player.summoner_name)
  return *summoner_name_;
}
inline void Player::set_summoner_name(const ::std::string& value) {
  set_has_summoner_name();
  if (summoner_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summoner_name_ = new ::std::string;
  }
  summoner_name_->assign(value);
  // @@protoc_insertion_point(field_set:Proto.Player.summoner_name)
}
inline void Player::set_summoner_name(const char* value) {
  set_has_summoner_name();
  if (summoner_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summoner_name_ = new ::std::string;
  }
  summoner_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Proto.Player.summoner_name)
}
inline void Player::set_summoner_name(const char* value, size_t size) {
  set_has_summoner_name();
  if (summoner_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summoner_name_ = new ::std::string;
  }
  summoner_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Proto.Player.summoner_name)
}
inline ::std::string* Player::mutable_summoner_name() {
  set_has_summoner_name();
  if (summoner_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summoner_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Proto.Player.summoner_name)
  return summoner_name_;
}
inline ::std::string* Player::release_summoner_name() {
  clear_has_summoner_name();
  if (summoner_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = summoner_name_;
    summoner_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Player::set_allocated_summoner_name(::std::string* summoner_name) {
  if (summoner_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete summoner_name_;
  }
  if (summoner_name) {
    set_has_summoner_name();
    summoner_name_ = summoner_name;
  } else {
    clear_has_summoner_name();
    summoner_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Proto.Player.summoner_name)
}

// optional uint32 head_id = 3;
inline bool Player::has_head_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Player::set_has_head_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Player::clear_has_head_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Player::clear_head_id() {
  head_id_ = 0u;
  clear_has_head_id();
}
inline ::google::protobuf::uint32 Player::head_id() const {
  // @@protoc_insertion_point(field_get:Proto.Player.head_id)
  return head_id_;
}
inline void Player::set_head_id(::google::protobuf::uint32 value) {
  set_has_head_id();
  head_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.Player.head_id)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_inter_5fproto_2eproto__INCLUDED

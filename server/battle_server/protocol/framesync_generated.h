// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FRAMESYNC_MOBAGO_FLATBUFFER_H_
#define FLATBUFFERS_GENERATED_FRAMESYNC_MOBAGO_FLATBUFFER_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"

namespace MobaGo {
namespace FlatBuffer {
struct MsgBody;
struct IntVec3;
}  // namespace FlatBuffer
}  // namespace MobaGo

namespace MobaGo {
namespace FlatBuffer {

struct MsgFrameSyncAction;
struct MsgFrameSyncDetail;
struct MsgClientFrameSyncReq;
struct MsgRepairFrameReq;
struct MsgReconnectionReq;
struct MsgReconnectionAck;
struct PBattleEndReportPlayer;
struct MsgReportBattleResultReq;
struct MsgBeforeBattleParamNty;
struct MsgBattleParamNty;
struct MsgBattleCountDownNty;

struct MsgFrameSyncAction FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint8_t bytType() const { return GetField<uint8_t>(4, 0); }
  const flatbuffers::Vector<uint8_t> *aData() const { return GetPointer<const flatbuffers::Vector<uint8_t> *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* bytType */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* aData */) &&
           verifier.Verify(aData()) &&
           verifier.EndTable();
  }
};

struct MsgFrameSyncActionBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_bytType(uint8_t bytType) { fbb_.AddElement<uint8_t>(4, bytType, 0); }
  void add_aData(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> aData) { fbb_.AddOffset(6, aData); }
  MsgFrameSyncActionBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgFrameSyncActionBuilder &operator=(const MsgFrameSyncActionBuilder &);
  flatbuffers::Offset<MsgFrameSyncAction> Finish() {
    auto o = flatbuffers::Offset<MsgFrameSyncAction>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<MsgFrameSyncAction> CreateMsgFrameSyncAction(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t bytType = 0,
   flatbuffers::Offset<flatbuffers::Vector<uint8_t>> aData = 0) {
  MsgFrameSyncActionBuilder builder_(_fbb);
  builder_.add_aData(aData);
  builder_.add_bytType(bytType);
  return builder_.Finish();
}

struct MsgFrameSyncDetail FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint32_t uFrameNo() const { return GetField<uint32_t>(4, 0); }
  const flatbuffers::Vector<flatbuffers::Offset<MsgFrameSyncAction>> *aFrameActions() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<MsgFrameSyncAction>> *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, 4 /* uFrameNo */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* aFrameActions */) &&
           verifier.Verify(aFrameActions()) &&
           verifier.VerifyVectorOfTables(aFrameActions()) &&
           verifier.EndTable();
  }
};

struct MsgFrameSyncDetailBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uFrameNo(uint32_t uFrameNo) { fbb_.AddElement<uint32_t>(4, uFrameNo, 0); }
  void add_aFrameActions(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MsgFrameSyncAction>>> aFrameActions) { fbb_.AddOffset(6, aFrameActions); }
  MsgFrameSyncDetailBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgFrameSyncDetailBuilder &operator=(const MsgFrameSyncDetailBuilder &);
  flatbuffers::Offset<MsgFrameSyncDetail> Finish() {
    auto o = flatbuffers::Offset<MsgFrameSyncDetail>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<MsgFrameSyncDetail> CreateMsgFrameSyncDetail(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t uFrameNo = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MsgFrameSyncAction>>> aFrameActions = 0) {
  MsgFrameSyncDetailBuilder builder_(_fbb);
  builder_.add_aFrameActions(aFrameActions);
  builder_.add_uFrameNo(uFrameNo);
  return builder_.Finish();
}

struct MsgClientFrameSyncReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint32_t uSeq() const { return GetField<uint32_t>(4, 0); }
  const MsgFrameSyncAction *oAction() const { return GetPointer<const MsgFrameSyncAction *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, 4 /* uSeq */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* oAction */) &&
           verifier.VerifyTable(oAction()) &&
           verifier.EndTable();
  }
};

struct MsgClientFrameSyncReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uSeq(uint32_t uSeq) { fbb_.AddElement<uint32_t>(4, uSeq, 0); }
  void add_oAction(flatbuffers::Offset<MsgFrameSyncAction> oAction) { fbb_.AddOffset(6, oAction); }
  MsgClientFrameSyncReqBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgClientFrameSyncReqBuilder &operator=(const MsgClientFrameSyncReqBuilder &);
  flatbuffers::Offset<MsgClientFrameSyncReq> Finish() {
    auto o = flatbuffers::Offset<MsgClientFrameSyncReq>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<MsgClientFrameSyncReq> CreateMsgClientFrameSyncReq(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t uSeq = 0,
   flatbuffers::Offset<MsgFrameSyncAction> oAction = 0) {
  MsgClientFrameSyncReqBuilder builder_(_fbb);
  builder_.add_oAction(oAction);
  builder_.add_uSeq(uSeq);
  return builder_.Finish();
}

struct MsgRepairFrameReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::Vector<uint32_t> *aFrames() const { return GetPointer<const flatbuffers::Vector<uint32_t> *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* aFrames */) &&
           verifier.Verify(aFrames()) &&
           verifier.EndTable();
  }
};

struct MsgRepairFrameReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_aFrames(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> aFrames) { fbb_.AddOffset(4, aFrames); }
  MsgRepairFrameReqBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgRepairFrameReqBuilder &operator=(const MsgRepairFrameReqBuilder &);
  flatbuffers::Offset<MsgRepairFrameReq> Finish() {
    auto o = flatbuffers::Offset<MsgRepairFrameReq>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgRepairFrameReq> CreateMsgRepairFrameReq(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<uint32_t>> aFrames = 0) {
  MsgRepairFrameReqBuilder builder_(_fbb);
  builder_.add_aFrames(aFrames);
  return builder_.Finish();
}

struct MsgReconnectionReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint8_t bytIsNew() const { return GetField<uint8_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* bytIsNew */) &&
           verifier.EndTable();
  }
};

struct MsgReconnectionReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_bytIsNew(uint8_t bytIsNew) { fbb_.AddElement<uint8_t>(4, bytIsNew, 0); }
  MsgReconnectionReqBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgReconnectionReqBuilder &operator=(const MsgReconnectionReqBuilder &);
  flatbuffers::Offset<MsgReconnectionReq> Finish() {
    auto o = flatbuffers::Offset<MsgReconnectionReq>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgReconnectionReq> CreateMsgReconnectionReq(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t bytIsNew = 0) {
  MsgReconnectionReqBuilder builder_(_fbb);
  builder_.add_bytIsNew(bytIsNew);
  return builder_.Finish();
}

struct MsgReconnectionAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint8_t bytIsEOF() const { return GetField<uint8_t>(4, 0); }
  const flatbuffers::Vector<uint8_t> *oFrameData() const { return GetPointer<const flatbuffers::Vector<uint8_t> *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* bytIsEOF */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* oFrameData */) &&
           verifier.Verify(oFrameData()) &&
           verifier.EndTable();
  }
};

struct MsgReconnectionAckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_bytIsEOF(uint8_t bytIsEOF) { fbb_.AddElement<uint8_t>(4, bytIsEOF, 0); }
  void add_oFrameData(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> oFrameData) { fbb_.AddOffset(6, oFrameData); }
  MsgReconnectionAckBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgReconnectionAckBuilder &operator=(const MsgReconnectionAckBuilder &);
  flatbuffers::Offset<MsgReconnectionAck> Finish() {
    auto o = flatbuffers::Offset<MsgReconnectionAck>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<MsgReconnectionAck> CreateMsgReconnectionAck(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t bytIsEOF = 0,
   flatbuffers::Offset<flatbuffers::Vector<uint8_t>> oFrameData = 0) {
  MsgReconnectionAckBuilder builder_(_fbb);
  builder_.add_oFrameData(oFrameData);
  builder_.add_bytIsEOF(bytIsEOF);
  return builder_.Finish();
}

struct PBattleEndReportPlayer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t account_id() const { return GetField<uint64_t>(4, 0); }
  uint16_t kill_num() const { return GetField<uint16_t>(6, 0); }
  uint16_t death_num() const { return GetField<uint16_t>(8, 0); }
  uint16_t assist_num() const { return GetField<uint16_t>(10, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* account_id */) &&
           VerifyField<uint16_t>(verifier, 6 /* kill_num */) &&
           VerifyField<uint16_t>(verifier, 8 /* death_num */) &&
           VerifyField<uint16_t>(verifier, 10 /* assist_num */) &&
           verifier.EndTable();
  }
};

struct PBattleEndReportPlayerBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_account_id(uint64_t account_id) { fbb_.AddElement<uint64_t>(4, account_id, 0); }
  void add_kill_num(uint16_t kill_num) { fbb_.AddElement<uint16_t>(6, kill_num, 0); }
  void add_death_num(uint16_t death_num) { fbb_.AddElement<uint16_t>(8, death_num, 0); }
  void add_assist_num(uint16_t assist_num) { fbb_.AddElement<uint16_t>(10, assist_num, 0); }
  PBattleEndReportPlayerBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PBattleEndReportPlayerBuilder &operator=(const PBattleEndReportPlayerBuilder &);
  flatbuffers::Offset<PBattleEndReportPlayer> Finish() {
    auto o = flatbuffers::Offset<PBattleEndReportPlayer>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<PBattleEndReportPlayer> CreatePBattleEndReportPlayer(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t account_id = 0,
   uint16_t kill_num = 0,
   uint16_t death_num = 0,
   uint16_t assist_num = 0) {
  PBattleEndReportPlayerBuilder builder_(_fbb);
  builder_.add_account_id(account_id);
  builder_.add_assist_num(assist_num);
  builder_.add_death_num(death_num);
  builder_.add_kill_num(kill_num);
  return builder_.Finish();
}

struct MsgReportBattleResultReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint8_t win_team() const { return GetField<uint8_t>(4, 0); }
  const flatbuffers::Vector<flatbuffers::Offset<PBattleEndReportPlayer>> *player_info() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<PBattleEndReportPlayer>> *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* win_team */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* player_info */) &&
           verifier.Verify(player_info()) &&
           verifier.VerifyVectorOfTables(player_info()) &&
           verifier.EndTable();
  }
};

struct MsgReportBattleResultReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_win_team(uint8_t win_team) { fbb_.AddElement<uint8_t>(4, win_team, 0); }
  void add_player_info(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<PBattleEndReportPlayer>>> player_info) { fbb_.AddOffset(6, player_info); }
  MsgReportBattleResultReqBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgReportBattleResultReqBuilder &operator=(const MsgReportBattleResultReqBuilder &);
  flatbuffers::Offset<MsgReportBattleResultReq> Finish() {
    auto o = flatbuffers::Offset<MsgReportBattleResultReq>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<MsgReportBattleResultReq> CreateMsgReportBattleResultReq(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t win_team = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<PBattleEndReportPlayer>>> player_info = 0) {
  MsgReportBattleResultReqBuilder builder_(_fbb);
  builder_.add_player_info(player_info);
  builder_.add_win_team(win_team);
  return builder_.Finish();
}

struct MsgBeforeBattleParamNty FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint8_t select_hero_timeout() const { return GetField<uint8_t>(4, 0); }
  uint8_t buy_skin_timeout() const { return GetField<uint8_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* select_hero_timeout */) &&
           VerifyField<uint8_t>(verifier, 6 /* buy_skin_timeout */) &&
           verifier.EndTable();
  }
};

struct MsgBeforeBattleParamNtyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_select_hero_timeout(uint8_t select_hero_timeout) { fbb_.AddElement<uint8_t>(4, select_hero_timeout, 0); }
  void add_buy_skin_timeout(uint8_t buy_skin_timeout) { fbb_.AddElement<uint8_t>(6, buy_skin_timeout, 0); }
  MsgBeforeBattleParamNtyBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgBeforeBattleParamNtyBuilder &operator=(const MsgBeforeBattleParamNtyBuilder &);
  flatbuffers::Offset<MsgBeforeBattleParamNty> Finish() {
    auto o = flatbuffers::Offset<MsgBeforeBattleParamNty>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<MsgBeforeBattleParamNty> CreateMsgBeforeBattleParamNty(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t select_hero_timeout = 0,
   uint8_t buy_skin_timeout = 0) {
  MsgBeforeBattleParamNtyBuilder builder_(_fbb);
  builder_.add_buy_skin_timeout(buy_skin_timeout);
  builder_.add_select_hero_timeout(select_hero_timeout);
  return builder_.Finish();
}

struct MsgBattleParamNty FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint8_t frame_delta() const { return GetField<uint8_t>(4, 0); }
  uint8_t pre_act_frames() const { return GetField<uint8_t>(6, 0); }
  uint32_t random_seed() const { return GetField<uint32_t>(8, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* frame_delta */) &&
           VerifyField<uint8_t>(verifier, 6 /* pre_act_frames */) &&
           VerifyField<uint32_t>(verifier, 8 /* random_seed */) &&
           verifier.EndTable();
  }
};

struct MsgBattleParamNtyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_frame_delta(uint8_t frame_delta) { fbb_.AddElement<uint8_t>(4, frame_delta, 0); }
  void add_pre_act_frames(uint8_t pre_act_frames) { fbb_.AddElement<uint8_t>(6, pre_act_frames, 0); }
  void add_random_seed(uint32_t random_seed) { fbb_.AddElement<uint32_t>(8, random_seed, 0); }
  MsgBattleParamNtyBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgBattleParamNtyBuilder &operator=(const MsgBattleParamNtyBuilder &);
  flatbuffers::Offset<MsgBattleParamNty> Finish() {
    auto o = flatbuffers::Offset<MsgBattleParamNty>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<MsgBattleParamNty> CreateMsgBattleParamNty(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t frame_delta = 0,
   uint8_t pre_act_frames = 0,
   uint32_t random_seed = 0) {
  MsgBattleParamNtyBuilder builder_(_fbb);
  builder_.add_random_seed(random_seed);
  builder_.add_pre_act_frames(pre_act_frames);
  builder_.add_frame_delta(frame_delta);
  return builder_.Finish();
}

struct MsgBattleCountDownNty FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint8_t count_down_time() const { return GetField<uint8_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* count_down_time */) &&
           verifier.EndTable();
  }
};

struct MsgBattleCountDownNtyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_count_down_time(uint8_t count_down_time) { fbb_.AddElement<uint8_t>(4, count_down_time, 0); }
  MsgBattleCountDownNtyBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgBattleCountDownNtyBuilder &operator=(const MsgBattleCountDownNtyBuilder &);
  flatbuffers::Offset<MsgBattleCountDownNty> Finish() {
    auto o = flatbuffers::Offset<MsgBattleCountDownNty>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgBattleCountDownNty> CreateMsgBattleCountDownNty(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t count_down_time = 0) {
  MsgBattleCountDownNtyBuilder builder_(_fbb);
  builder_.add_count_down_time(count_down_time);
  return builder_.Finish();
}

}  // namespace FlatBuffer
}  // namespace MobaGo

#endif  // FLATBUFFERS_GENERATED_FRAMESYNC_MOBAGO_FLATBUFFER_H_

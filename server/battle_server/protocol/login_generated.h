// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_LOGIN_MOBAGO_FLATBUFFER_H_
#define FLATBUFFERS_GENERATED_LOGIN_MOBAGO_FLATBUFFER_H_

#include "flatbuffers/flatbuffers.h"


namespace MobaGo {
namespace FlatBuffer {

struct MsgLoginReq;
struct ServerInfo_t;
struct MsgServerListAck;
struct MsgChooseServerReq;
struct MsgChooseServerAck;
struct MsgVRLoginReq;
struct MsgVRLoginAck;
struct MsgReqSummonerInfoAck;
struct MsgCreateSummonerReq;

enum Login {
  Login_Device = 1,
  Login_Account = 2,
  Login_TieUser = 3,
  Login_TieDevice = 4,
  Login_UnTieDevice = 5,
  Login_NewAccount = 6,
  Login_Channel_LY = 1001,
  Login_Channel_TBT = 1002,
  Login_Channel_KY = 1003,
  Login_Channel_ITOOLS = 1004,
  Login_Channel_PP = 1005,
  Login_Channel_I4 = 1006,
  Login_Channel_91 = 1007,
  Login_Channel_SeaHorse = 1008,
  Login_Channel_Android_UC = 1101,
  Login_Channel_Android_360 = 1102,
  Login_Channel_Android_BaiDu = 1103,
  Login_Channel_Android_XM = 1104,
  Login_Channel_Android_WDJ = 1105,
  Login_Channel_Android_LY = 1106,
  Login_Channel_Android_4399 = 1107
};

struct MsgLoginReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint32_t channel_type() const { return GetField<uint32_t>(4, 0); }
  const flatbuffers::String *client_version() const { return GetPointer<const flatbuffers::String *>(6); }
  uint8_t is_play() const { return GetField<uint8_t>(8, 0); }
  uint32_t language() const { return GetField<uint32_t>(10, 0); }
  const flatbuffers::String *account_name() const { return GetPointer<const flatbuffers::String *>(12); }
  const flatbuffers::String *device_name() const { return GetPointer<const flatbuffers::String *>(14); }
  const flatbuffers::String *password() const { return GetPointer<const flatbuffers::String *>(16); }
  uint32_t platform_id() const { return GetField<uint32_t>(18, 0); }
  const flatbuffers::String *session_code() const { return GetPointer<const flatbuffers::String *>(20); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, 4 /* channel_type */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* client_version */) &&
           verifier.Verify(client_version()) &&
           VerifyField<uint8_t>(verifier, 8 /* is_play */) &&
           VerifyField<uint32_t>(verifier, 10 /* language */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* account_name */) &&
           verifier.Verify(account_name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 14 /* device_name */) &&
           verifier.Verify(device_name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 16 /* password */) &&
           verifier.Verify(password()) &&
           VerifyField<uint32_t>(verifier, 18 /* platform_id */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 20 /* session_code */) &&
           verifier.Verify(session_code()) &&
           verifier.EndTable();
  }
};

struct MsgLoginReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_channel_type(uint32_t channel_type) { fbb_.AddElement<uint32_t>(4, channel_type, 0); }
  void add_client_version(flatbuffers::Offset<flatbuffers::String> client_version) { fbb_.AddOffset(6, client_version); }
  void add_is_play(uint8_t is_play) { fbb_.AddElement<uint8_t>(8, is_play, 0); }
  void add_language(uint32_t language) { fbb_.AddElement<uint32_t>(10, language, 0); }
  void add_account_name(flatbuffers::Offset<flatbuffers::String> account_name) { fbb_.AddOffset(12, account_name); }
  void add_device_name(flatbuffers::Offset<flatbuffers::String> device_name) { fbb_.AddOffset(14, device_name); }
  void add_password(flatbuffers::Offset<flatbuffers::String> password) { fbb_.AddOffset(16, password); }
  void add_platform_id(uint32_t platform_id) { fbb_.AddElement<uint32_t>(18, platform_id, 0); }
  void add_session_code(flatbuffers::Offset<flatbuffers::String> session_code) { fbb_.AddOffset(20, session_code); }
  MsgLoginReqBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgLoginReqBuilder &operator=(const MsgLoginReqBuilder &);
  flatbuffers::Offset<MsgLoginReq> Finish() {
    auto o = flatbuffers::Offset<MsgLoginReq>(fbb_.EndTable(start_, 9));
    return o;
  }
};

inline flatbuffers::Offset<MsgLoginReq> CreateMsgLoginReq(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t channel_type = 0,
   flatbuffers::Offset<flatbuffers::String> client_version = 0,
   uint8_t is_play = 0,
   uint32_t language = 0,
   flatbuffers::Offset<flatbuffers::String> account_name = 0,
   flatbuffers::Offset<flatbuffers::String> device_name = 0,
   flatbuffers::Offset<flatbuffers::String> password = 0,
   uint32_t platform_id = 0,
   flatbuffers::Offset<flatbuffers::String> session_code = 0) {
  MsgLoginReqBuilder builder_(_fbb);
  builder_.add_session_code(session_code);
  builder_.add_platform_id(platform_id);
  builder_.add_password(password);
  builder_.add_device_name(device_name);
  builder_.add_account_name(account_name);
  builder_.add_language(language);
  builder_.add_client_version(client_version);
  builder_.add_channel_type(channel_type);
  builder_.add_is_play(is_play);
  return builder_.Finish();
}

struct ServerInfo_t FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint32_t server_id() const { return GetField<uint32_t>(4, 0); }
  const flatbuffers::String *server_name() const { return GetPointer<const flatbuffers::String *>(6); }
  int8_t is_logined() const { return GetField<int8_t>(8, 0); }
  uint32_t area_index() const { return GetField<uint32_t>(10, 0); }
  int8_t stauts() const { return GetField<int8_t>(12, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, 4 /* server_id */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* server_name */) &&
           verifier.Verify(server_name()) &&
           VerifyField<int8_t>(verifier, 8 /* is_logined */) &&
           VerifyField<uint32_t>(verifier, 10 /* area_index */) &&
           VerifyField<int8_t>(verifier, 12 /* stauts */) &&
           verifier.EndTable();
  }
};

struct ServerInfo_tBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_server_id(uint32_t server_id) { fbb_.AddElement<uint32_t>(4, server_id, 0); }
  void add_server_name(flatbuffers::Offset<flatbuffers::String> server_name) { fbb_.AddOffset(6, server_name); }
  void add_is_logined(int8_t is_logined) { fbb_.AddElement<int8_t>(8, is_logined, 0); }
  void add_area_index(uint32_t area_index) { fbb_.AddElement<uint32_t>(10, area_index, 0); }
  void add_stauts(int8_t stauts) { fbb_.AddElement<int8_t>(12, stauts, 0); }
  ServerInfo_tBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ServerInfo_tBuilder &operator=(const ServerInfo_tBuilder &);
  flatbuffers::Offset<ServerInfo_t> Finish() {
    auto o = flatbuffers::Offset<ServerInfo_t>(fbb_.EndTable(start_, 5));
    return o;
  }
};

inline flatbuffers::Offset<ServerInfo_t> CreateServerInfo_t(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t server_id = 0,
   flatbuffers::Offset<flatbuffers::String> server_name = 0,
   int8_t is_logined = 0,
   uint32_t area_index = 0,
   int8_t stauts = 0) {
  ServerInfo_tBuilder builder_(_fbb);
  builder_.add_area_index(area_index);
  builder_.add_server_name(server_name);
  builder_.add_server_id(server_id);
  builder_.add_stauts(stauts);
  builder_.add_is_logined(is_logined);
  return builder_.Finish();
}

struct MsgServerListAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::Vector<flatbuffers::Offset<ServerInfo_t>> *server_list() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ServerInfo_t>> *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* server_list */) &&
           verifier.Verify(server_list()) &&
           verifier.VerifyVectorOfTables(server_list()) &&
           verifier.EndTable();
  }
};

struct MsgServerListAckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_server_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ServerInfo_t>>> server_list) { fbb_.AddOffset(4, server_list); }
  MsgServerListAckBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgServerListAckBuilder &operator=(const MsgServerListAckBuilder &);
  flatbuffers::Offset<MsgServerListAck> Finish() {
    auto o = flatbuffers::Offset<MsgServerListAck>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgServerListAck> CreateMsgServerListAck(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ServerInfo_t>>> server_list = 0) {
  MsgServerListAckBuilder builder_(_fbb);
  builder_.add_server_list(server_list);
  return builder_.Finish();
}

struct MsgChooseServerReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint32_t server_id() const { return GetField<uint32_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, 4 /* server_id */) &&
           verifier.EndTable();
  }
};

struct MsgChooseServerReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_server_id(uint32_t server_id) { fbb_.AddElement<uint32_t>(4, server_id, 0); }
  MsgChooseServerReqBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgChooseServerReqBuilder &operator=(const MsgChooseServerReqBuilder &);
  flatbuffers::Offset<MsgChooseServerReq> Finish() {
    auto o = flatbuffers::Offset<MsgChooseServerReq>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgChooseServerReq> CreateMsgChooseServerReq(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t server_id = 0) {
  MsgChooseServerReqBuilder builder_(_fbb);
  builder_.add_server_id(server_id);
  return builder_.Finish();
}

struct MsgChooseServerAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t user_id() const { return GetField<uint64_t>(4, 0); }
  const flatbuffers::String *ip() const { return GetPointer<const flatbuffers::String *>(6); }
  uint32_t port() const { return GetField<uint32_t>(8, 0); }
  const flatbuffers::String *session_key() const { return GetPointer<const flatbuffers::String *>(10); }
  const flatbuffers::String *announcement() const { return GetPointer<const flatbuffers::String *>(12); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* user_id */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* ip */) &&
           verifier.Verify(ip()) &&
           VerifyField<uint32_t>(verifier, 8 /* port */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* session_key */) &&
           verifier.Verify(session_key()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* announcement */) &&
           verifier.Verify(announcement()) &&
           verifier.EndTable();
  }
};

struct MsgChooseServerAckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_user_id(uint64_t user_id) { fbb_.AddElement<uint64_t>(4, user_id, 0); }
  void add_ip(flatbuffers::Offset<flatbuffers::String> ip) { fbb_.AddOffset(6, ip); }
  void add_port(uint32_t port) { fbb_.AddElement<uint32_t>(8, port, 0); }
  void add_session_key(flatbuffers::Offset<flatbuffers::String> session_key) { fbb_.AddOffset(10, session_key); }
  void add_announcement(flatbuffers::Offset<flatbuffers::String> announcement) { fbb_.AddOffset(12, announcement); }
  MsgChooseServerAckBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgChooseServerAckBuilder &operator=(const MsgChooseServerAckBuilder &);
  flatbuffers::Offset<MsgChooseServerAck> Finish() {
    auto o = flatbuffers::Offset<MsgChooseServerAck>(fbb_.EndTable(start_, 5));
    return o;
  }
};

inline flatbuffers::Offset<MsgChooseServerAck> CreateMsgChooseServerAck(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t user_id = 0,
   flatbuffers::Offset<flatbuffers::String> ip = 0,
   uint32_t port = 0,
   flatbuffers::Offset<flatbuffers::String> session_key = 0,
   flatbuffers::Offset<flatbuffers::String> announcement = 0) {
  MsgChooseServerAckBuilder builder_(_fbb);
  builder_.add_user_id(user_id);
  builder_.add_announcement(announcement);
  builder_.add_session_key(session_key);
  builder_.add_port(port);
  builder_.add_ip(ip);
  return builder_.Finish();
}

struct MsgVRLoginReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *session_key() const { return GetPointer<const flatbuffers::String *>(4); }
  uint64_t account_id() const { return GetField<uint64_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* session_key */) &&
           verifier.Verify(session_key()) &&
           VerifyField<uint64_t>(verifier, 6 /* account_id */) &&
           verifier.EndTable();
  }
};

struct MsgVRLoginReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_session_key(flatbuffers::Offset<flatbuffers::String> session_key) { fbb_.AddOffset(4, session_key); }
  void add_account_id(uint64_t account_id) { fbb_.AddElement<uint64_t>(6, account_id, 0); }
  MsgVRLoginReqBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgVRLoginReqBuilder &operator=(const MsgVRLoginReqBuilder &);
  flatbuffers::Offset<MsgVRLoginReq> Finish() {
    auto o = flatbuffers::Offset<MsgVRLoginReq>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<MsgVRLoginReq> CreateMsgVRLoginReq(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> session_key = 0,
   uint64_t account_id = 0) {
  MsgVRLoginReqBuilder builder_(_fbb);
  builder_.add_account_id(account_id);
  builder_.add_session_key(session_key);
  return builder_.Finish();
}

struct MsgVRLoginAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int8_t is_in_battle() const { return GetField<int8_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, 4 /* is_in_battle */) &&
           verifier.EndTable();
  }
};

struct MsgVRLoginAckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_is_in_battle(int8_t is_in_battle) { fbb_.AddElement<int8_t>(4, is_in_battle, 0); }
  MsgVRLoginAckBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgVRLoginAckBuilder &operator=(const MsgVRLoginAckBuilder &);
  flatbuffers::Offset<MsgVRLoginAck> Finish() {
    auto o = flatbuffers::Offset<MsgVRLoginAck>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgVRLoginAck> CreateMsgVRLoginAck(flatbuffers::FlatBufferBuilder &_fbb,
   int8_t is_in_battle = 0) {
  MsgVRLoginAckBuilder builder_(_fbb);
  builder_.add_is_in_battle(is_in_battle);
  return builder_.Finish();
}

struct MsgReqSummonerInfoAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *summoner_name() const { return GetPointer<const flatbuffers::String *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* summoner_name */) &&
           verifier.Verify(summoner_name()) &&
           verifier.EndTable();
  }
};

struct MsgReqSummonerInfoAckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_summoner_name(flatbuffers::Offset<flatbuffers::String> summoner_name) { fbb_.AddOffset(4, summoner_name); }
  MsgReqSummonerInfoAckBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgReqSummonerInfoAckBuilder &operator=(const MsgReqSummonerInfoAckBuilder &);
  flatbuffers::Offset<MsgReqSummonerInfoAck> Finish() {
    auto o = flatbuffers::Offset<MsgReqSummonerInfoAck>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgReqSummonerInfoAck> CreateMsgReqSummonerInfoAck(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> summoner_name = 0) {
  MsgReqSummonerInfoAckBuilder builder_(_fbb);
  builder_.add_summoner_name(summoner_name);
  return builder_.Finish();
}

struct MsgCreateSummonerReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *summoner_name() const { return GetPointer<const flatbuffers::String *>(4); }
  int8_t head_id() const { return GetField<int8_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* summoner_name */) &&
           verifier.Verify(summoner_name()) &&
           VerifyField<int8_t>(verifier, 6 /* head_id */) &&
           verifier.EndTable();
  }
};

struct MsgCreateSummonerReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_summoner_name(flatbuffers::Offset<flatbuffers::String> summoner_name) { fbb_.AddOffset(4, summoner_name); }
  void add_head_id(int8_t head_id) { fbb_.AddElement<int8_t>(6, head_id, 0); }
  MsgCreateSummonerReqBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgCreateSummonerReqBuilder &operator=(const MsgCreateSummonerReqBuilder &);
  flatbuffers::Offset<MsgCreateSummonerReq> Finish() {
    auto o = flatbuffers::Offset<MsgCreateSummonerReq>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<MsgCreateSummonerReq> CreateMsgCreateSummonerReq(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> summoner_name = 0,
   int8_t head_id = 0) {
  MsgCreateSummonerReqBuilder builder_(_fbb);
  builder_.add_summoner_name(summoner_name);
  builder_.add_head_id(head_id);
  return builder_.Finish();
}

}  // namespace FlatBuffer
}  // namespace MobaGo

#endif  // FLATBUFFERS_GENERATED_LOGIN_MOBAGO_FLATBUFFER_H_

// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_BATTLE_MOBAGO_FLATBUFFER_H_
#define FLATBUFFERS_GENERATED_BATTLE_MOBAGO_FLATBUFFER_H_

#include "flatbuffers/flatbuffers.h"


namespace MobaGo {
namespace FlatBuffer {

struct MsgEnterBattleReq;
struct BattlePlayerInfo;
struct MsgEnterBattleAck;
struct MsgReEnterBattleReq;
struct MsgReEnterBattleAck;
struct MsgSelectHeroReq;
struct MsgSelectHeroAck;
struct MsgConfirmHeroReq;
struct MsgConfirmHeroAck;

struct MsgEnterBattleReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t user_id() const { return GetField<uint64_t>(4, 0); }
  const flatbuffers::String *session_key() const { return GetPointer<const flatbuffers::String *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* user_id */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* session_key */) &&
           verifier.Verify(session_key()) &&
           verifier.EndTable();
  }
};

struct MsgEnterBattleReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_user_id(uint64_t user_id) { fbb_.AddElement<uint64_t>(4, user_id, 0); }
  void add_session_key(flatbuffers::Offset<flatbuffers::String> session_key) { fbb_.AddOffset(6, session_key); }
  MsgEnterBattleReqBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgEnterBattleReqBuilder &operator=(const MsgEnterBattleReqBuilder &);
  flatbuffers::Offset<MsgEnterBattleReq> Finish() {
    auto o = flatbuffers::Offset<MsgEnterBattleReq>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<MsgEnterBattleReq> CreateMsgEnterBattleReq(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t user_id = 0,
   flatbuffers::Offset<flatbuffers::String> session_key = 0) {
  MsgEnterBattleReqBuilder builder_(_fbb);
  builder_.add_user_id(user_id);
  builder_.add_session_key(session_key);
  return builder_.Finish();
}

struct BattlePlayerInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t player_id() const { return GetField<uint64_t>(4, 0); }
  const flatbuffers::String *player_name() const { return GetPointer<const flatbuffers::String *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* player_id */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* player_name */) &&
           verifier.Verify(player_name()) &&
           verifier.EndTable();
  }
};

struct BattlePlayerInfoBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_player_id(uint64_t player_id) { fbb_.AddElement<uint64_t>(4, player_id, 0); }
  void add_player_name(flatbuffers::Offset<flatbuffers::String> player_name) { fbb_.AddOffset(6, player_name); }
  BattlePlayerInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  BattlePlayerInfoBuilder &operator=(const BattlePlayerInfoBuilder &);
  flatbuffers::Offset<BattlePlayerInfo> Finish() {
    auto o = flatbuffers::Offset<BattlePlayerInfo>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<BattlePlayerInfo> CreateBattlePlayerInfo(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t player_id = 0,
   flatbuffers::Offset<flatbuffers::String> player_name = 0) {
  BattlePlayerInfoBuilder builder_(_fbb);
  builder_.add_player_id(player_id);
  builder_.add_player_name(player_name);
  return builder_.Finish();
}

struct MsgEnterBattleAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::Vector<flatbuffers::Offset<BattlePlayerInfo>> *player_list() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<BattlePlayerInfo>> *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* player_list */) &&
           verifier.Verify(player_list()) &&
           verifier.VerifyVectorOfTables(player_list()) &&
           verifier.EndTable();
  }
};

struct MsgEnterBattleAckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_player_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<BattlePlayerInfo>>> player_list) { fbb_.AddOffset(4, player_list); }
  MsgEnterBattleAckBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgEnterBattleAckBuilder &operator=(const MsgEnterBattleAckBuilder &);
  flatbuffers::Offset<MsgEnterBattleAck> Finish() {
    auto o = flatbuffers::Offset<MsgEnterBattleAck>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgEnterBattleAck> CreateMsgEnterBattleAck(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<BattlePlayerInfo>>> player_list = 0) {
  MsgEnterBattleAckBuilder builder_(_fbb);
  builder_.add_player_list(player_list);
  return builder_.Finish();
}

struct MsgReEnterBattleReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t user_id() const { return GetField<uint64_t>(4, 0); }
  const flatbuffers::String *session_key() const { return GetPointer<const flatbuffers::String *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* user_id */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* session_key */) &&
           verifier.Verify(session_key()) &&
           verifier.EndTable();
  }
};

struct MsgReEnterBattleReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_user_id(uint64_t user_id) { fbb_.AddElement<uint64_t>(4, user_id, 0); }
  void add_session_key(flatbuffers::Offset<flatbuffers::String> session_key) { fbb_.AddOffset(6, session_key); }
  MsgReEnterBattleReqBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgReEnterBattleReqBuilder &operator=(const MsgReEnterBattleReqBuilder &);
  flatbuffers::Offset<MsgReEnterBattleReq> Finish() {
    auto o = flatbuffers::Offset<MsgReEnterBattleReq>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<MsgReEnterBattleReq> CreateMsgReEnterBattleReq(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t user_id = 0,
   flatbuffers::Offset<flatbuffers::String> session_key = 0) {
  MsgReEnterBattleReqBuilder builder_(_fbb);
  builder_.add_user_id(user_id);
  builder_.add_session_key(session_key);
  return builder_.Finish();
}

struct MsgReEnterBattleAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int8_t result() const { return GetField<int8_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, 4 /* result */) &&
           verifier.EndTable();
  }
};

struct MsgReEnterBattleAckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_result(int8_t result) { fbb_.AddElement<int8_t>(4, result, 0); }
  MsgReEnterBattleAckBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgReEnterBattleAckBuilder &operator=(const MsgReEnterBattleAckBuilder &);
  flatbuffers::Offset<MsgReEnterBattleAck> Finish() {
    auto o = flatbuffers::Offset<MsgReEnterBattleAck>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgReEnterBattleAck> CreateMsgReEnterBattleAck(flatbuffers::FlatBufferBuilder &_fbb,
   int8_t result = 0) {
  MsgReEnterBattleAckBuilder builder_(_fbb);
  builder_.add_result(result);
  return builder_.Finish();
}

struct MsgSelectHeroReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint32_t hero_id() const { return GetField<uint32_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, 4 /* hero_id */) &&
           verifier.EndTable();
  }
};

struct MsgSelectHeroReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_hero_id(uint32_t hero_id) { fbb_.AddElement<uint32_t>(4, hero_id, 0); }
  MsgSelectHeroReqBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgSelectHeroReqBuilder &operator=(const MsgSelectHeroReqBuilder &);
  flatbuffers::Offset<MsgSelectHeroReq> Finish() {
    auto o = flatbuffers::Offset<MsgSelectHeroReq>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgSelectHeroReq> CreateMsgSelectHeroReq(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t hero_id = 0) {
  MsgSelectHeroReqBuilder builder_(_fbb);
  builder_.add_hero_id(hero_id);
  return builder_.Finish();
}

struct MsgSelectHeroAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t player_id() const { return GetField<uint64_t>(4, 0); }
  uint32_t hero_id() const { return GetField<uint32_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* player_id */) &&
           VerifyField<uint32_t>(verifier, 6 /* hero_id */) &&
           verifier.EndTable();
  }
};

struct MsgSelectHeroAckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_player_id(uint64_t player_id) { fbb_.AddElement<uint64_t>(4, player_id, 0); }
  void add_hero_id(uint32_t hero_id) { fbb_.AddElement<uint32_t>(6, hero_id, 0); }
  MsgSelectHeroAckBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgSelectHeroAckBuilder &operator=(const MsgSelectHeroAckBuilder &);
  flatbuffers::Offset<MsgSelectHeroAck> Finish() {
    auto o = flatbuffers::Offset<MsgSelectHeroAck>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<MsgSelectHeroAck> CreateMsgSelectHeroAck(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t player_id = 0,
   uint32_t hero_id = 0) {
  MsgSelectHeroAckBuilder builder_(_fbb);
  builder_.add_player_id(player_id);
  builder_.add_hero_id(hero_id);
  return builder_.Finish();
}

struct MsgConfirmHeroReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint32_t hero_id() const { return GetField<uint32_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, 4 /* hero_id */) &&
           verifier.EndTable();
  }
};

struct MsgConfirmHeroReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_hero_id(uint32_t hero_id) { fbb_.AddElement<uint32_t>(4, hero_id, 0); }
  MsgConfirmHeroReqBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgConfirmHeroReqBuilder &operator=(const MsgConfirmHeroReqBuilder &);
  flatbuffers::Offset<MsgConfirmHeroReq> Finish() {
    auto o = flatbuffers::Offset<MsgConfirmHeroReq>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgConfirmHeroReq> CreateMsgConfirmHeroReq(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t hero_id = 0) {
  MsgConfirmHeroReqBuilder builder_(_fbb);
  builder_.add_hero_id(hero_id);
  return builder_.Finish();
}

struct MsgConfirmHeroAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t player_id() const { return GetField<uint64_t>(4, 0); }
  uint32_t hero_id() const { return GetField<uint32_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* player_id */) &&
           VerifyField<uint32_t>(verifier, 6 /* hero_id */) &&
           verifier.EndTable();
  }
};

struct MsgConfirmHeroAckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_player_id(uint64_t player_id) { fbb_.AddElement<uint64_t>(4, player_id, 0); }
  void add_hero_id(uint32_t hero_id) { fbb_.AddElement<uint32_t>(6, hero_id, 0); }
  MsgConfirmHeroAckBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgConfirmHeroAckBuilder &operator=(const MsgConfirmHeroAckBuilder &);
  flatbuffers::Offset<MsgConfirmHeroAck> Finish() {
    auto o = flatbuffers::Offset<MsgConfirmHeroAck>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<MsgConfirmHeroAck> CreateMsgConfirmHeroAck(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t player_id = 0,
   uint32_t hero_id = 0) {
  MsgConfirmHeroAckBuilder builder_(_fbb);
  builder_.add_player_id(player_id);
  builder_.add_hero_id(hero_id);
  return builder_.Finish();
}

}  // namespace FlatBuffer
}  // namespace MobaGo

#endif  // FLATBUFFERS_GENERATED_BATTLE_MOBAGO_FLATBUFFER_H_

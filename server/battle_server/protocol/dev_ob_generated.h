// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_DEVOB_MOBAGO_FLATBUFFER_H_
#define FLATBUFFERS_GENERATED_DEVOB_MOBAGO_FLATBUFFER_H_

#include "flatbuffers/flatbuffers.h"


namespace MobaGo {
namespace FlatBuffer {

struct SMsgRegisterToDevOb;
struct SMsgObReportGateInfo;
struct PObPlayerInfo;
struct SMsgRegisterOneBattle;
struct SMsgUpdateBattleFrame;
struct SMsgUpdateBattleStatus;
struct PObInfo;
struct PBattleOBInfo;
struct SMsgRequestObListAck;
struct MsgRequestObListAck;
struct MsgSelectObReq;
struct MsgSelectObAck;
struct MsgEnterDevObReq;

struct SMsgRegisterToDevOb FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint32_t gs_id() const { return GetField<uint32_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, 4 /* gs_id */) &&
           verifier.EndTable();
  }
};

struct SMsgRegisterToDevObBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_gs_id(uint32_t gs_id) { fbb_.AddElement<uint32_t>(4, gs_id, 0); }
  SMsgRegisterToDevObBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SMsgRegisterToDevObBuilder &operator=(const SMsgRegisterToDevObBuilder &);
  flatbuffers::Offset<SMsgRegisterToDevOb> Finish() {
    auto o = flatbuffers::Offset<SMsgRegisterToDevOb>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<SMsgRegisterToDevOb> CreateSMsgRegisterToDevOb(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t gs_id = 0) {
  SMsgRegisterToDevObBuilder builder_(_fbb);
  builder_.add_gs_id(gs_id);
  return builder_.Finish();
}

struct SMsgObReportGateInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *gate_ip() const { return GetPointer<const flatbuffers::String *>(4); }
  int32_t gate_port() const { return GetField<int32_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* gate_ip */) &&
           verifier.Verify(gate_ip()) &&
           VerifyField<int32_t>(verifier, 6 /* gate_port */) &&
           verifier.EndTable();
  }
};

struct SMsgObReportGateInfoBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_gate_ip(flatbuffers::Offset<flatbuffers::String> gate_ip) { fbb_.AddOffset(4, gate_ip); }
  void add_gate_port(int32_t gate_port) { fbb_.AddElement<int32_t>(6, gate_port, 0); }
  SMsgObReportGateInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SMsgObReportGateInfoBuilder &operator=(const SMsgObReportGateInfoBuilder &);
  flatbuffers::Offset<SMsgObReportGateInfo> Finish() {
    auto o = flatbuffers::Offset<SMsgObReportGateInfo>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<SMsgObReportGateInfo> CreateSMsgObReportGateInfo(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> gate_ip = 0,
   int32_t gate_port = 0) {
  SMsgObReportGateInfoBuilder builder_(_fbb);
  builder_.add_gate_port(gate_port);
  builder_.add_gate_ip(gate_ip);
  return builder_.Finish();
}

struct PObPlayerInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t uPlayerUid() const { return GetField<uint64_t>(4, 0); }
  uint32_t uHeroSkinId() const { return GetField<uint32_t>(6, 0); }
  uint8_t bytCamp() const { return GetField<uint8_t>(8, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* uPlayerUid */) &&
           VerifyField<uint32_t>(verifier, 6 /* uHeroSkinId */) &&
           VerifyField<uint8_t>(verifier, 8 /* bytCamp */) &&
           verifier.EndTable();
  }
};

struct PObPlayerInfoBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uPlayerUid(uint64_t uPlayerUid) { fbb_.AddElement<uint64_t>(4, uPlayerUid, 0); }
  void add_uHeroSkinId(uint32_t uHeroSkinId) { fbb_.AddElement<uint32_t>(6, uHeroSkinId, 0); }
  void add_bytCamp(uint8_t bytCamp) { fbb_.AddElement<uint8_t>(8, bytCamp, 0); }
  PObPlayerInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PObPlayerInfoBuilder &operator=(const PObPlayerInfoBuilder &);
  flatbuffers::Offset<PObPlayerInfo> Finish() {
    auto o = flatbuffers::Offset<PObPlayerInfo>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<PObPlayerInfo> CreatePObPlayerInfo(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t uPlayerUid = 0,
   uint32_t uHeroSkinId = 0,
   uint8_t bytCamp = 0) {
  PObPlayerInfoBuilder builder_(_fbb);
  builder_.add_uPlayerUid(uPlayerUid);
  builder_.add_uHeroSkinId(uHeroSkinId);
  builder_.add_bytCamp(bytCamp);
  return builder_.Finish();
}

struct SMsgRegisterOneBattle FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint32_t battle_id() const { return GetField<uint32_t>(4, 0); }
  uint32_t one_team_num() const { return GetField<uint32_t>(6, 0); }
  const flatbuffers::Vector<flatbuffers::Offset<PObPlayerInfo>> *player_list() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<PObPlayerInfo>> *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, 4 /* battle_id */) &&
           VerifyField<uint32_t>(verifier, 6 /* one_team_num */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* player_list */) &&
           verifier.Verify(player_list()) &&
           verifier.VerifyVectorOfTables(player_list()) &&
           verifier.EndTable();
  }
};

struct SMsgRegisterOneBattleBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_battle_id(uint32_t battle_id) { fbb_.AddElement<uint32_t>(4, battle_id, 0); }
  void add_one_team_num(uint32_t one_team_num) { fbb_.AddElement<uint32_t>(6, one_team_num, 0); }
  void add_player_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<PObPlayerInfo>>> player_list) { fbb_.AddOffset(8, player_list); }
  SMsgRegisterOneBattleBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SMsgRegisterOneBattleBuilder &operator=(const SMsgRegisterOneBattleBuilder &);
  flatbuffers::Offset<SMsgRegisterOneBattle> Finish() {
    auto o = flatbuffers::Offset<SMsgRegisterOneBattle>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<SMsgRegisterOneBattle> CreateSMsgRegisterOneBattle(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t battle_id = 0,
   uint32_t one_team_num = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<PObPlayerInfo>>> player_list = 0) {
  SMsgRegisterOneBattleBuilder builder_(_fbb);
  builder_.add_player_list(player_list);
  builder_.add_one_team_num(one_team_num);
  builder_.add_battle_id(battle_id);
  return builder_.Finish();
}

struct SMsgUpdateBattleFrame FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint32_t battle_id() const { return GetField<uint32_t>(4, 0); }
  uint32_t frame_no() const { return GetField<uint32_t>(6, 0); }
  const flatbuffers::Vector<int8_t> *frame_stream() const { return GetPointer<const flatbuffers::Vector<int8_t> *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, 4 /* battle_id */) &&
           VerifyField<uint32_t>(verifier, 6 /* frame_no */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* frame_stream */) &&
           verifier.Verify(frame_stream()) &&
           verifier.EndTable();
  }
};

struct SMsgUpdateBattleFrameBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_battle_id(uint32_t battle_id) { fbb_.AddElement<uint32_t>(4, battle_id, 0); }
  void add_frame_no(uint32_t frame_no) { fbb_.AddElement<uint32_t>(6, frame_no, 0); }
  void add_frame_stream(flatbuffers::Offset<flatbuffers::Vector<int8_t>> frame_stream) { fbb_.AddOffset(8, frame_stream); }
  SMsgUpdateBattleFrameBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SMsgUpdateBattleFrameBuilder &operator=(const SMsgUpdateBattleFrameBuilder &);
  flatbuffers::Offset<SMsgUpdateBattleFrame> Finish() {
    auto o = flatbuffers::Offset<SMsgUpdateBattleFrame>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<SMsgUpdateBattleFrame> CreateSMsgUpdateBattleFrame(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t battle_id = 0,
   uint32_t frame_no = 0,
   flatbuffers::Offset<flatbuffers::Vector<int8_t>> frame_stream = 0) {
  SMsgUpdateBattleFrameBuilder builder_(_fbb);
  builder_.add_frame_stream(frame_stream);
  builder_.add_frame_no(frame_no);
  builder_.add_battle_id(battle_id);
  return builder_.Finish();
}

struct SMsgUpdateBattleStatus FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint32_t battle_id() const { return GetField<uint32_t>(4, 0); }
  uint32_t status() const { return GetField<uint32_t>(6, 0); }
  uint32_t is_end() const { return GetField<uint32_t>(8, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, 4 /* battle_id */) &&
           VerifyField<uint32_t>(verifier, 6 /* status */) &&
           VerifyField<uint32_t>(verifier, 8 /* is_end */) &&
           verifier.EndTable();
  }
};

struct SMsgUpdateBattleStatusBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_battle_id(uint32_t battle_id) { fbb_.AddElement<uint32_t>(4, battle_id, 0); }
  void add_status(uint32_t status) { fbb_.AddElement<uint32_t>(6, status, 0); }
  void add_is_end(uint32_t is_end) { fbb_.AddElement<uint32_t>(8, is_end, 0); }
  SMsgUpdateBattleStatusBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SMsgUpdateBattleStatusBuilder &operator=(const SMsgUpdateBattleStatusBuilder &);
  flatbuffers::Offset<SMsgUpdateBattleStatus> Finish() {
    auto o = flatbuffers::Offset<SMsgUpdateBattleStatus>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<SMsgUpdateBattleStatus> CreateSMsgUpdateBattleStatus(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t battle_id = 0,
   uint32_t status = 0,
   uint32_t is_end = 0) {
  SMsgUpdateBattleStatusBuilder builder_(_fbb);
  builder_.add_is_end(is_end);
  builder_.add_status(status);
  builder_.add_battle_id(battle_id);
  return builder_.Finish();
}

struct PObInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint32_t ob_id() const { return GetField<uint32_t>(4, 0); }
  const flatbuffers::String *start_time() const { return GetPointer<const flatbuffers::String *>(6); }
  uint32_t one_team_num() const { return GetField<uint32_t>(8, 0); }
  uint32_t status() const { return GetField<uint32_t>(10, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, 4 /* ob_id */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* start_time */) &&
           verifier.Verify(start_time()) &&
           VerifyField<uint32_t>(verifier, 8 /* one_team_num */) &&
           VerifyField<uint32_t>(verifier, 10 /* status */) &&
           verifier.EndTable();
  }
};

struct PObInfoBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ob_id(uint32_t ob_id) { fbb_.AddElement<uint32_t>(4, ob_id, 0); }
  void add_start_time(flatbuffers::Offset<flatbuffers::String> start_time) { fbb_.AddOffset(6, start_time); }
  void add_one_team_num(uint32_t one_team_num) { fbb_.AddElement<uint32_t>(8, one_team_num, 0); }
  void add_status(uint32_t status) { fbb_.AddElement<uint32_t>(10, status, 0); }
  PObInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PObInfoBuilder &operator=(const PObInfoBuilder &);
  flatbuffers::Offset<PObInfo> Finish() {
    auto o = flatbuffers::Offset<PObInfo>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<PObInfo> CreatePObInfo(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t ob_id = 0,
   flatbuffers::Offset<flatbuffers::String> start_time = 0,
   uint32_t one_team_num = 0,
   uint32_t status = 0) {
  PObInfoBuilder builder_(_fbb);
  builder_.add_status(status);
  builder_.add_one_team_num(one_team_num);
  builder_.add_start_time(start_time);
  builder_.add_ob_id(ob_id);
  return builder_.Finish();
}

struct PBattleOBInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const PObInfo *ob_short_Info() const { return GetPointer<const PObInfo *>(4); }
  const flatbuffers::Vector<flatbuffers::Offset<SMsgUpdateBattleFrame>> *ob_list() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<SMsgUpdateBattleFrame>> *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* ob_short_Info */) &&
           verifier.VerifyTable(ob_short_Info()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* ob_list */) &&
           verifier.Verify(ob_list()) &&
           verifier.VerifyVectorOfTables(ob_list()) &&
           verifier.EndTable();
  }
};

struct PBattleOBInfoBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ob_short_Info(flatbuffers::Offset<PObInfo> ob_short_Info) { fbb_.AddOffset(4, ob_short_Info); }
  void add_ob_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SMsgUpdateBattleFrame>>> ob_list) { fbb_.AddOffset(6, ob_list); }
  PBattleOBInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PBattleOBInfoBuilder &operator=(const PBattleOBInfoBuilder &);
  flatbuffers::Offset<PBattleOBInfo> Finish() {
    auto o = flatbuffers::Offset<PBattleOBInfo>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<PBattleOBInfo> CreatePBattleOBInfo(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<PObInfo> ob_short_Info = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SMsgUpdateBattleFrame>>> ob_list = 0) {
  PBattleOBInfoBuilder builder_(_fbb);
  builder_.add_ob_list(ob_list);
  builder_.add_ob_short_Info(ob_short_Info);
  return builder_.Finish();
}

struct SMsgRequestObListAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint32_t battle_id() const { return GetField<uint32_t>(4, 0); }
  const flatbuffers::Vector<flatbuffers::Offset<PObInfo>> *ob_list() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<PObInfo>> *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, 4 /* battle_id */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* ob_list */) &&
           verifier.Verify(ob_list()) &&
           verifier.VerifyVectorOfTables(ob_list()) &&
           verifier.EndTable();
  }
};

struct SMsgRequestObListAckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_battle_id(uint32_t battle_id) { fbb_.AddElement<uint32_t>(4, battle_id, 0); }
  void add_ob_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<PObInfo>>> ob_list) { fbb_.AddOffset(6, ob_list); }
  SMsgRequestObListAckBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SMsgRequestObListAckBuilder &operator=(const SMsgRequestObListAckBuilder &);
  flatbuffers::Offset<SMsgRequestObListAck> Finish() {
    auto o = flatbuffers::Offset<SMsgRequestObListAck>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<SMsgRequestObListAck> CreateSMsgRequestObListAck(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t battle_id = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<PObInfo>>> ob_list = 0) {
  SMsgRequestObListAckBuilder builder_(_fbb);
  builder_.add_ob_list(ob_list);
  builder_.add_battle_id(battle_id);
  return builder_.Finish();
}

struct MsgRequestObListAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::Vector<flatbuffers::Offset<PObInfo>> *ob_list() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<PObInfo>> *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* ob_list */) &&
           verifier.Verify(ob_list()) &&
           verifier.VerifyVectorOfTables(ob_list()) &&
           verifier.EndTable();
  }
};

struct MsgRequestObListAckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ob_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<PObInfo>>> ob_list) { fbb_.AddOffset(4, ob_list); }
  MsgRequestObListAckBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgRequestObListAckBuilder &operator=(const MsgRequestObListAckBuilder &);
  flatbuffers::Offset<MsgRequestObListAck> Finish() {
    auto o = flatbuffers::Offset<MsgRequestObListAck>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgRequestObListAck> CreateMsgRequestObListAck(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<PObInfo>>> ob_list = 0) {
  MsgRequestObListAckBuilder builder_(_fbb);
  builder_.add_ob_list(ob_list);
  return builder_.Finish();
}

struct MsgSelectObReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint32_t ob_id() const { return GetField<uint32_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, 4 /* ob_id */) &&
           verifier.EndTable();
  }
};

struct MsgSelectObReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ob_id(uint32_t ob_id) { fbb_.AddElement<uint32_t>(4, ob_id, 0); }
  MsgSelectObReqBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgSelectObReqBuilder &operator=(const MsgSelectObReqBuilder &);
  flatbuffers::Offset<MsgSelectObReq> Finish() {
    auto o = flatbuffers::Offset<MsgSelectObReq>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgSelectObReq> CreateMsgSelectObReq(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t ob_id = 0) {
  MsgSelectObReqBuilder builder_(_fbb);
  builder_.add_ob_id(ob_id);
  return builder_.Finish();
}

struct MsgSelectObAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *ob_ip_addr() const { return GetPointer<const flatbuffers::String *>(4); }
  int32_t ob_port() const { return GetField<int32_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* ob_ip_addr */) &&
           verifier.Verify(ob_ip_addr()) &&
           VerifyField<int32_t>(verifier, 6 /* ob_port */) &&
           verifier.EndTable();
  }
};

struct MsgSelectObAckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ob_ip_addr(flatbuffers::Offset<flatbuffers::String> ob_ip_addr) { fbb_.AddOffset(4, ob_ip_addr); }
  void add_ob_port(int32_t ob_port) { fbb_.AddElement<int32_t>(6, ob_port, 0); }
  MsgSelectObAckBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgSelectObAckBuilder &operator=(const MsgSelectObAckBuilder &);
  flatbuffers::Offset<MsgSelectObAck> Finish() {
    auto o = flatbuffers::Offset<MsgSelectObAck>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<MsgSelectObAck> CreateMsgSelectObAck(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> ob_ip_addr = 0,
   int32_t ob_port = 0) {
  MsgSelectObAckBuilder builder_(_fbb);
  builder_.add_ob_port(ob_port);
  builder_.add_ob_ip_addr(ob_ip_addr);
  return builder_.Finish();
}

struct MsgEnterDevObReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint32_t ob_id() const { return GetField<uint32_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, 4 /* ob_id */) &&
           verifier.EndTable();
  }
};

struct MsgEnterDevObReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ob_id(uint32_t ob_id) { fbb_.AddElement<uint32_t>(4, ob_id, 0); }
  MsgEnterDevObReqBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgEnterDevObReqBuilder &operator=(const MsgEnterDevObReqBuilder &);
  flatbuffers::Offset<MsgEnterDevObReq> Finish() {
    auto o = flatbuffers::Offset<MsgEnterDevObReq>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgEnterDevObReq> CreateMsgEnterDevObReq(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t ob_id = 0) {
  MsgEnterDevObReqBuilder builder_(_fbb);
  builder_.add_ob_id(ob_id);
  return builder_.Finish();
}

}  // namespace FlatBuffer
}  // namespace MobaGo

#endif  // FLATBUFFERS_GENERATED_DEVOB_MOBAGO_FLATBUFFER_H_

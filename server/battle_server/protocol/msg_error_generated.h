// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_MSGERROR_MOBAGO_FLATBUFFER_H_
#define FLATBUFFERS_GENERATED_MSGERROR_MOBAGO_FLATBUFFER_H_

#include "flatbuffers/flatbuffers.h"


namespace MobaGo {
namespace FlatBuffer {

struct MsgError;

enum Error {
  Error_EmptyAccount = 1,
  Error_NoAccount = 2,
  Error_CreateAccount = 3,
  Error_VRPublicNoAccount = 4,
  Error_NoAvailableVR = 5,
  Error_VRNoAccount = 6,
  Error_DuplicateSummoner = 7,
  Error_IllegalChar = 8,
  Error_NeedCreateSummoner = 9,
  Error_MakeGuidFail = 10,
  Error_SummonerNameIsEmpty = 11,
  Error_FriendSvrHasNoSummoner = 12
};

inline const char **EnumNamesError() {
  static const char *names[] = { "EmptyAccount", "NoAccount", "CreateAccount", "VRPublicNoAccount", "NoAvailableVR", "VRNoAccount", "DuplicateSummoner", "IllegalChar", "NeedCreateSummoner", "MakeGuidFail", "SummonerNameIsEmpty", "FriendSvrHasNoSummoner", nullptr };
  return names;
}

inline const char *EnumNameError(Error e) { return EnumNamesError()[static_cast<int>(e) - static_cast<int>(Error_EmptyAccount)]; }

enum InterError {
  InterError_FriendSvrHasNoSummoner = 1,
  InterError_SummonerNameIsEmpty = 2
};

inline const char **EnumNamesInterError() {
  static const char *names[] = { "FriendSvrHasNoSummoner", "SummonerNameIsEmpty", nullptr };
  return names;
}

inline const char *EnumNameInterError(InterError e) { return EnumNamesInterError()[static_cast<int>(e) - static_cast<int>(InterError_FriendSvrHasNoSummoner)]; }

struct MsgError FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint32_t error_code() const { return GetField<uint32_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, 4 /* error_code */) &&
           verifier.EndTable();
  }
};

struct MsgErrorBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_error_code(uint32_t error_code) { fbb_.AddElement<uint32_t>(4, error_code, 0); }
  MsgErrorBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgErrorBuilder &operator=(const MsgErrorBuilder &);
  flatbuffers::Offset<MsgError> Finish() {
    auto o = flatbuffers::Offset<MsgError>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgError> CreateMsgError(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t error_code = 0) {
  MsgErrorBuilder builder_(_fbb);
  builder_.add_error_code(error_code);
  return builder_.Finish();
}

}  // namespace FlatBuffer
}  // namespace MobaGo

#endif  // FLATBUFFERS_GENERATED_MSGERROR_MOBAGO_FLATBUFFER_H_

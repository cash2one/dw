// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FRIEND_MOBAGO_FLATBUFFER_H_
#define FLATBUFFERS_GENERATED_FRIEND_MOBAGO_FLATBUFFER_H_

#include "flatbuffers/flatbuffers.h"


namespace MobaGo {
namespace FlatBuffer {

struct FriendInfo;
struct MsgAddFriendReq;
struct MsgAddFriendAck;
struct MsgDelFriendReq;
struct MsgDelFriendAck;
struct MsgConfirmAddFriendReq;
struct MsgConfirmAddFriendAck;
struct MsgAddCancelFriendReq;
struct MsgAddCancelFriendAck;
struct MsgSearchFriendReq;
struct MsgSearchFriendAck;
struct MsgFriendListAck;
struct MsgApplyForFriendListAck;
struct MsgVRFriendOperateReq;
struct MsgFriendDetailInfoReq;
struct MsgFriendDetailInfoAck;
struct FriendStatus;
struct MsgFriendStatusAck;

enum FriendRelationOperResult {
  FriendRelationOperResult_FROR_SUCCESS = 0,
  FriendRelationOperResult_FROR_FAIL = 1
};

inline const char **EnumNamesFriendRelationOperResult() {
  static const char *names[] = { "FROR_SUCCESS", "FROR_FAIL", nullptr };
  return names;
}

inline const char *EnumNameFriendRelationOperResult(FriendRelationOperResult e) { return EnumNamesFriendRelationOperResult()[static_cast<int>(e)]; }

enum friend_operate_type {
  friend_operate_type_add_friend = 0,
  friend_operate_type_del_friend = 1,
  friend_operate_type_add_confirm = 2,
  friend_operate_type_add_cancel = 3
};

inline const char **EnumNamesfriend_operate_type() {
  static const char *names[] = { "add_friend", "del_friend", "add_confirm", "add_cancel", nullptr };
  return names;
}

inline const char *EnumNamefriend_operate_type(friend_operate_type e) { return EnumNamesfriend_operate_type()[static_cast<int>(e)]; }

enum SummonerStatus {
  SummonerStatus_Offline = 0,
  SummonerStatus_Idle = 1,
  SummonerStatus_Gaming = 2,
  SummonerStatus_GameOB = 3,
  SummonerStatus_GameSelectHero = 4
};

inline const char **EnumNamesSummonerStatus() {
  static const char *names[] = { "Offline", "Idle", "Gaming", "GameOB", "GameSelectHero", nullptr };
  return names;
}

inline const char *EnumNameSummonerStatus(SummonerStatus e) { return EnumNamesSummonerStatus()[static_cast<int>(e)]; }

struct FriendInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t friend_id() const { return GetField<uint64_t>(4, 0); }
  uint32_t head_id() const { return GetField<uint32_t>(6, 0); }
  uint8_t status() const { return GetField<uint8_t>(8, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* friend_id */) &&
           VerifyField<uint32_t>(verifier, 6 /* head_id */) &&
           VerifyField<uint8_t>(verifier, 8 /* status */) &&
           verifier.EndTable();
  }
};

struct FriendInfoBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_friend_id(uint64_t friend_id) { fbb_.AddElement<uint64_t>(4, friend_id, 0); }
  void add_head_id(uint32_t head_id) { fbb_.AddElement<uint32_t>(6, head_id, 0); }
  void add_status(uint8_t status) { fbb_.AddElement<uint8_t>(8, status, 0); }
  FriendInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FriendInfoBuilder &operator=(const FriendInfoBuilder &);
  flatbuffers::Offset<FriendInfo> Finish() {
    auto o = flatbuffers::Offset<FriendInfo>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<FriendInfo> CreateFriendInfo(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t friend_id = 0,
   uint32_t head_id = 0,
   uint8_t status = 0) {
  FriendInfoBuilder builder_(_fbb);
  builder_.add_friend_id(friend_id);
  builder_.add_head_id(head_id);
  builder_.add_status(status);
  return builder_.Finish();
}

struct MsgAddFriendReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t friend_id() const { return GetField<uint64_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* friend_id */) &&
           verifier.EndTable();
  }
};

struct MsgAddFriendReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_friend_id(uint64_t friend_id) { fbb_.AddElement<uint64_t>(4, friend_id, 0); }
  MsgAddFriendReqBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgAddFriendReqBuilder &operator=(const MsgAddFriendReqBuilder &);
  flatbuffers::Offset<MsgAddFriendReq> Finish() {
    auto o = flatbuffers::Offset<MsgAddFriendReq>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgAddFriendReq> CreateMsgAddFriendReq(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t friend_id = 0) {
  MsgAddFriendReqBuilder builder_(_fbb);
  builder_.add_friend_id(friend_id);
  return builder_.Finish();
}

struct MsgAddFriendAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint8_t add_friend_result() const { return GetField<uint8_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* add_friend_result */) &&
           verifier.EndTable();
  }
};

struct MsgAddFriendAckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_add_friend_result(uint8_t add_friend_result) { fbb_.AddElement<uint8_t>(4, add_friend_result, 0); }
  MsgAddFriendAckBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgAddFriendAckBuilder &operator=(const MsgAddFriendAckBuilder &);
  flatbuffers::Offset<MsgAddFriendAck> Finish() {
    auto o = flatbuffers::Offset<MsgAddFriendAck>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgAddFriendAck> CreateMsgAddFriendAck(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t add_friend_result = 0) {
  MsgAddFriendAckBuilder builder_(_fbb);
  builder_.add_add_friend_result(add_friend_result);
  return builder_.Finish();
}

struct MsgDelFriendReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t friend_id() const { return GetField<uint64_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* friend_id */) &&
           verifier.EndTable();
  }
};

struct MsgDelFriendReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_friend_id(uint64_t friend_id) { fbb_.AddElement<uint64_t>(4, friend_id, 0); }
  MsgDelFriendReqBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgDelFriendReqBuilder &operator=(const MsgDelFriendReqBuilder &);
  flatbuffers::Offset<MsgDelFriendReq> Finish() {
    auto o = flatbuffers::Offset<MsgDelFriendReq>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgDelFriendReq> CreateMsgDelFriendReq(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t friend_id = 0) {
  MsgDelFriendReqBuilder builder_(_fbb);
  builder_.add_friend_id(friend_id);
  return builder_.Finish();
}

struct MsgDelFriendAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint8_t del_friend_result() const { return GetField<uint8_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* del_friend_result */) &&
           verifier.EndTable();
  }
};

struct MsgDelFriendAckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_del_friend_result(uint8_t del_friend_result) { fbb_.AddElement<uint8_t>(4, del_friend_result, 0); }
  MsgDelFriendAckBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgDelFriendAckBuilder &operator=(const MsgDelFriendAckBuilder &);
  flatbuffers::Offset<MsgDelFriendAck> Finish() {
    auto o = flatbuffers::Offset<MsgDelFriendAck>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgDelFriendAck> CreateMsgDelFriendAck(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t del_friend_result = 0) {
  MsgDelFriendAckBuilder builder_(_fbb);
  builder_.add_del_friend_result(del_friend_result);
  return builder_.Finish();
}

struct MsgConfirmAddFriendReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t friend_id() const { return GetField<uint64_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* friend_id */) &&
           verifier.EndTable();
  }
};

struct MsgConfirmAddFriendReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_friend_id(uint64_t friend_id) { fbb_.AddElement<uint64_t>(4, friend_id, 0); }
  MsgConfirmAddFriendReqBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgConfirmAddFriendReqBuilder &operator=(const MsgConfirmAddFriendReqBuilder &);
  flatbuffers::Offset<MsgConfirmAddFriendReq> Finish() {
    auto o = flatbuffers::Offset<MsgConfirmAddFriendReq>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgConfirmAddFriendReq> CreateMsgConfirmAddFriendReq(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t friend_id = 0) {
  MsgConfirmAddFriendReqBuilder builder_(_fbb);
  builder_.add_friend_id(friend_id);
  return builder_.Finish();
}

struct MsgConfirmAddFriendAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const FriendInfo *friend_info() const { return GetPointer<const FriendInfo *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* friend_info */) &&
           verifier.VerifyTable(friend_info()) &&
           verifier.EndTable();
  }
};

struct MsgConfirmAddFriendAckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_friend_info(flatbuffers::Offset<FriendInfo> friend_info) { fbb_.AddOffset(4, friend_info); }
  MsgConfirmAddFriendAckBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgConfirmAddFriendAckBuilder &operator=(const MsgConfirmAddFriendAckBuilder &);
  flatbuffers::Offset<MsgConfirmAddFriendAck> Finish() {
    auto o = flatbuffers::Offset<MsgConfirmAddFriendAck>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgConfirmAddFriendAck> CreateMsgConfirmAddFriendAck(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<FriendInfo> friend_info = 0) {
  MsgConfirmAddFriendAckBuilder builder_(_fbb);
  builder_.add_friend_info(friend_info);
  return builder_.Finish();
}

struct MsgAddCancelFriendReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t friend_id() const { return GetField<uint64_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* friend_id */) &&
           verifier.EndTable();
  }
};

struct MsgAddCancelFriendReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_friend_id(uint64_t friend_id) { fbb_.AddElement<uint64_t>(4, friend_id, 0); }
  MsgAddCancelFriendReqBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgAddCancelFriendReqBuilder &operator=(const MsgAddCancelFriendReqBuilder &);
  flatbuffers::Offset<MsgAddCancelFriendReq> Finish() {
    auto o = flatbuffers::Offset<MsgAddCancelFriendReq>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgAddCancelFriendReq> CreateMsgAddCancelFriendReq(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t friend_id = 0) {
  MsgAddCancelFriendReqBuilder builder_(_fbb);
  builder_.add_friend_id(friend_id);
  return builder_.Finish();
}

struct MsgAddCancelFriendAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint8_t confirm_cancel_result() const { return GetField<uint8_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* confirm_cancel_result */) &&
           verifier.EndTable();
  }
};

struct MsgAddCancelFriendAckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_confirm_cancel_result(uint8_t confirm_cancel_result) { fbb_.AddElement<uint8_t>(4, confirm_cancel_result, 0); }
  MsgAddCancelFriendAckBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgAddCancelFriendAckBuilder &operator=(const MsgAddCancelFriendAckBuilder &);
  flatbuffers::Offset<MsgAddCancelFriendAck> Finish() {
    auto o = flatbuffers::Offset<MsgAddCancelFriendAck>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgAddCancelFriendAck> CreateMsgAddCancelFriendAck(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t confirm_cancel_result = 0) {
  MsgAddCancelFriendAckBuilder builder_(_fbb);
  builder_.add_confirm_cancel_result(confirm_cancel_result);
  return builder_.Finish();
}

struct MsgSearchFriendReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *friend_name() const { return GetPointer<const flatbuffers::String *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* friend_name */) &&
           verifier.Verify(friend_name()) &&
           verifier.EndTable();
  }
};

struct MsgSearchFriendReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_friend_name(flatbuffers::Offset<flatbuffers::String> friend_name) { fbb_.AddOffset(4, friend_name); }
  MsgSearchFriendReqBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgSearchFriendReqBuilder &operator=(const MsgSearchFriendReqBuilder &);
  flatbuffers::Offset<MsgSearchFriendReq> Finish() {
    auto o = flatbuffers::Offset<MsgSearchFriendReq>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgSearchFriendReq> CreateMsgSearchFriendReq(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> friend_name = 0) {
  MsgSearchFriendReqBuilder builder_(_fbb);
  builder_.add_friend_name(friend_name);
  return builder_.Finish();
}

struct MsgSearchFriendAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const FriendInfo *friend_info() const { return GetPointer<const FriendInfo *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* friend_info */) &&
           verifier.VerifyTable(friend_info()) &&
           verifier.EndTable();
  }
};

struct MsgSearchFriendAckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_friend_info(flatbuffers::Offset<FriendInfo> friend_info) { fbb_.AddOffset(4, friend_info); }
  MsgSearchFriendAckBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgSearchFriendAckBuilder &operator=(const MsgSearchFriendAckBuilder &);
  flatbuffers::Offset<MsgSearchFriendAck> Finish() {
    auto o = flatbuffers::Offset<MsgSearchFriendAck>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgSearchFriendAck> CreateMsgSearchFriendAck(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<FriendInfo> friend_info = 0) {
  MsgSearchFriendAckBuilder builder_(_fbb);
  builder_.add_friend_info(friend_info);
  return builder_.Finish();
}

struct MsgFriendListAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::Vector<flatbuffers::Offset<FriendInfo>> *friend_list() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FriendInfo>> *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* friend_list */) &&
           verifier.Verify(friend_list()) &&
           verifier.VerifyVectorOfTables(friend_list()) &&
           verifier.EndTable();
  }
};

struct MsgFriendListAckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_friend_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FriendInfo>>> friend_list) { fbb_.AddOffset(4, friend_list); }
  MsgFriendListAckBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgFriendListAckBuilder &operator=(const MsgFriendListAckBuilder &);
  flatbuffers::Offset<MsgFriendListAck> Finish() {
    auto o = flatbuffers::Offset<MsgFriendListAck>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgFriendListAck> CreateMsgFriendListAck(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FriendInfo>>> friend_list = 0) {
  MsgFriendListAckBuilder builder_(_fbb);
  builder_.add_friend_list(friend_list);
  return builder_.Finish();
}

struct MsgApplyForFriendListAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::Vector<flatbuffers::Offset<FriendInfo>> *apply_friend_list() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FriendInfo>> *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* apply_friend_list */) &&
           verifier.Verify(apply_friend_list()) &&
           verifier.VerifyVectorOfTables(apply_friend_list()) &&
           verifier.EndTable();
  }
};

struct MsgApplyForFriendListAckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_apply_friend_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FriendInfo>>> apply_friend_list) { fbb_.AddOffset(4, apply_friend_list); }
  MsgApplyForFriendListAckBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgApplyForFriendListAckBuilder &operator=(const MsgApplyForFriendListAckBuilder &);
  flatbuffers::Offset<MsgApplyForFriendListAck> Finish() {
    auto o = flatbuffers::Offset<MsgApplyForFriendListAck>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgApplyForFriendListAck> CreateMsgApplyForFriendListAck(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FriendInfo>>> apply_friend_list = 0) {
  MsgApplyForFriendListAckBuilder builder_(_fbb);
  builder_.add_apply_friend_list(apply_friend_list);
  return builder_.Finish();
}

struct MsgVRFriendOperateReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t friend_id() const { return GetField<uint64_t>(4, 0); }
  uint8_t operate_type() const { return GetField<uint8_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* friend_id */) &&
           VerifyField<uint8_t>(verifier, 6 /* operate_type */) &&
           verifier.EndTable();
  }
};

struct MsgVRFriendOperateReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_friend_id(uint64_t friend_id) { fbb_.AddElement<uint64_t>(4, friend_id, 0); }
  void add_operate_type(uint8_t operate_type) { fbb_.AddElement<uint8_t>(6, operate_type, 0); }
  MsgVRFriendOperateReqBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgVRFriendOperateReqBuilder &operator=(const MsgVRFriendOperateReqBuilder &);
  flatbuffers::Offset<MsgVRFriendOperateReq> Finish() {
    auto o = flatbuffers::Offset<MsgVRFriendOperateReq>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<MsgVRFriendOperateReq> CreateMsgVRFriendOperateReq(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t friend_id = 0,
   uint8_t operate_type = 0) {
  MsgVRFriendOperateReqBuilder builder_(_fbb);
  builder_.add_friend_id(friend_id);
  builder_.add_operate_type(operate_type);
  return builder_.Finish();
}

struct MsgFriendDetailInfoReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t friend_id() const { return GetField<uint64_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* friend_id */) &&
           verifier.EndTable();
  }
};

struct MsgFriendDetailInfoReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_friend_id(uint64_t friend_id) { fbb_.AddElement<uint64_t>(4, friend_id, 0); }
  MsgFriendDetailInfoReqBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgFriendDetailInfoReqBuilder &operator=(const MsgFriendDetailInfoReqBuilder &);
  flatbuffers::Offset<MsgFriendDetailInfoReq> Finish() {
    auto o = flatbuffers::Offset<MsgFriendDetailInfoReq>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgFriendDetailInfoReq> CreateMsgFriendDetailInfoReq(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t friend_id = 0) {
  MsgFriendDetailInfoReqBuilder builder_(_fbb);
  builder_.add_friend_id(friend_id);
  return builder_.Finish();
}

struct MsgFriendDetailInfoAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const FriendInfo *friend_info() const { return GetPointer<const FriendInfo *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* friend_info */) &&
           verifier.VerifyTable(friend_info()) &&
           verifier.EndTable();
  }
};

struct MsgFriendDetailInfoAckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_friend_info(flatbuffers::Offset<FriendInfo> friend_info) { fbb_.AddOffset(4, friend_info); }
  MsgFriendDetailInfoAckBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgFriendDetailInfoAckBuilder &operator=(const MsgFriendDetailInfoAckBuilder &);
  flatbuffers::Offset<MsgFriendDetailInfoAck> Finish() {
    auto o = flatbuffers::Offset<MsgFriendDetailInfoAck>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgFriendDetailInfoAck> CreateMsgFriendDetailInfoAck(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<FriendInfo> friend_info = 0) {
  MsgFriendDetailInfoAckBuilder builder_(_fbb);
  builder_.add_friend_info(friend_info);
  return builder_.Finish();
}

struct FriendStatus FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t friend_id() const { return GetField<uint64_t>(4, 0); }
  int8_t status() const { return GetField<int8_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* friend_id */) &&
           VerifyField<int8_t>(verifier, 6 /* status */) &&
           verifier.EndTable();
  }
};

struct FriendStatusBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_friend_id(uint64_t friend_id) { fbb_.AddElement<uint64_t>(4, friend_id, 0); }
  void add_status(int8_t status) { fbb_.AddElement<int8_t>(6, status, 0); }
  FriendStatusBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FriendStatusBuilder &operator=(const FriendStatusBuilder &);
  flatbuffers::Offset<FriendStatus> Finish() {
    auto o = flatbuffers::Offset<FriendStatus>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<FriendStatus> CreateFriendStatus(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t friend_id = 0,
   int8_t status = 0) {
  FriendStatusBuilder builder_(_fbb);
  builder_.add_friend_id(friend_id);
  builder_.add_status(status);
  return builder_.Finish();
}

struct MsgFriendStatusAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::Vector<flatbuffers::Offset<FriendStatus>> *friend_status() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FriendStatus>> *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* friend_status */) &&
           verifier.Verify(friend_status()) &&
           verifier.VerifyVectorOfTables(friend_status()) &&
           verifier.EndTable();
  }
};

struct MsgFriendStatusAckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_friend_status(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FriendStatus>>> friend_status) { fbb_.AddOffset(4, friend_status); }
  MsgFriendStatusAckBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgFriendStatusAckBuilder &operator=(const MsgFriendStatusAckBuilder &);
  flatbuffers::Offset<MsgFriendStatusAck> Finish() {
    auto o = flatbuffers::Offset<MsgFriendStatusAck>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MsgFriendStatusAck> CreateMsgFriendStatusAck(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FriendStatus>>> friend_status = 0) {
  MsgFriendStatusAckBuilder builder_(_fbb);
  builder_.add_friend_status(friend_status);
  return builder_.Finish();
}

}  // namespace FlatBuffer
}  // namespace MobaGo

#endif  // FLATBUFFERS_GENERATED_FRIEND_MOBAGO_FLATBUFFER_H_
